(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(t,n,e){"use strict";var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){return 1===t.length&&(t=function(t){return function(n,e){return r(t(n),e)}}(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var f=r+i>>>1;t(n[f],e)<0?r=f+1:i=f}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var f=r+i>>>1;t(n[f],e)>0?i=f:r=f+1}return r}}};var f=i(r),o=f.right,a=(f.left,o);var u=function(t){return null===t?NaN:+t},c=function(t,n){var e,r,i=t.length,f=0,o=-1,a=0,c=0;if(null==n)for(;++o<i;)isNaN(e=u(t[o]))||(c+=(r=e-a)*(e-(a+=r/++f)));else for(;++o<i;)isNaN(e=u(n(t[o],o,t)))||(c+=(r=e-a)*(e-(a+=r/++f)));if(f>1)return c/(f-1)},s=function(t,n){var e=c(t,n);return e?Math.sqrt(e):e},h=function(t,n){var e,r,i,f=t.length,o=-1;if(null==n){for(;++o<f;)if(null!=(e=t[o])&&e>=e)for(r=i=e;++o<f;)null!=(e=t[o])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++o<f;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=i=e;++o<f;)null!=(e=n(t[o],o,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},l=Array.prototype,d=(l.slice,l.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),f=new Array(i);++r<i;)f[r]=t+r*e;return f}),p=Math.sqrt(50),_=Math.sqrt(10),b=Math.sqrt(2),v=function(t,n,e){var r,i,f,o,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(o=y(t,n,e))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),n=Math.floor(n/o),f=new Array(i=Math.ceil(n-t+1));++a<i;)f[a]=(t+a)*o;else for(t=Math.floor(t*o),n=Math.ceil(n*o),f=new Array(i=Math.ceil(t-n+1));++a<i;)f[a]=(t-a)/o;return r&&f.reverse(),f};function y(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),f=r/Math.pow(10,i);return i>=0?(f>=p?10:f>=_?5:f>=b?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(f>=p?10:f>=_?5:f>=b?2:1)}function g(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),f=r/i;return f>=p?i*=10:f>=_?i*=5:f>=b&&(i*=2),n<t?-i:i}var x=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},m=function(t,n,e){if(null==e&&(e=u),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,f=Math.floor(i),o=+e(t[f],f,t);return o+(+e(t[f+1],f+1,t)-o)*(i-f)}},w=function(t,n){var e,r,i=t.length,f=-1;if(null==n){for(;++f<i;)if(null!=(e=t[f])&&e>=e)for(r=e;++f<i;)null!=(e=t[f])&&e>r&&(r=e)}else for(;++f<i;)if(null!=(e=n(t[f],f,t))&&e>=e)for(r=e;++f<i;)null!=(e=n(t[f],f,t))&&e>r&&(r=e);return r},M=function(t){for(var n,e,r,i=t.length,f=-1,o=0;++f<i;)o+=t[f].length;for(e=new Array(o);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--o]=r[n];return e},T=function(t,n){var e,r,i=t.length,f=-1;if(null==n){for(;++f<i;)if(null!=(e=t[f])&&e>=e)for(r=e;++f<i;)null!=(e=t[f])&&r>e&&(r=e)}else for(;++f<i;)if(null!=(e=n(t[f],f,t))&&e>=e)for(r=e;++f<i;)null!=(e=n(t[f],f,t))&&r>e&&(r=e);return r},N=function(t){if(!(i=t.length))return[];for(var n=-1,e=T(t,A),r=new Array(e);++n<e;)for(var i,f=-1,o=r[n]=new Array(i);++f<i;)o[f]=t[f][n];return r};function A(t){return t.length}var S=Array.prototype.slice,k=function(t){return t},E=1,C=2,U=3,L=4,P=1e-6;function R(t){return"translate("+(t+.5)+",0)"}function D(t){return"translate(0,"+(t+.5)+")"}function q(){return!this.__axis}function F(t,n){var e=[],r=null,i=null,f=6,o=6,a=3,u=t===E||t===L?-1:1,c=t===L||t===C?"x":"y",s=t===E||t===U?R:D;function h(h){var l=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):k:i,p=Math.max(f,0)+a,_=n.range(),b=+_[0]+.5,v=+_[_.length-1]+.5,y=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),g=h.selection?h.selection():h,x=g.selectAll(".domain").data([null]),m=g.selectAll(".tick").data(l,n).order(),w=m.exit(),M=m.enter().append("g").attr("class","tick"),T=m.select("line"),N=m.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),m=m.merge(M),T=T.merge(M.append("line").attr("stroke","#000").attr(c+"2",u*f)),N=N.merge(M.append("text").attr("fill","#000").attr(c,u*p).attr("dy",t===E?"0em":t===U?"0.71em":"0.32em")),h!==g&&(x=x.transition(h),m=m.transition(h),T=T.transition(h),N=N.transition(h),w=w.transition(h).attr("opacity",P).attr("transform",function(t){return isFinite(t=y(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",P).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:y(t))})),w.remove(),x.attr("d",t===L||t==C?"M"+u*o+","+b+"H0.5V"+v+"H"+u*o:"M"+b+","+u*o+"V0.5H"+v+"V"+u*o),m.attr("opacity",1).attr("transform",function(t){return s(y(t))}),T.attr(c+"2",u*f),N.attr(c,u*p).text(d),g.filter(q).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===C?"start":t===L?"end":"middle"),g.each(function(){this.__axis=y})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=S.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:S.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:S.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(f=o=+t,h):f},h.tickSizeInner=function(t){return arguments.length?(f=+t,h):f},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(a=+t,h):a},h}function Y(t){return F(U,t)}function j(t){return F(L,t)}var O={value:function(){}};function z(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new I(r)}function I(t){this._=t}function H(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function $(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=O,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}I.prototype=z.prototype={constructor:I,on:function(t,n){var e,r=this._,i=function(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}(t+"",r),f=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++f<o;)if(e=(t=i[f]).type)r[e]=$(r[e],t.name,n);else if(null==n)for(e in r)r[e]=$(r[e],t.name,null);return this}for(;++f<o;)if((e=(t=i[f]).type)&&(e=H(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new I(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),f=0;f<e;++f)i[f]=arguments[f+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(f=0,e=(r=this._[t]).length;f<e;++f)r[f].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,f=r.length;i<f;++i)r[i].value.apply(n,e)}};var X=z,B="http://www.w3.org/1999/xhtml",V={svg:"http://www.w3.org/2000/svg",xhtml:B,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Z=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),V.hasOwnProperty(n)?{space:V[n],local:t}:t};var J=function(t){var n=Z(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===B&&n.documentElement.namespaceURI===B?n.createElement(t):n.createElementNS(e,t)}})(n)};function W(){}var Q=function(t){return null==t?W:function(){return this.querySelector(t)}};function G(){return[]}var K=function(t){return null==t?G:function(){return this.querySelectorAll(t)}},tt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var nt=document.documentElement;if(!nt.matches){var et=nt.webkitMatchesSelector||nt.msMatchesSelector||nt.mozMatchesSelector||nt.oMatchesSelector;tt=function(t){return function(){return et.call(this,t)}}}}var rt=tt,it=function(t){return new Array(t.length)};function ft(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}ft.prototype={constructor:ft,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var ot="$";function at(t,n,e,r,i,f){for(var o,a=0,u=n.length,c=f.length;a<c;++a)(o=n[a])?(o.__data__=f[a],r[a]=o):e[a]=new ft(t,f[a]);for(;a<u;++a)(o=n[a])&&(i[a]=o)}function ut(t,n,e,r,i,f,o){var a,u,c,s={},h=n.length,l=f.length,d=new Array(h);for(a=0;a<h;++a)(u=n[a])&&(d[a]=c=ot+o.call(u,u.__data__,a,n),c in s?i[a]=u:s[c]=u);for(a=0;a<l;++a)(u=s[c=ot+o.call(t,f[a],a,f)])?(r[a]=u,u.__data__=f[a],s[c]=null):e[a]=new ft(t,f[a]);for(a=0;a<h;++a)(u=n[a])&&s[d[a]]===u&&(i[a]=u)}function ct(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var st=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function ht(t,n){return t.style.getPropertyValue(n)||st(t).getComputedStyle(t,null).getPropertyValue(n)}function lt(t){return t.trim().split(/^|\s+/)}function dt(t){return t.classList||new pt(t)}function pt(t){this._node=t,this._names=lt(t.getAttribute("class")||"")}function _t(t,n){for(var e=dt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function bt(t,n){for(var e=dt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}pt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function vt(){this.textContent=""}function yt(){this.innerHTML=""}function gt(){this.nextSibling&&this.parentNode.appendChild(this)}function xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(){return null}function wt(){var t=this.parentNode;t&&t.removeChild(this)}function Mt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Tt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Nt={},At=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Nt={mouseenter:"mouseover",mouseleave:"mouseout"}));function St(t,n,e){return t=kt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function kt(t,n,e){return function(r){var i=At;At=r;try{t.call(this,this.__data__,n,e)}finally{At=i}}}function Et(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,f=n.length;r<f;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ct(t,n,e){var r=Nt.hasOwnProperty(t.type)?St:kt;return function(i,f,o){var a,u=this.__on,c=r(n,f,o);if(u)for(var s=0,h=u.length;s<h;++s)if((a=u[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},u?u.push(a):this.__on=[a]}}function Ut(t,n,e,r){var i=At;t.sourceEvent=At,At=t;try{return n.apply(e,r)}finally{At=i}}function Lt(t,n,e){var r=st(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Pt=[null];function Rt(t,n){this._groups=t,this._parents=n}function Dt(){return new Rt([[document.documentElement]],Pt)}Rt.prototype=Dt.prototype={constructor:Rt,select:function(t){"function"!=typeof t&&(t=Q(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var f,o,a=n[i],u=a.length,c=r[i]=new Array(u),s=0;s<u;++s)(f=a[s])&&(o=t.call(f,f.__data__,s,a))&&("__data__"in f&&(o.__data__=f.__data__),c[s]=o);return new Rt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=K(t));for(var n=this._groups,e=n.length,r=[],i=[],f=0;f<e;++f)for(var o,a=n[f],u=a.length,c=0;c<u;++c)(o=a[c])&&(r.push(t.call(o,o.__data__,c,a)),i.push(o));return new Rt(r,i)},filter:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var f,o=n[i],a=o.length,u=r[i]=[],c=0;c<a;++c)(f=o[c])&&t.call(f,f.__data__,c,o)&&u.push(f);return new Rt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e=n?ut:at,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var f=i.length,o=new Array(f),a=new Array(f),u=new Array(f),c=0;c<f;++c){var s=r[c],h=i[c],l=h.length,d=t.call(s,s&&s.__data__,c,r),p=d.length,_=a[c]=new Array(p),b=o[c]=new Array(p);e(s,h,_,b,u[c]=new Array(l),d,n);for(var v,y,g=0,x=0;g<p;++g)if(v=_[g]){for(g>=x&&(x=g+1);!(y=b[x])&&++x<p;);v._next=y||null}}return(o=new Rt(o,r))._enter=a,o._exit=u,o},enter:function(){return new Rt(this._enter||this._groups.map(it),this._parents)},exit:function(){return new Rt(this._exit||this._groups.map(it),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,f=Math.min(r,i),o=new Array(r),a=0;a<f;++a)for(var u,c=n[a],s=e[a],h=c.length,l=o[a]=new Array(h),d=0;d<h;++d)(u=c[d]||s[d])&&(l[d]=u);for(;a<r;++a)o[a]=n[a];return new Rt(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],f=i.length-1,o=i[f];--f>=0;)(r=i[f])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=ct);for(var e=this._groups,r=e.length,i=new Array(r),f=0;f<r;++f){for(var o,a=e[f],u=a.length,c=i[f]=new Array(u),s=0;s<u;++s)(o=a[s])&&(c[s]=o);c.sort(n)}return new Rt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,f=r.length;i<f;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,f=n[e],o=0,a=f.length;o<a;++o)(i=f[o])&&t.call(i,i.__data__,o,f);return this},attr:function(t,n){var e=Z(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):ht(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=lt(t+"");if(arguments.length<2){for(var r=dt(this.node()),i=-1,f=e.length;++i<f;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?_t:bt)(this,t)}}:n?function(t){return function(){_t(this,t)}}:function(t){return function(){bt(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?vt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?yt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(gt)},lower:function(){return this.each(xt)},append:function(t){var n="function"==typeof t?t:J(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:J(t),r=null==n?mt:"function"==typeof n?n:Q(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(wt)},clone:function(t){return this.select(t?Tt:Mt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,f=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),o=f.length;if(!(arguments.length<2)){for(a=n?Ct:Et,null==e&&(e=!1),r=0;r<o;++r)this.each(a(f[r],n,e));return this}var a=this.node().__on;if(a)for(var u,c=0,s=a.length;c<s;++c)for(r=0,u=a[c];r<o;++r)if((i=f[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Lt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Lt(this,t,n)}})(t,n))}};var qt=Dt,Ft=function(t){return"string"==typeof t?new Rt([[document.querySelector(t)]],[document.documentElement]):new Rt([[t]],Pt)},Yt=0;function jt(){this._="@"+(++Yt).toString(36)}jt.prototype=function(){return new jt}.prototype={constructor:jt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Ot=function(){for(var t,n=At;t=n.sourceEvent;)n=t;return n},zt=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},It=function(t){var n=Ot();return n.changedTouches&&(n=n.changedTouches[0]),zt(t,n)},Ht=function(t,n,e){arguments.length<3&&(e=n,n=Ot().changedTouches);for(var r,i=0,f=n?n.length:0;i<f;++i)if((r=n[i]).identifier===e)return zt(t,r);return null};var $t=function(){At.preventDefault(),At.stopImmediatePropagation()},Xt=function(t){var n=t.document.documentElement,e=Ft(t).on("dragstart.drag",$t,!0);"onselectstart"in n?e.on("selectstart.drag",$t,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function Bt(t,n){var e=t.document.documentElement,r=Ft(t).on("dragstart.drag",null);n&&(r.on("click.drag",$t,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Vt(t,n,e,r,i,f,o,a,u,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=f,this.y=o,this.dx=a,this.dy=u,this._=c}Vt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Zt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Jt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Wt(){}var Qt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",tn=/^#([0-9a-f]{3})$/,nn=/^#([0-9a-f]{6})$/,en=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),rn=new RegExp("^rgb\\("+[Kt,Kt,Kt]+"\\)$"),fn=new RegExp("^rgba\\("+[Qt,Qt,Qt,Gt]+"\\)$"),on=new RegExp("^rgba\\("+[Kt,Kt,Kt,Gt]+"\\)$"),an=new RegExp("^hsl\\("+[Gt,Kt,Kt]+"\\)$"),un=new RegExp("^hsla\\("+[Gt,Kt,Kt,Gt]+"\\)$"),cn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function sn(t){var n;return t=(t+"").trim().toLowerCase(),(n=tn.exec(t))?new _n((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=nn.exec(t))?hn(parseInt(n[1],16)):(n=en.exec(t))?new _n(n[1],n[2],n[3],1):(n=rn.exec(t))?new _n(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=fn.exec(t))?ln(n[1],n[2],n[3],n[4]):(n=on.exec(t))?ln(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=an.exec(t))?vn(n[1],n[2]/100,n[3]/100,1):(n=un.exec(t))?vn(n[1],n[2]/100,n[3]/100,n[4]):cn.hasOwnProperty(t)?hn(cn[t]):"transparent"===t?new _n(NaN,NaN,NaN,0):null}function hn(t){return new _n(t>>16&255,t>>8&255,255&t,1)}function ln(t,n,e,r){return r<=0&&(t=n=e=NaN),new _n(t,n,e,r)}function dn(t){return t instanceof Wt||(t=sn(t)),t?new _n((t=t.rgb()).r,t.g,t.b,t.opacity):new _n}function pn(t,n,e,r){return 1===arguments.length?dn(t):new _n(t,n,e,null==r?1:r)}function _n(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function bn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function vn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new gn(t,n,e,r)}function yn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof gn)return new gn(t.h,t.s,t.l,t.opacity);if(t instanceof Wt||(t=sn(t)),!t)return new gn;if(t instanceof gn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),f=Math.max(n,e,r),o=NaN,a=f-i,u=(f+i)/2;return a?(o=n===f?(e-r)/a+6*(e<r):e===f?(r-n)/a+2:(n-e)/a+4,a/=u<.5?f+i:2-f-i,o*=60):a=u>0&&u<1?0:o,new gn(o,a,u,t.opacity)}(t):new gn(t,n,e,null==r?1:r)}function gn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function xn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Zt(Wt,sn,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Zt(_n,pn,Jt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new _n(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new _n(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+bn(this.r)+bn(this.g)+bn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Zt(gn,yn,Jt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new gn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new gn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new _n(xn(t>=240?t-240:t+120,i,r),xn(t,i,r),xn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var mn=Math.PI/180,wn=180/Math.PI,Mn=.96422,Tn=1,Nn=.82521,An=4/29,Sn=6/29,kn=3*Sn*Sn,En=Sn*Sn*Sn;function Cn(t){if(t instanceof Ln)return new Ln(t.l,t.a,t.b,t.opacity);if(t instanceof jn){if(isNaN(t.h))return new Ln(t.l,0,0,t.opacity);var n=t.h*mn;return new Ln(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof _n||(t=dn(t));var e,r,i=qn(t.r),f=qn(t.g),o=qn(t.b),a=Pn((.2225045*i+.7168786*f+.0606169*o)/Tn);return i===f&&f===o?e=r=a:(e=Pn((.4360747*i+.3850649*f+.1430804*o)/Mn),r=Pn((.0139322*i+.0971045*f+.7141733*o)/Nn)),new Ln(116*a-16,500*(e-a),200*(a-r),t.opacity)}function Un(t,n,e,r){return 1===arguments.length?Cn(t):new Ln(t,n,e,null==r?1:r)}function Ln(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Pn(t){return t>En?Math.pow(t,1/3):t/kn+An}function Rn(t){return t>Sn?t*t*t:kn*(t-An)}function Dn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function qn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Fn(t){if(t instanceof jn)return new jn(t.h,t.c,t.l,t.opacity);if(t instanceof Ln||(t=Cn(t)),0===t.a&&0===t.b)return new jn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*wn;return new jn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Yn(t,n,e,r){return 1===arguments.length?Fn(t):new jn(t,n,e,null==r?1:r)}function jn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Zt(Ln,Un,Jt(Wt,{brighter:function(t){return new Ln(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ln(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new _n(Dn(3.1338561*(n=Mn*Rn(n))-1.6168667*(t=Tn*Rn(t))-.4906146*(e=Nn*Rn(e))),Dn(-.9787684*n+1.9161415*t+.033454*e),Dn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Zt(jn,Yn,Jt(Wt,{brighter:function(t){return new jn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new jn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Cn(this).rgb()}}));var On=-.29227,zn=-.90649,In=1.97294,Hn=In*zn,$n=1.78277*In,Xn=1.78277*On- -.14861*zn;function Bn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Vn)return new Vn(t.h,t.s,t.l,t.opacity);t instanceof _n||(t=dn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Xn*r+Hn*n-$n*e)/(Xn+Hn-$n),f=r-i,o=(In*(e-i)-On*f)/zn,a=Math.sqrt(o*o+f*f)/(In*i*(1-i)),u=a?Math.atan2(o,f)*wn-120:NaN;return new Vn(u<0?u+360:u,a,i,t.opacity)}(t):new Vn(t,n,e,null==r?1:r)}function Vn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Zn(t,n,e,r,i){var f=t*t,o=f*t;return((1-3*t+3*f-o)*n+(4-6*f+3*o)*e+(1+3*t+3*f-3*o)*r+o*i)/6}Zt(Vn,Bn,Jt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*mn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new _n(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(On*r+zn*i)),255*(n+e*(In*r)),this.opacity)}}));var Jn=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],f=t[r+1],o=r>0?t[r-1]:2*i-f,a=r<n-1?t[r+2]:2*f-i;return Zn((e-r/n)*n,o,i,f,a)}},Wn=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],f=t[r%n],o=t[(r+1)%n],a=t[(r+2)%n];return Zn((e-r/n)*n,i,f,o,a)}},Qn=function(t){return function(){return t}};function Gn(t,n){return function(e){return t+e*n}}function Kn(t,n){var e=n-t;return e?Gn(t,e>180||e<-180?e-360*Math.round(e/360):e):Qn(isNaN(t)?n:t)}function te(t){return 1==(t=+t)?ne:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Qn(isNaN(n)?e:n)}}function ne(t,n){var e=n-t;return e?Gn(t,e):Qn(isNaN(t)?n:t)}var ee=function t(n){var e=te(n);function r(t,n){var r=e((t=pn(t)).r,(n=pn(n)).r),i=e(t.g,n.g),f=e(t.b,n.b),o=ne(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=f(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function re(t){return function(n){var e,r,i=n.length,f=new Array(i),o=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=pn(n[e]),f[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return f=t(f),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=f(t),r.g=o(t),r.b=a(t),r+""}}}var ie=re(Jn),fe=(re(Wn),function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,f=new Array(i),o=new Array(r);for(e=0;e<i;++e)f[e]=be(t[e],n[e]);for(;e<r;++e)o[e]=n[e];return function(t){for(e=0;e<i;++e)o[e]=f[e](t);return o}}),oe=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},ae=function(t,n){return n-=t=+t,function(e){return t+n*e}},ue=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=be(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},ce=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,se=new RegExp(ce.source,"g");var he,le,de,pe,_e=function(t,n){var e,r,i,f=ce.lastIndex=se.lastIndex=0,o=-1,a=[],u=[];for(t+="",n+="";(e=ce.exec(t))&&(r=se.exec(n));)(i=r.index)>f&&(i=n.slice(f,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,u.push({i:o,x:ae(e,r)})),f=se.lastIndex;return f<n.length&&(i=n.slice(f),a[o]?a[o]+=i:a[++o]=i),a.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)a[(e=u[r]).i]=e.x(t);return a.join("")})},be=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Qn(n):("number"===r?ae:"string"===r?(e=sn(n))?(n=e,ee):_e:n instanceof sn?ee:n instanceof Date?oe:Array.isArray(n)?fe:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?ue:ae)(t,n)},ve=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},ye=180/Math.PI,ge={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},xe=function(t,n,e,r,i,f){var o,a,u;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,u/=a),t*r<n*e&&(t=-t,n=-n,u=-u,o=-o),{translateX:i,translateY:f,rotate:Math.atan2(n,t)*ye,skewX:Math.atan(u)*ye,scaleX:o,scaleY:a}};function me(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(f,o){var a=[],u=[];return f=t(f),o=t(o),function(t,r,i,f,o,a){if(t!==i||r!==f){var u=o.push("translate(",null,n,null,e);a.push({i:u-4,x:ae(t,i)},{i:u-2,x:ae(r,f)})}else(i||f)&&o.push("translate("+i+n+f+e)}(f.translateX,f.translateY,o.translateX,o.translateY,a,u),function(t,n,e,f){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),f.push({i:e.push(i(e)+"rotate(",null,r)-2,x:ae(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(f.rotate,o.rotate,a,u),function(t,n,e,f){t!==n?f.push({i:e.push(i(e)+"skewX(",null,r)-2,x:ae(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(f.skewX,o.skewX,a,u),function(t,n,e,r,f,o){if(t!==e||n!==r){var a=f.push(i(f)+"scale(",null,",",null,")");o.push({i:a-4,x:ae(t,e)},{i:a-2,x:ae(n,r)})}else 1===e&&1===r||f.push(i(f)+"scale("+e+","+r+")")}(f.scaleX,f.scaleY,o.scaleX,o.scaleY,a,u),f=o=null,function(t){for(var n,e=-1,r=u.length;++e<r;)a[(n=u[e]).i]=n.x(t);return a.join("")}}}var we=me(function(t){return"none"===t?ge:(he||(he=document.createElement("DIV"),le=document.documentElement,de=document.defaultView),he.style.transform=t,t=de.getComputedStyle(le.appendChild(he),null).getPropertyValue("transform"),le.removeChild(he),t=t.slice(7,-1).split(","),xe(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Me=me(function(t){return null==t?ge:(pe||(pe=document.createElementNS("http://www.w3.org/2000/svg","g")),pe.setAttribute("transform",t),(t=pe.transform.baseVal.consolidate())?(t=t.matrix,xe(t.a,t.b,t.c,t.d,t.e,t.f)):ge)},", ",")",")"),Te=Math.SQRT2;function Ne(t){return((t=Math.exp(t))+1/t)/2}var Ae=function(t,n){var e,r,i=t[0],f=t[1],o=t[2],a=n[0],u=n[1],c=n[2],s=a-i,h=u-f,l=s*s+h*h;if(l<1e-12)r=Math.log(c/o)/Te,e=function(t){return[i+t*s,f+t*h,o*Math.exp(Te*t*r)]};else{var d=Math.sqrt(l),p=(c*c-o*o+4*l)/(2*o*2*d),_=(c*c-o*o-4*l)/(2*c*2*d),b=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(_*_+1)-_);r=(v-b)/Te,e=function(t){var n=t*r,e=Ne(b),a=o/(2*d)*(e*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(Te*n+b)-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[i+a*s,f+a*h,o*e/Ne(Te*n+b)]}}return e.duration=1e3*r,e};function Se(t){return function(n,e){var r=t((n=yn(n)).h,(e=yn(e)).h),i=ne(n.s,e.s),f=ne(n.l,e.l),o=ne(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=f(t),n.opacity=o(t),n+""}}}Se(Kn),Se(ne);function ke(t){return function(n,e){var r=t((n=Yn(n)).h,(e=Yn(e)).h),i=ne(n.c,e.c),f=ne(n.l,e.l),o=ne(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=f(t),n.opacity=o(t),n+""}}}ke(Kn),ke(ne);function Ee(t){return function n(e){function r(n,r){var i=t((n=Bn(n)).h,(r=Bn(r)).h),f=ne(n.s,r.s),o=ne(n.l,r.l),a=ne(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=f(t),n.l=o(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}Ee(Kn);var Ce=Ee(ne);var Ue,Le,Pe=0,Re=0,De=0,qe=1e3,Fe=0,Ye=0,je=0,Oe="object"==typeof performance&&performance.now?performance:Date,ze="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ie(){return Ye||(ze(He),Ye=Oe.now()+je)}function He(){Ye=0}function $e(){this._call=this._time=this._next=null}function Xe(t,n,e){var r=new $e;return r.restart(t,n,e),r}function Be(){Ye=(Fe=Oe.now())+je,Pe=Re=0;try{!function(){Ie(),++Pe;for(var t,n=Ue;n;)(t=Ye-n._time)>=0&&n._call.call(null,t),n=n._next;--Pe}()}finally{Pe=0,function(){var t,n,e=Ue,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ue=n);Le=t,Ze(r)}(),Ye=0}}function Ve(){var t=Oe.now(),n=t-Fe;n>qe&&(je-=n,Fe=t)}function Ze(t){Pe||(Re&&(Re=clearTimeout(Re)),t-Ye>24?(t<1/0&&(Re=setTimeout(Be,t-Oe.now()-je)),De&&(De=clearInterval(De))):(De||(Fe=Oe.now(),De=setInterval(Ve,qe)),Pe=1,ze(Be)))}$e.prototype=Xe.prototype={constructor:$e,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ie():+e)+(null==n?0:+n),this._next||Le===this||(Le?Le._next=this:Ue=this,Le=this),this._call=t,this._time=e,Ze()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ze())}};var Je=function(t,n,e){var r=new $e;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},We=X("start","end","interrupt"),Qe=[],Ge=0,Ke=1,tr=2,nr=3,er=4,rr=5,ir=6,fr=function(t,n,e,r,i,f){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function f(u){var c,s,h,l;if(e.state!==Ke)return a();for(c in i)if((l=i[c]).name===e.name){if(l.state===nr)return Je(f);l.state===er?(l.state=ir,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[c]):+c<n&&(l.state=ir,l.timer.stop(),delete i[c])}if(Je(function(){e.state===nr&&(e.state=er,e.timer.restart(o,e.delay,e.time),o(u))}),e.state=tr,e.on.call("start",t,t.__data__,e.index,e.group),e.state===tr){for(e.state=nr,r=new Array(h=e.tween.length),c=0,s=-1;c<h;++c)(l=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=l);r.length=s+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=rr,1),f=-1,o=r.length;++f<o;)r[f].call(null,i);e.state===rr&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=ir,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Xe(function(t){e.state=Ke,e.timer.restart(f,e.delay,e.time),e.delay<=t&&f(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:We,tween:Qe,time:f.time,delay:f.delay,duration:f.duration,ease:f.ease,timer:null,state:Ge})};function or(t,n){var e=ur(t,n);if(e.state>Ge)throw new Error("too late; already scheduled");return e}function ar(t,n){var e=ur(t,n);if(e.state>tr)throw new Error("too late; already started");return e}function ur(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var cr=function(t,n){var e,r,i,f=t.__transition,o=!0;if(f){for(i in n=null==n?null:n+"",f)(e=f[i]).name===n?(r=e.state>tr&&e.state<rr,e.state=ir,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete f[i]):o=!1;o&&delete t.__transition}};function sr(t,n,e){var r=t._id;return t.each(function(){var t=ar(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ur(t,r).value[n]}}var hr=function(t,n){var e;return("number"==typeof n?ae:n instanceof sn?ee:(e=sn(n))?(n=e,ee):_e)(t,n)};var lr=qt.prototype.constructor;var dr=0;function pr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function _r(){return++dr}var br=qt.prototype;function vr(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}pr.prototype=function(t){return qt().transition(t)}.prototype={constructor:pr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Q(t));for(var r=this._groups,i=r.length,f=new Array(i),o=0;o<i;++o)for(var a,u,c=r[o],s=c.length,h=f[o]=new Array(s),l=0;l<s;++l)(a=c[l])&&(u=t.call(a,a.__data__,l,c))&&("__data__"in a&&(u.__data__=a.__data__),h[l]=u,fr(h[l],n,e,l,h,ur(a,e)));return new pr(f,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=K(t));for(var r=this._groups,i=r.length,f=[],o=[],a=0;a<i;++a)for(var u,c=r[a],s=c.length,h=0;h<s;++h)if(u=c[h]){for(var l,d=t.call(u,u.__data__,h,c),p=ur(u,e),_=0,b=d.length;_<b;++_)(l=d[_])&&fr(l,n,e,_,d,p);f.push(d),o.push(u)}return new pr(f,o,n,e)},filter:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var f,o=n[i],a=o.length,u=r[i]=[],c=0;c<a;++c)(f=o[c])&&t.call(f,f.__data__,c,o)&&u.push(f);return new pr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,f=Math.min(r,i),o=new Array(r),a=0;a<f;++a)for(var u,c=n[a],s=e[a],h=c.length,l=o[a]=new Array(h),d=0;d<h;++d)(u=c[d]||s[d])&&(l[d]=u);for(;a<r;++a)o[a]=n[a];return new pr(o,this._parents,this._name,this._id)},selection:function(){return new lr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=_r(),r=this._groups,i=r.length,f=0;f<i;++f)for(var o,a=r[f],u=a.length,c=0;c<u;++c)if(o=a[c]){var s=ur(o,n);fr(o,t,e,c,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new pr(r,this._parents,t,e)},call:br.call,nodes:br.nodes,node:br.node,size:br.size,empty:br.empty,each:br.each,on:function(t,n){var e=this._id;return arguments.length<2?ur(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,f=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?or:ar;return function(){var o=f(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(n,e),o.on=i}}(e,t,n))},attr:function(t,n){var e=Z(t),r="transform"===e?Me:hr;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,f;return function(){var o,a=e(this);if(null!=a)return(o=this.getAttributeNS(t.space,t.local))===a?null:o===r&&a===i?f:f=n(r=o,i=a);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,f;return function(){var o,a=e(this);if(null!=a)return(o=this.getAttribute(t))===a?null:o===r&&a===i?f:f=n(r=o,i=a);this.removeAttribute(t)}})(e,r,sr(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var f=this.getAttributeNS(t.space,t.local);return f===e?null:f===r?i:i=n(r=f,e)}}:function(t,n,e){var r,i;return function(){var f=this.getAttribute(t);return f===e?null:f===r?i:i=n(r=f,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Z(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?we:hr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var f=ht(this,t),o=(this.style.removeProperty(t),ht(this,t));return f===o?null:f===e&&o===r?i:i=n(e=f,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,f;return function(){var o=ht(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=ht(this,t)),o===a?null:o===r&&a===i?f:f=n(r=o,i=a)}}(t,r,sr(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var f=ht(this,t);return f===e?null:f===r?i:i=n(r=f,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(sr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ur(this.node(),e).tween,f=0,o=i.length;f<o;++f)if((r=i[f]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=ar(this,t),f=i.tween;if(f!==e)for(var o=0,a=(r=e=f).length;o<a;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var f=ar(this,t),o=f.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},u=0,c=i.length;u<c;++u)if(i[u].name===n){i[u]=a;break}u===c&&i.push(a)}f.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){or(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){or(this,t).delay=n}})(n,t)):ur(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ar(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ar(this,t).duration=n}})(n,t)):ur(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){ar(this,t).ease=n}}(n,t)):ur(this.node(),n).ease}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var yr=2*Math.PI,gr=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=yr);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*yr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=yr);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*yr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=yr);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*yr)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:vr});function xr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return gr.time=Ie(),gr;return e}qt.prototype.interrupt=function(t){return this.each(function(){cr(this,t)})},qt.prototype.transition=function(t){var n,e;t instanceof pr?(n=t._id,t=t._name):(n=_r(),(e=gr).time=Ie(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,f=0;f<i;++f)for(var o,a=r[f],u=a.length,c=0;c<u;++c)(o=a[c])&&fr(o,t,n,c,a,e||xr(o,n));return new pr(r,this._parents,t,n)};["e","w"].map(mr),["n","s"].map(mr),["n","e","s","w","nw","ne","se","sw"].map(mr);function mr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var wr=Math.PI,Mr=2*wr,Tr=Mr-1e-6;function Nr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ar(){return new Nr}Nr.prototype=Ar.prototype={constructor:Nr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,f){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+f)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var f=this._x1,o=this._y1,a=e-t,u=r-n,c=f-t,s=o-n,h=c*c+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(s*a-u*c)>1e-6&&i){var l=e-f,d=r-o,p=a*a+u*u,_=l*l+d*d,b=Math.sqrt(p),v=Math.sqrt(h),y=i*Math.tan((wr-Math.acos((p+h-_)/(2*b*v)))/2),g=y/v,x=y/b;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*c)+","+(n+g*s)),this._+="A"+i+","+i+",0,0,"+ +(s*l>c*d)+","+(this._x1=t+x*a)+","+(this._y1=n+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,f){t=+t,n=+n;var o=(e=+e)*Math.cos(r),a=e*Math.sin(r),u=t+o,c=n+a,s=1^f,h=f?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+c:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+u+","+c),e&&(h<0&&(h=h%Mr+Mr),h>Tr?this._+="A"+e+","+e+",0,1,"+s+","+(t-o)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=u)+","+(this._y1=c):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=wr)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Sr=Ar;function kr(){}function Er(t,n){var e=new kr;if(t instanceof kr)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,f=t.length;if(null==n)for(;++i<f;)e.set(i,t[i]);else for(;++i<f;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}kr.prototype=Er.prototype={constructor:kr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Cr=Er,Ur=function(){var t,n,e,r=[],i=[];function f(e,i,o,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,c,s,h=-1,l=e.length,d=r[i++],p=Cr(),_=o();++h<l;)(s=p.get(u=d(c=e[h])+""))?s.push(c):p.set(u,[c]);return p.each(function(t,n){a(_,n,f(t,i,o,a))}),_}return e={object:function(t){return f(t,0,Lr,Pr)},map:function(t){return f(t,0,Rr,Dr)},entries:function(t){return function t(e,f){if(++f>r.length)return e;var o,a=i[f-1];return null!=n&&f>=r.length?o=e.entries():(o=[],e.each(function(n,e){o.push({key:e,values:t(n,f)})})),null!=a?o.sort(function(t,n){return a(t.key,n.key)}):o}(f(t,0,Rr,Dr),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function Lr(){return{}}function Pr(t,n,e){t[n]=e}function Rr(){return Cr()}function Dr(t,n,e){t.set(n,e)}function qr(){}var Fr=Cr.prototype;function Yr(t,n){var e=new qr;if(t instanceof qr)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}qr.prototype=Yr.prototype={constructor:qr,has:Fr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Fr.remove,clear:Fr.clear,values:Fr.keys,size:Fr.size,empty:Fr.empty,each:Fr.each};var jr=Array.prototype.slice,Or=function(t,n){return t-n},zr=function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r},Ir=function(t){return function(){return t}},Hr=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=$r(t,n[r]))return e;return 0};function $r(t,n){for(var e=n[0],r=n[1],i=-1,f=0,o=t.length,a=o-1;f<o;a=f++){var u=t[f],c=u[0],s=u[1],h=t[a],l=h[0],d=h[1];if(Xr(u,h,n))return 0;s>r!=d>r&&e<(l-c)*(r-s)/(d-s)+c&&(i=-i)}return i}function Xr(t,n,e){var r;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&function(t,n,e){return t<=n&&n<=e||e<=n&&n<=t}(t[r=+(t[0]===n[0])],e[r],n[r])}var Br=function(){},Vr=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],Zr=function(){var t=1,n=1,e=x,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Or);else{var r=h(t),i=r[0],o=r[1];n=g(i,o,n),n=d(Math.floor(i/n)*n,Math.floor(o/n)*n,n)}return n.map(function(n){return f(t,n)})}function f(e,i){var f=[],a=[];return function(e,r,i){var f,a,u,c,s,h,l=new Array,d=new Array;f=a=-1,c=e[0]>=r,Vr[c<<1].forEach(p);for(;++f<t-1;)u=c,c=e[f+1]>=r,Vr[u|c<<1].forEach(p);Vr[c<<0].forEach(p);for(;++a<n-1;){for(f=-1,c=e[a*t+t]>=r,s=e[a*t]>=r,Vr[c<<1|s<<2].forEach(p);++f<t-1;)u=c,c=e[a*t+t+f+1]>=r,h=s,s=e[a*t+f+1]>=r,Vr[u|c<<1|s<<2|h<<3].forEach(p);Vr[c|s<<3].forEach(p)}f=-1,s=e[a*t]>=r,Vr[s<<2].forEach(p);for(;++f<t-1;)h=s,s=e[a*t+f+1]>=r,Vr[s<<2|h<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+f,t[0][1]+a],u=[t[1][0]+f,t[1][1]+a],c=o(r),s=o(u);(n=d[c])?(e=l[s])?(delete d[n.end],delete l[e.start],n===e?(n.ring.push(u),i(n.ring)):l[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(u),d[n.end=s]=n):(n=l[s])?(e=d[c])?(delete l[n.start],delete d[e.end],n===e?(n.ring.push(u),i(n.ring)):l[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete l[n.start],n.ring.unshift(r),l[n.start=c]=n):l[c]=d[s]={start:c,end:s,ring:[r,u]}}Vr[s<<3].forEach(p)}(e,i,function(t){r(t,e,i),zr(t)>0?f.push([t]):a.push(t)}),a.forEach(function(t){for(var n,e=0,r=f.length;e<r;++e)if(-1!==Hr((n=f[e])[0],t))return void n.push(t)}),{type:"MultiPolygon",value:i,coordinates:f}}function o(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach(function(e){var f,o=e[0],a=e[1],u=0|o,c=0|a,s=r[c*t+u];o>0&&o<t&&u===o&&(f=r[c*t+u-1],e[0]=o+(i-f)/(s-f)-.5),a>0&&a<n&&c===a&&(f=r[(c-1)*t+u],e[1]=a+(i-f)/(s-f)-.5)})}return i.contour=f,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),f=Math.ceil(e[1]);if(!(r>0&&f>0))throw new Error("invalid size");return t=r,n=f,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?Ir(jr.call(t)):Ir(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:Br,i):r===a},i};var Jr={},Wr={},Qr=34,Gr=10,Kr=13;function ti(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var ni=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],f=t.length,o=0,a=0,u=f<=0,c=!1;function s(){if(u)return Wr;if(c)return c=!1,Jr;var n,r,i=o;if(t.charCodeAt(i)===Qr){for(;o++<f&&t.charCodeAt(o)!==Qr||t.charCodeAt(++o)===Qr;);return(n=o)>=f?u=!0:(r=t.charCodeAt(o++))===Gr?c=!0:r===Kr&&(c=!0,t.charCodeAt(o)===Gr&&++o),t.slice(i+1,n-1).replace(/""/g,'"')}for(;o<f;){if((r=t.charCodeAt(n=o++))===Gr)c=!0;else if(r===Kr)c=!0,t.charCodeAt(o)===Gr&&++o;else if(r!==e)continue;return t.slice(i,n)}return u=!0,t.slice(i,f)}for(t.charCodeAt(f-1)===Gr&&--f,t.charCodeAt(f-1)===Kr&&--f;(r=s())!==Wr;){for(var h=[];r!==Jr&&r!==Wr;)h.push(r),r=s();n&&null==(h=n(h,a++))||i.push(h)}return i}function i(n){return n.map(f).join(t)}function f(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,f=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=ti(t);return function(r,i){return n(e(r),i,t)}}(t,n):ti(t)});return f.columns=i||[],f},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(f).join(t)].concat(n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},ei=ni(","),ri=ei.parse,ii=(ei.parseRows,ei.format,ei.formatRows,ni("\t")),fi=ii.parse;ii.parseRows,ii.format,ii.formatRows;function oi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var ai=function(t,n){return fetch(t,n).then(oi)};function ui(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ai(n,e).then(function(n){return t(n,r)})}}var ci=ui(ri);ui(fi);function si(t){return function(n,e){return ai(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}si("application/xml"),si("text/html"),si("image/svg+xml");function hi(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,f,o,a,u,c,s,h,l,d=t._root,p={data:r},_=t._x0,b=t._y0,v=t._x1,y=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=n>=(f=(_+v)/2))?_=f:v=f,(s=e>=(o=(b+y)/2))?b=o:y=o,i=d,!(d=d[h=s<<1|c]))return i[h]=p,t;if(a=+t._x.call(null,d.data),u=+t._y.call(null,d.data),n===a&&e===u)return p.next=d,i?i[h]=p:t._root=p,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(c=n>=(f=(_+v)/2))?_=f:v=f,(s=e>=(o=(b+y)/2))?b=o:y=o}while((h=s<<1|c)==(l=(u>=o)<<1|a>=f));return i[l]=d,i[h]=p,t}var li=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function di(t){return t[0]}function pi(t){return t[1]}function _i(t,n,e){var r=new bi(null==n?di:n,null==e?pi:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function bi(t,n,e,r,i,f){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=f,this._root=void 0}function vi(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var yi=_i.prototype=bi.prototype;yi.copy=function(){var t,n,e=new bi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=vi(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=vi(n));return e},yi.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return hi(this.cover(n,e),n,e,t)},yi.addAll=function(t){var n,e,r,i,f=t.length,o=new Array(f),a=new Array(f),u=1/0,c=1/0,s=-1/0,h=-1/0;for(e=0;e<f;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,a[e]=i,r<u&&(u=r),r>s&&(s=r),i<c&&(c=i),i>h&&(h=i));for(s<u&&(u=this._x0,s=this._x1),h<c&&(c=this._y0,h=this._y1),this.cover(u,c).cover(s,h),e=0;e<f;++e)hi(this,o[e],a[e],t[e]);return this},yi.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,f=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,f=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>f))return this;var o,a,u=i-e,c=this._root;switch(a=(n<(r+f)/2)<<1|t<(e+i)/2){case 0:do{(o=new Array(4))[a]=c,c=o}while(f=r+(u*=2),t>(i=e+u)||n>f);break;case 1:do{(o=new Array(4))[a]=c,c=o}while(f=r+(u*=2),(e=i-u)>t||n>f);break;case 2:do{(o=new Array(4))[a]=c,c=o}while(r=f-(u*=2),t>(i=e+u)||r>n);break;case 3:do{(o=new Array(4))[a]=c,c=o}while(r=f-(u*=2),(e=i-u)>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=f,this},yi.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},yi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},yi.find=function(t,n,e){var r,i,f,o,a,u,c,s=this._x0,h=this._y0,l=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new li(_,s,h,l,d)),null==e?e=1/0:(s=t-e,h=n-e,l=t+e,d=n+e,e*=e);u=p.pop();)if(!(!(_=u.node)||(i=u.x0)>l||(f=u.y0)>d||(o=u.x1)<s||(a=u.y1)<h))if(_.length){var b=(i+o)/2,v=(f+a)/2;p.push(new li(_[3],b,v,o,a),new li(_[2],i,v,b,a),new li(_[1],b,f,o,v),new li(_[0],i,f,b,v)),(c=(n>=v)<<1|t>=b)&&(u=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=u)}else{var y=t-+this._x.call(null,_.data),g=n-+this._y.call(null,_.data),x=y*y+g*g;if(x<e){var m=Math.sqrt(e=x);s=t-m,h=n-m,l=t+m,d=n+m,r=_.data}}return r},yi.remove=function(t){if(isNaN(f=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,f,o,a,u,c,s,h,l,d=this._root,p=this._x0,_=this._y0,b=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((c=f>=(a=(p+b)/2))?p=a:b=a,(s=o>=(u=(_+v)/2))?_=u:v=u,n=d,!(d=d[h=s<<1|c]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=i,this)},yi.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},yi.root=function(){return this._root},yi.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},yi.visit=function(t){var n,e,r,i,f,o,a=[],u=this._root;for(u&&a.push(new li(u,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(u=n.node,r=n.x0,i=n.y0,f=n.x1,o=n.y1)&&u.length){var c=(r+f)/2,s=(i+o)/2;(e=u[3])&&a.push(new li(e,c,s,f,o)),(e=u[2])&&a.push(new li(e,r,s,c,o)),(e=u[1])&&a.push(new li(e,c,i,f,s)),(e=u[0])&&a.push(new li(e,r,i,c,s))}return this},yi.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new li(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var f,o=n.x0,a=n.y0,u=n.x1,c=n.y1,s=(o+u)/2,h=(a+c)/2;(f=i[0])&&e.push(new li(f,o,a,s,h)),(f=i[1])&&e.push(new li(f,s,a,u,h)),(f=i[2])&&e.push(new li(f,o,h,s,c)),(f=i[3])&&e.push(new li(f,s,h,u,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},yi.x=function(t){return arguments.length?(this._x=t,this):this._x},yi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var gi=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},xi=function(t){return(t=gi(Math.abs(t)))?t[1]:NaN},mi=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function wi(t){return new Mi(t)}function Mi(t){if(!(n=mi.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}wi.prototype=Mi.prototype,Mi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ti,Ni,Ai,Si,ki=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Ei=function(t,n){var e=gi(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Ci={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ei(100*t,n)},r:Ei,s:function(t,n){var e=gi(t,n);if(!e)return t+"";var r=e[0],i=e[1],f=i-(Ti=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return f===o?r:f>o?r+new Array(f-o+1).join("0"):f>0?r.slice(0,f)+"."+r.slice(f):"0."+new Array(1-f).join("0")+gi(t,Math.max(0,n+f-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ui=function(t){return t},Li=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Pi=function(t){var n=t.grouping&&t.thousands?function(t,n){return function(e,r){for(var i=e.length,f=[],o=0,a=t[0],u=0;i>0&&a>0&&(u+a+1>r&&(a=Math.max(1,r-u)),f.push(e.substring(i-=a,i+a)),!((u+=a+1)>r));)a=t[o=(o+1)%t.length];return f.reverse().join(n)}}(t.grouping,t.thousands):Ui,e=t.currency,r=t.decimal,i=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Ui,f=t.percent||"%";function o(t){var o=(t=wi(t)).fill,a=t.align,u=t.sign,c=t.symbol,s=t.zero,h=t.width,l=t.comma,d=t.precision,p=t.trim,_=t.type;"n"===_?(l=!0,_="g"):Ci[_]||(null==d&&(d=12),p=!0,_="g"),(s||"0"===o&&"="===a)&&(s=!0,o="0",a="=");var b="$"===c?e[0]:"#"===c&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",v="$"===c?e[1]:/[%p]/.test(_)?f:"",y=Ci[_],g=/[defgprs%]/.test(_);function x(t){var e,f,c,x=b,m=v;if("c"===_)m=y(t)+m,t="";else{var w=(t=+t)<0;if(t=y(Math.abs(t),d),p&&(t=ki(t)),w&&0==+t&&(w=!1),x=(w?"("===u?u:"-":"-"===u||"("===u?"":u)+x,m=("s"===_?Li[8+Ti/3]:"")+m+(w&&"("===u?")":""),g)for(e=-1,f=t.length;++e<f;)if(48>(c=t.charCodeAt(e))||c>57){m=(46===c?r+t.slice(e+1):t.slice(e))+m,t=t.slice(0,e);break}}l&&!s&&(t=n(t,1/0));var M=x.length+t.length+m.length,T=M<h?new Array(h-M+1).join(o):"";switch(l&&s&&(t=n(T+t,T.length?h-m.length:1/0),T=""),a){case"<":t=x+t+m+T;break;case"=":t=x+T+t+m;break;case"^":t=T.slice(0,M=T.length>>1)+x+t+m+T.slice(M);break;default:t=T+x+t+m}return i(t)}return d=null==d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:o,formatPrefix:function(t,n){var e=o(((t=wi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(xi(n)/3))),i=Math.pow(10,-r),f=Li[8+r/3];return function(t){return e(i*t)+f}}}};!function(t){Ni=Pi(t),Ai=Ni.format,Si=Ni.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Ri=function(t){return Math.max(0,-xi(Math.abs(t)))},Di=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(xi(n)/3)))-xi(Math.abs(t)))},qi=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,xi(n)-xi(t))+1},Fi=function(){return new Yi};function Yi(){this.reset()}Yi.prototype={constructor:Yi,reset:function(){this.s=this.t=0},add:function(t){Oi(ji,t,this.t),Oi(this,ji.s,this.s),this.s?this.t+=ji.t:this.s=ji.t},valueOf:function(){return this.s}};var ji=new Yi;function Oi(t,n,e){var r=t.s=n+e,i=r-n,f=r-i;t.t=n-f+(e-i)}var zi=1e-6,Ii=Math.PI,Hi=Ii/2,$i=Ii/4,Xi=2*Ii,Bi=180/Ii,Vi=Ii/180,Zi=Math.abs,Ji=Math.atan,Wi=Math.atan2,Qi=Math.cos,Gi=(Math.ceil,Math.exp),Ki=(Math.floor,Math.log),tf=(Math.pow,Math.sin),nf=Math.sign||function(t){return t>0?1:t<0?-1:0},ef=Math.sqrt,rf=Math.tan;function ff(t){return t>1?0:t<-1?Ii:Math.acos(t)}function of(t){return t>1?Hi:t<-1?-Hi:Math.asin(t)}function af(){}function uf(t,n){t&&sf.hasOwnProperty(t.type)&&sf[t.type](t,n)}var cf={Feature:function(t,n){uf(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)uf(e[r].geometry,n)}},sf={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){hf(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)hf(e[r],n,0)},Polygon:function(t,n){lf(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)lf(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)uf(e[r],n)}};function hf(t,n,e){var r,i=-1,f=t.length-e;for(n.lineStart();++i<f;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function lf(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)hf(t[e],n,1);n.polygonEnd()}var df=function(t,n){t&&cf.hasOwnProperty(t.type)?cf[t.type](t,n):uf(t,n)};Fi(),Fi();function pf(t){return[Wi(t[1],t[0]),of(t[2])]}function _f(t){var n=t[0],e=t[1],r=Qi(e);return[r*Qi(n),r*tf(n),tf(e)]}function bf(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function vf(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function yf(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function gf(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function xf(t){var n=ef(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Fi();var mf=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function wf(t,n){return[t>Ii?t-Xi:t<-Ii?t+Xi:t,n]}function Mf(t,n,e){return(t%=Xi)?n||e?mf(Nf(t),Af(n,e)):Nf(t):n||e?Af(n,e):wf}function Tf(t){return function(n,e){return[(n+=t)>Ii?n-Xi:n<-Ii?n+Xi:n,e]}}function Nf(t){var n=Tf(t);return n.invert=Tf(-t),n}function Af(t,n){var e=Qi(t),r=tf(t),i=Qi(n),f=tf(n);function o(t,n){var o=Qi(n),a=Qi(t)*o,u=tf(t)*o,c=tf(n),s=c*e+a*r;return[Wi(u*i-s*f,a*e-c*r),of(s*i+u*f)]}return o.invert=function(t,n){var o=Qi(n),a=Qi(t)*o,u=tf(t)*o,c=tf(n),s=c*i-u*f;return[Wi(u*i+c*f,a*e+s*r),of(s*e-a*r)]},o}wf.invert=wf;var Sf=function(t){function n(n){return(n=t(n[0]*Vi,n[1]*Vi))[0]*=Bi,n[1]*=Bi,n}return t=Mf(t[0]*Vi,t[1]*Vi,t.length>2?t[2]*Vi:0),n.invert=function(n){return(n=t.invert(n[0]*Vi,n[1]*Vi))[0]*=Bi,n[1]*=Bi,n},n};function kf(t,n,e,r,i,f){if(e){var o=Qi(n),a=tf(n),u=r*e;null==i?(i=n+r*Xi,f=n-u/2):(i=Ef(o,i),f=Ef(o,f),(r>0?i<f:i>f)&&(i+=r*Xi));for(var c,s=i;r>0?s>f:s<f;s-=u)c=pf([o,-a*Qi(s),-a*tf(s)]),t.point(c[0],c[1])}}function Ef(t,n){(n=_f(n))[0]-=t,xf(n);var e=ff(-n[1]);return((-n[2]<0?-e:e)+Xi-zi)%Xi}var Cf=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:af,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Uf=function(t,n){return Zi(t[0]-n[0])<zi&&Zi(t[1]-n[1])<zi};function Lf(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Pf=function(t,n,e,r,i){var f,o,a=[],u=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],o=t[n];if(Uf(r,o)){for(i.lineStart(),f=0;f<n;++f)i.point((r=t[f])[0],r[1]);i.lineEnd()}else a.push(e=new Lf(r,t,null,!0)),u.push(e.o=new Lf(r,null,e,!1)),a.push(e=new Lf(o,t,null,!1)),u.push(e.o=new Lf(o,null,e,!0))}}),a.length){for(u.sort(n),Rf(a),Rf(u),f=0,o=u.length;f<o;++f)u[f].e=e=!e;for(var c,s,h=a[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;c=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(f=0,o=c.length;f<o;++f)i.point((s=c[f])[0],s[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(d)for(c=l.p.z,f=c.length-1;f>=0;--f)i.point((s=c[f])[0],s[1]);else r(l.x,l.p.x,-1,i);l=l.p}c=(l=l.o).z,d=!d}while(!l.v);i.lineEnd()}}};function Rf(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var Df=Fi(),qf=function(t,n){var e=n[0],r=n[1],i=tf(r),f=[tf(e),-Qi(e),0],o=0,a=0;Df.reset(),1===i?r=Hi+zi:-1===i&&(r=-Hi-zi);for(var u=0,c=t.length;u<c;++u)if(h=(s=t[u]).length)for(var s,h,l=s[h-1],d=l[0],p=l[1]/2+$i,_=tf(p),b=Qi(p),v=0;v<h;++v,d=g,_=m,b=w,l=y){var y=s[v],g=y[0],x=y[1]/2+$i,m=tf(x),w=Qi(x),M=g-d,T=M>=0?1:-1,N=T*M,A=N>Ii,S=_*m;if(Df.add(Wi(S*T*tf(N),b*w+S*Qi(N))),o+=A?M+T*Xi:M,A^d>=e^g>=e){var k=vf(_f(l),_f(y));xf(k);var E=vf(f,k);xf(E);var C=(A^M>=0?-1:1)*of(E[2]);(r>C||r===C&&(k[0]||k[1]))&&(a+=A^M>=0?1:-1)}}return(o<-zi||o<zi&&Df<-zi)^1&a},Ff=function(t,n,e,r){return function(i){var f,o,a,u=n(i),c=Cf(),s=n(c),h=!1,l={point:d,lineStart:_,lineEnd:b,polygonStart:function(){l.point=v,l.lineStart=y,l.lineEnd=g,o=[],f=[]},polygonEnd:function(){l.point=d,l.lineStart=_,l.lineEnd=b,o=M(o);var t=qf(f,r);o.length?(h||(i.polygonStart(),h=!0),Pf(o,jf,t,e,i)):t&&(h||(i.polygonStart(),h=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),o=f=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){u.point(t,n)}function _(){l.point=p,u.lineStart()}function b(){l.point=d,u.lineEnd()}function v(t,n){a.push([t,n]),s.point(t,n)}function y(){s.lineStart(),a=[]}function g(){v(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,u=s.clean(),l=c.result(),d=l.length;if(a.pop(),f.push(a),a=null,d)if(1&u){if((n=(e=l[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&u&&l.push(l.pop().concat(l.shift())),o.push(l.filter(Yf))}return l}};function Yf(t){return t.length>1}function jf(t,n){return((t=t.x)[0]<0?t[1]-Hi-zi:Hi-t[1])-((n=n.x)[0]<0?n[1]-Hi-zi:Hi-n[1])}var Of=Ff(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(f,o){var a=f>0?Ii:-Ii,u=Zi(f-e);Zi(u-Ii)<zi?(t.point(e,r=(r+o)/2>0?Hi:-Hi),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(f,r),n=0):i!==a&&u>=Ii&&(Zi(e-i)<zi&&(e-=i*zi),Zi(f-a)<zi&&(f-=a*zi),r=function(t,n,e,r){var i,f,o=tf(t-e);return Zi(o)>zi?Ji((tf(n)*(f=Qi(r))*tf(e)-tf(r)*(i=Qi(n))*tf(t))/(i*f*o)):(n+r)/2}(e,r,f,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=f,r=o),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*Hi,r.point(-Ii,i),r.point(0,i),r.point(Ii,i),r.point(Ii,0),r.point(Ii,-i),r.point(0,-i),r.point(-Ii,-i),r.point(-Ii,0),r.point(-Ii,i);else if(Zi(t[0]-n[0])>zi){var f=t[0]<n[0]?Ii:-Ii;i=e*f/2,r.point(-f,i),r.point(0,i),r.point(f,i)}else r.point(n[0],n[1])},[-Ii,-Hi]);var zf=function(t){var n=Qi(t),e=6*Vi,r=n>0,i=Zi(n)>zi;function f(t,e){return Qi(t)*Qi(e)>n}function o(t,e,r){var i=[1,0,0],f=vf(_f(t),_f(e)),o=bf(f,f),a=f[0],u=o-a*a;if(!u)return!r&&t;var c=n*o/u,s=-n*a/u,h=vf(i,f),l=gf(i,c);yf(l,gf(f,s));var d=h,p=bf(l,d),_=bf(d,d),b=p*p-_*(bf(l,l)-1);if(!(b<0)){var v=ef(b),y=gf(d,(-p-v)/_);if(yf(y,l),y=pf(y),!r)return y;var g,x=t[0],m=e[0],w=t[1],M=e[1];m<x&&(g=x,x=m,m=g);var T=m-x,N=Zi(T-Ii)<zi;if(!N&&M<w&&(g=w,w=M,M=g),N||T<zi?N?w+M>0^y[1]<(Zi(y[0]-x)<zi?w:M):w<=y[1]&&y[1]<=M:T>Ii^(x<=y[0]&&y[0]<=m)){var A=gf(d,(-p+v)/_);return yf(A,l),[y,pf(A)]}}}function a(n,e){var i=r?t:Ii-t,f=0;return n<-i?f|=1:n>i&&(f|=2),e<-i?f|=4:e>i&&(f|=8),f}return Ff(f,function(t){var n,e,u,c,s;return{lineStart:function(){c=u=!1,s=1},point:function(h,l){var d,p=[h,l],_=f(h,l),b=r?_?0:a(h,l):_?a(h+(h<0?Ii:-Ii),l):0;if(!n&&(c=u=_)&&t.lineStart(),_!==u&&(!(d=o(n,p))||Uf(n,d)||Uf(p,d))&&(p[0]+=zi,p[1]+=zi,_=f(p[0],p[1])),_!==u)s=0,_?(t.lineStart(),d=o(p,n),t.point(d[0],d[1])):(d=o(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^_){var v;b&e||!(v=o(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!_||n&&Uf(n,p)||t.point(p[0],p[1]),n=p,u=_,e=b},lineEnd:function(){u&&t.lineEnd(),n=null},clean:function(){return s|(c&&u)<<1}}},function(n,r,i,f){kf(f,t,e,i,n,r)},r?[0,-t]:[-Ii,t-Ii])},If=function(t,n,e,r,i,f){var o,a=t[0],u=t[1],c=0,s=1,h=n[0]-a,l=n[1]-u;if(o=e-a,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<s&&(s=o)}else if(h>0){if(o>s)return;o>c&&(c=o)}if(o=i-a,h||!(o<0)){if(o/=h,h<0){if(o>s)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<s&&(s=o)}if(o=r-u,l||!(o>0)){if(o/=l,l<0){if(o<c)return;o<s&&(s=o)}else if(l>0){if(o>s)return;o>c&&(c=o)}if(o=f-u,l||!(o<0)){if(o/=l,l<0){if(o>s)return;o>c&&(c=o)}else if(l>0){if(o<c)return;o<s&&(s=o)}return c>0&&(t[0]=a+c*h,t[1]=u+c*l),s<1&&(n[0]=a+s*h,n[1]=u+s*l),!0}}}}},Hf=1e9,$f=-Hf;function Xf(t,n,e,r){function i(i,f){return t<=i&&i<=e&&n<=f&&f<=r}function f(i,f,a,c){var s=0,h=0;if(null==i||(s=o(i,a))!==(h=o(f,a))||u(i,f)<0^a>0)do{c.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==h);else c.point(f[0],f[1])}function o(r,i){return Zi(r[0]-t)<zi?i>0?0:3:Zi(r[0]-e)<zi?i>0?2:1:Zi(r[1]-n)<zi?i>0?1:0:i>0?3:2}function a(t,n){return u(t.x,n.x)}function u(t,n){var e=o(t,1),r=o(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(o){var u,c,s,h,l,d,p,_,b,v,y,g=o,x=Cf(),m={point:w,lineStart:function(){m.point=T,c&&c.push(s=[]);v=!0,b=!1,p=_=NaN},lineEnd:function(){u&&(T(h,l),d&&b&&x.rejoin(),u.push(x.result()));m.point=w,b&&g.lineEnd()},polygonStart:function(){g=x,u=[],c=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=c.length;e<i;++e)for(var f,o,a=c[e],u=1,s=a.length,h=a[0],l=h[0],d=h[1];u<s;++u)f=l,o=d,h=a[u],l=h[0],d=h[1],o<=r?d>r&&(l-f)*(r-o)>(d-o)*(t-f)&&++n:d<=r&&(l-f)*(r-o)<(d-o)*(t-f)&&--n;return n}(),e=y&&n,i=(u=M(u)).length;(e||i)&&(o.polygonStart(),e&&(o.lineStart(),f(null,null,1,o),o.lineEnd()),i&&Pf(u,a,n,f,o),o.polygonEnd());g=o,u=c=s=null}};function w(t,n){i(t,n)&&g.point(t,n)}function T(f,o){var a=i(f,o);if(c&&s.push([f,o]),v)h=f,l=o,d=a,v=!1,a&&(g.lineStart(),g.point(f,o));else if(a&&b)g.point(f,o);else{var u=[p=Math.max($f,Math.min(Hf,p)),_=Math.max($f,Math.min(Hf,_))],x=[f=Math.max($f,Math.min(Hf,f)),o=Math.max($f,Math.min(Hf,o))];If(u,x,t,n,e,r)?(b||(g.lineStart(),g.point(u[0],u[1])),g.point(x[0],x[1]),a||g.lineEnd(),y=!1):a&&(g.lineStart(),g.point(f,o),y=!1)}p=f,_=o,b=a}return m}}var Bf,Vf,Zf,Jf=Fi(),Wf={sphere:af,point:af,lineStart:function(){Wf.point=Gf,Wf.lineEnd=Qf},lineEnd:af,polygonStart:af,polygonEnd:af};function Qf(){Wf.point=Wf.lineEnd=af}function Gf(t,n){Bf=t*=Vi,Vf=tf(n*=Vi),Zf=Qi(n),Wf.point=Kf}function Kf(t,n){t*=Vi;var e=tf(n*=Vi),r=Qi(n),i=Zi(t-Bf),f=Qi(i),o=r*tf(i),a=Zf*e-Vf*r*f,u=Vf*e+Zf*r*f;Jf.add(Wi(ef(o*o+a*a),u)),Bf=t,Vf=e,Zf=r}var to=function(t){return Jf.reset(),df(t,Wf),+Jf},no=[null,null],eo={type:"LineString",coordinates:no},ro=function(t,n){return no[0]=t,no[1]=n,to(eo)};var io=function(t){return t};Fi(),Fi();var fo=1/0,oo=fo,ao=-fo,uo=ao;var co={point:function(t,n){t<fo&&(fo=t);t>ao&&(ao=t);n<oo&&(oo=n);n>uo&&(uo=n)},lineStart:af,lineEnd:af,polygonStart:af,polygonEnd:af,result:function(){var t=[[fo,oo],[ao,uo]];return ao=uo=-(oo=fo=1/0),t}};function so(t){this._context=t}so.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Xi)}},result:af};Fi();function ho(){this._string=[]}function lo(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}ho.prototype={_radius:4.5,_circle:lo(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=lo(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function po(t){return function(n){var e=new _o;for(var r in t)e[r]=t[r];return e.stream=n,e}}function _o(){}function bo(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),df(e,t.stream(co)),n(co.result()),null!=r&&t.clipExtent(r),t}function vo(t,n,e){return bo(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],f=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),o=+n[0][0]+(r-f*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-f*(e[1][1]+e[0][1]))/2;t.scale(150*f).translate([o,a])},e)}function yo(t,n,e){return vo(t,[[0,0],n],e)}function go(t,n,e){return bo(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),f=(r-i*(e[1][0]+e[0][0]))/2,o=-i*e[0][1];t.scale(150*i).translate([f,o])},e)}function xo(t,n,e){return bo(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),f=-i*e[0][0],o=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([f,o])},e)}_o.prototype={constructor:_o,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var mo=16,wo=Qi(30*Vi),Mo=function(t,n){return+n?function(t,n){function e(r,i,f,o,a,u,c,s,h,l,d,p,_,b){var v=c-r,y=s-i,g=v*v+y*y;if(g>4*n&&_--){var x=o+l,m=a+d,w=u+p,M=ef(x*x+m*m+w*w),T=of(w/=M),N=Zi(Zi(w)-1)<zi||Zi(f-h)<zi?(f+h)/2:Wi(m,x),A=t(N,T),S=A[0],k=A[1],E=S-r,C=k-i,U=y*E-v*C;(U*U/g>n||Zi((v*E+y*C)/g-.5)>.3||o*l+a*d+u*p<wo)&&(e(r,i,f,o,a,u,S,k,N,x/=M,m/=M,w,_,b),b.point(S,k),e(S,k,N,x,m,w,c,s,h,l,d,p,_,b))}}return function(n){var r,i,f,o,a,u,c,s,h,l,d,p,_={point:b,lineStart:v,lineEnd:g,polygonStart:function(){n.polygonStart(),_.lineStart=x},polygonEnd:function(){n.polygonEnd(),_.lineStart=v}};function b(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,_.point=y,n.lineStart()}function y(r,i){var f=_f([r,i]),o=t(r,i);e(s,h,c,l,d,p,s=o[0],h=o[1],c=r,l=f[0],d=f[1],p=f[2],mo,n),n.point(s,h)}function g(){_.point=b,n.lineEnd()}function x(){v(),_.point=m,_.lineEnd=w}function m(t,n){y(r=t,n),i=s,f=h,o=l,a=d,u=p,_.point=y}function w(){e(s,h,c,l,d,p,i,f,r,o,a,u,mo,n),_.lineEnd=g,g()}return _}}(t,n):function(t){return po({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var To=po({point:function(t,n){this.stream.point(t*Vi,n*Vi)}});function No(t,n,e,r){var i=Qi(r),f=tf(r),o=i*t,a=f*t,u=i/t,c=f/t,s=(f*e-i*n)/t,h=(f*n+i*e)/t;function l(t,r){return[o*t-a*r+n,e-a*t-o*r]}return l.invert=function(t,n){return[u*t-c*n+s,h-c*t-u*n]},l}function Ao(t){return So(function(){return t})()}function So(t){var n,e,r,i,f,o,a,u,c,s,h=150,l=480,d=250,p=0,_=0,b=0,v=0,y=0,g=0,x=null,m=Of,w=null,M=io,T=.5;function N(t){return u(t[0]*Vi,t[1]*Vi)}function A(t){return(t=u.invert(t[0],t[1]))&&[t[0]*Bi,t[1]*Bi]}function S(){var t=No(h,0,0,g).apply(null,n(p,_)),r=(g?No:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(h,l-t[0],d-t[1],g);return e=Mf(b,v,y),a=mf(n,r),u=mf(e,a),o=Mo(a,T),k()}function k(){return c=s=null,N}return N.stream=function(t){return c&&s===t?c:c=To(function(t){return po({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(m(o(M(s=t)))))},N.preclip=function(t){return arguments.length?(m=t,x=void 0,k()):m},N.postclip=function(t){return arguments.length?(M=t,w=r=i=f=null,k()):M},N.clipAngle=function(t){return arguments.length?(m=+t?zf(x=t*Vi):(x=null,Of),k()):x*Bi},N.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=f=null,io):Xf(w=+t[0][0],r=+t[0][1],i=+t[1][0],f=+t[1][1]),k()):null==w?null:[[w,r],[i,f]]},N.scale=function(t){return arguments.length?(h=+t,S()):h},N.translate=function(t){return arguments.length?(l=+t[0],d=+t[1],S()):[l,d]},N.center=function(t){return arguments.length?(p=t[0]%360*Vi,_=t[1]%360*Vi,S()):[p*Bi,_*Bi]},N.rotate=function(t){return arguments.length?(b=t[0]%360*Vi,v=t[1]%360*Vi,y=t.length>2?t[2]%360*Vi:0,S()):[b*Bi,v*Bi,y*Bi]},N.angle=function(t){return arguments.length?(g=t%360*Vi,S()):g*Bi},N.precision=function(t){return arguments.length?(o=Mo(a,T=t*t),k()):ef(T)},N.fitExtent=function(t,n){return vo(N,t,n)},N.fitSize=function(t,n){return yo(N,t,n)},N.fitWidth=function(t,n){return go(N,t,n)},N.fitHeight=function(t,n){return xo(N,t,n)},function(){return n=t.apply(this,arguments),N.invert=n.invert&&A,S()}}function ko(t){var n=0,e=Ii/3,r=So(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Vi,e=t[1]*Vi):[n*Bi,e*Bi]},i}function Eo(t,n){var e=tf(t),r=(e+tf(n))/2;if(Zi(r)<zi)return function(t){var n=Qi(t);function e(t,e){return[t*n,tf(e)/n]}return e.invert=function(t,e){return[t/n,of(e*n)]},e}(t);var i=1+e*(2*r-e),f=ef(i)/r;function o(t,n){var e=ef(i-2*r*tf(n))/r;return[e*tf(t*=r),f-e*Qi(t)]}return o.invert=function(t,n){var e=f-n;return[Wi(t,Zi(e))/r*nf(e),of((i-(t*t+e*e)*r*r)/(2*r))]},o}var Co=function(){return ko(Eo).scale(155.424).center([0,33.6442])},Uo=function(){return Co().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};function Lo(t){return function(n,e){var r=Qi(n),i=Qi(e),f=t(r*i);return[f*i*tf(n),f*tf(e)]}}function Po(t){return function(n,e){var r=ef(n*n+e*e),i=t(r),f=tf(i),o=Qi(i);return[Wi(n*f,r*o),of(r&&e*f/r)]}}var Ro=Lo(function(t){return ef(2/(1+t))});Ro.invert=Po(function(t){return 2*of(t/2)});var Do=Lo(function(t){return(t=ff(t))&&t/tf(t)});Do.invert=Po(function(t){return t});function qo(t,n){return[t,Ki(rf((Hi+n)/2))]}qo.invert=function(t,n){return[t,2*Ji(Gi(n))-Hi]};function Fo(t,n){return[t,n]}Fo.invert=Fo;function Yo(t,n){var e=Qi(n),r=Qi(t)*e;return[e*tf(t)/r,tf(n)/r]}Yo.invert=Po(Ji);function jo(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}jo.invert=function(t,n){var e,r=n,i=25;do{var f=r*r,o=f*f;r-=e=(r*(1.007226+f*(.015085+o*(.028874*f-.044475-.005916*o)))-n)/(1.007226+f*(.045255+o*(.259866*f-.311325-.005916*11*o)))}while(Zi(e)>zi&&--i>0);return[t/(.8707+(f=r*r)*(f*(f*f*f*(.003971-.001529*f)-.013791)-.131979)),r]};function Oo(t,n){return[Qi(n)*tf(t),tf(n)]}Oo.invert=Po(of);function zo(t,n){var e=Qi(n),r=1+Qi(t)*e;return[e*tf(t)/r,tf(n)/r]}zo.invert=Po(function(t){return 2*Ji(t)});function Io(t,n){return[Ki(rf((Hi+n)/2)),-t]}Io.invert=function(t,n){return[-n,2*Ji(Gi(t))-Hi]};function Ho(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function $o(t,n){var e,r,i,f,o,a=new Zo(t),u=+t.value&&(a.value=t.value),c=[a];for(null==n&&(n=Xo);e=c.pop();)if(u&&(e.value=+e.data.value),(i=n(e.data))&&(o=i.length))for(e.children=new Array(o),f=o-1;f>=0;--f)c.push(r=e.children[f]=new Zo(i[f])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Vo)}function Xo(t){return t.children}function Bo(t){t.data=t.data.data}function Vo(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Zo(t){this.data=t,this.depth=this.height=0,this.parent=null}Zo.prototype=$o.prototype={constructor:Zo,count:function(){return this.eachAfter(Ho)},each:function(t){var n,e,r,i,f=this,o=[f];do{for(n=o.reverse(),o=[];f=n.pop();)if(t(f),e=f.children)for(r=0,i=e.length;r<i;++r)o.push(e[r])}while(o.length);return this},eachAfter:function(t){for(var n,e,r,i=this,f=[i],o=[];i=f.pop();)if(o.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)f.push(n[e]);for(;i=o.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return $o(this).eachBefore(Bo)}};var Jo=Array.prototype.slice;var Wo=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Jo.call(t))).length,f=[];r<i;)n=t[r],e&&Ko(e,n)?++r:(e=na(f=Qo(f,n)),r=0);return e};function Qo(t,n){var e,r;if(ta(n,t))return[n];for(e=0;e<t.length;++e)if(Go(n,t[e])&&ta(ea(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Go(ea(t[e],t[r]),n)&&Go(ea(t[e],n),t[r])&&Go(ea(t[r],n),t[e])&&ta(ra(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Go(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Ko(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function ta(t,n){for(var e=0;e<n.length;++e)if(!Ko(t,n[e]))return!1;return!0}function na(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return ea(t[0],t[1]);case 3:return ra(t[0],t[1],t[2])}}function ea(t,n){var e=t.x,r=t.y,i=t.r,f=n.x,o=n.y,a=n.r,u=f-e,c=o-r,s=a-i,h=Math.sqrt(u*u+c*c);return{x:(e+f+u/h*s)/2,y:(r+o+c/h*s)/2,r:(h+i+a)/2}}function ra(t,n,e){var r=t.x,i=t.y,f=t.r,o=n.x,a=n.y,u=n.r,c=e.x,s=e.y,h=e.r,l=r-o,d=r-c,p=i-a,_=i-s,b=u-f,v=h-f,y=r*r+i*i-f*f,g=y-o*o-a*a+u*u,x=y-c*c-s*s+h*h,m=d*p-l*_,w=(p*x-_*g)/(2*m)-r,M=(_*b-p*v)/m,T=(d*g-l*x)/(2*m)-i,N=(l*v-d*b)/m,A=M*M+N*N-1,S=2*(f+w*M+T*N),k=w*w+T*T-f*f,E=-(A?(S+Math.sqrt(S*S-4*A*k))/(2*A):k/S);return{x:r+w+M*E,y:i+T+N*E,r:E}}var ia=function(t,n,e,r,i){for(var f,o=t.children,a=-1,u=o.length,c=t.value&&(r-n)/t.value;++a<u;)(f=o[a]).y0=e,f.y1=i,f.x0=n,f.x1=n+=f.value*c};function fa(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}fa.prototype=Object.create(Zo.prototype);var oa=function(t,n,e,r,i){for(var f,o=t.children,a=-1,u=o.length,c=t.value&&(i-e)/t.value;++a<u;)(f=o[a]).x0=n,f.x1=r,f.y0=e,f.y1=e+=f.value*c},aa=(1+Math.sqrt(5))/2;function ua(t,n,e,r,i,f){for(var o,a,u,c,s,h,l,d,p,_,b,v=[],y=n.children,g=0,x=0,m=y.length,w=n.value;g<m;){u=i-e,c=f-r;do{s=y[x++].value}while(!s&&x<m);for(h=l=s,b=s*s*(_=Math.max(c/u,u/c)/(w*t)),p=Math.max(l/b,b/h);x<m;++x){if(s+=a=y[x].value,a<h&&(h=a),a>l&&(l=a),b=s*s*_,(d=Math.max(l/b,b/h))>p){s-=a;break}p=d}v.push(o={value:s,dice:u<c,children:y.slice(g,x)}),o.dice?ia(o,e,r,i,w?r+=c*s/w:f):oa(o,e,r,w?e+=u*s/w:i,f),w-=s,g=x}return v}var ca=function t(n){function e(t,e,r,i,f){ua(n,t,e,r,i,f)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(aa);(function t(n){function e(t,e,r,i,f){if((o=t._squarify)&&o.ratio===n)for(var o,a,u,c,s,h=-1,l=o.length,d=t.value;++h<l;){for(u=(a=o[h]).children,c=a.value=0,s=u.length;c<s;++c)a.value+=u[c].value;a.dice?ia(a,e,r,i,r+=(f-r)*a.value/d):oa(a,e,r,e+=(i-e)*a.value/d,f),d-=a.value}else t._squarify=o=ua(n,t,e,r,i,f),o.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(aa);var sa=function(){return Math.random()},ha=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(sa),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var f;if(null!=r)f=r,r=null;else do{r=2*n()-1,f=2*n()-1,i=r*r+f*f}while(!i||i>1);return t+e*f*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(sa)),la=(function t(n){function e(){var t=ha.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(sa),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(sa)),da=(function t(n){function e(t){var e=la.source(n)(t);return function(){return e()/t}}return e.source=t,e}(sa),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(sa),Array.prototype),pa=da.map,_a=da.slice,ba={name:"implicit"};function va(t){var n=Cr(),e=[],r=ba;function i(i){var f=i+"",o=n.get(f);if(!o){if(r!==ba)return r;n.set(f,o=e.push(i))}return t[(o-1)%t.length]}return t=null==t?[]:_a.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Cr();for(var r,f,o=-1,a=t.length;++o<a;)n.has(f=(r=t[o])+"")||n.set(f,e.push(r));return i},i.range=function(n){return arguments.length?(t=_a.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return va().domain(e).range(t).unknown(r)},i}function ya(){var t,n,e=va().unknown(void 0),r=e.domain,i=e.range,f=[0,1],o=!1,a=0,u=0,c=.5;function s(){var e=r().length,s=f[1]<f[0],h=f[s-0],l=f[1-s];t=(l-h)/Math.max(1,e-a+2*u),o&&(t=Math.floor(t)),h+=(l-h-t*(e-a))*c,n=t*(1-a),o&&(h=Math.round(h),n=Math.round(n));var p=d(e).map(function(n){return h+t*n});return i(s?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(f=[+t[0],+t[1]],s()):f.slice()},e.rangeRound=function(t){return f=[+t[0],+t[1]],o=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(o=!!t,s()):o},e.padding=function(t){return arguments.length?(a=u=Math.max(0,Math.min(1,t)),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),s()):a},e.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),s()):u},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),s()):c},e.copy=function(){return ya().domain(r()).range(f).round(o).paddingInner(a).paddingOuter(u).align(c)},s()}var ga=function(t){return function(){return t}},xa=function(t){return+t},ma=[0,1];function wa(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:ga(n)}function Ma(t,n,e,r){var i=t[0],f=t[1],o=n[0],a=n[1];return f<i?(i=e(f,i),o=r(a,o)):(i=e(i,f),o=r(o,a)),function(t){return o(i(t))}}function Ta(t,n,e,r){var i=Math.min(t.length,n.length)-1,f=new Array(i),o=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)f[u]=e(t[u],t[u+1]),o[u]=r(n[u],n[u+1]);return function(n){var e=a(t,n,1,i)-1;return o[e](f[e](n))}}function Na(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Aa(t,n){var e,r,i,f=ma,o=ma,a=be,u=!1;function c(){return e=Math.min(f.length,o.length)>2?Ta:Ma,r=i=null,s}function s(n){return(r||(r=e(f,o,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return s.invert=function(t){return(i||(i=e(o,f,wa,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},s.domain=function(t){return arguments.length?(f=pa.call(t,xa),c()):f.slice()},s.range=function(t){return arguments.length?(o=_a.call(t),c()):o.slice()},s.rangeRound=function(t){return o=_a.call(t),a=ve,c()},s.clamp=function(t){return arguments.length?(u=!!t,c()):u},s.interpolate=function(t){return arguments.length?(a=t,c()):a},c()}var Sa=function(t,n,e){var r,i=t[0],f=t[t.length-1],o=g(i,f,null==n?10:n);switch((e=wi(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(f));return null!=e.precision||isNaN(r=Di(o,a))||(e.precision=r),Si(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=qi(o,Math.max(Math.abs(i),Math.abs(f))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Ri(o))||(e.precision=r-2*("%"===e.type))}return Ai(e)};function ka(t){var n=t.domain;return t.ticks=function(t){var e=n();return v(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Sa(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),f=0,o=i.length-1,a=i[f],u=i[o];return u<a&&(r=a,a=u,u=r,r=f,f=o,o=r),(r=y(a,u,e))>0?r=y(a=Math.floor(a/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=y(a=Math.ceil(a*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[f]=Math.floor(a/r)*r,i[o]=Math.ceil(u/r)*r,n(i)):r<0&&(i[f]=Math.ceil(a*r)/r,i[o]=Math.floor(u*r)/r,n(i)),t},t}function Ea(){var t=Aa(wa,ae);return t.copy=function(){return Na(t,Ea())},ka(t)}var Ca=new Date,Ua=new Date;function La(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,f){var o,a=[];if(e=i.ceil(e),f=null==f?1:Math.floor(f),!(e<r&&f>0))return a;do{a.push(o=new Date(+e)),n(e,f),t(e)}while(o<e&&e<r);return a},i.filter=function(e){return La(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Ca.setTime(+n),Ua.setTime(+r),t(Ca),t(Ua),Math.floor(e(Ca,Ua))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Pa=La(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Pa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?La(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Pa:null};var Ra=Pa,Da=(Pa.range,6e4),qa=6048e5,Fa=La(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Ya=Fa,ja=(Fa.range,La(function(t){t.setTime(Math.floor(t/Da)*Da)},function(t,n){t.setTime(+t+n*Da)},function(t,n){return(n-t)/Da},function(t){return t.getMinutes()})),Oa=ja,za=(ja.range,La(function(t){var n=t.getTimezoneOffset()*Da%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Ia=za,Ha=(za.range,La(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Da)/864e5},function(t){return t.getDate()-1})),$a=Ha;Ha.range;function Xa(t){return La(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Da)/qa})}var Ba=Xa(0),Va=Xa(1),Za=Xa(2),Ja=Xa(3),Wa=Xa(4),Qa=Xa(5),Ga=Xa(6),Ka=(Ba.range,Va.range,Za.range,Ja.range,Wa.range,Qa.range,Ga.range,La(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),tu=Ka,nu=(Ka.range,La(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));nu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?La(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var eu=nu,ru=(nu.range,La(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Da)},function(t,n){return(n-t)/Da},function(t){return t.getUTCMinutes()})),iu=ru,fu=(ru.range,La(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),ou=fu,au=(fu.range,La(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),uu=au;au.range;function cu(t){return La(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/qa})}var su=cu(0),hu=cu(1),lu=cu(2),du=cu(3),pu=cu(4),_u=cu(5),bu=cu(6),vu=(su.range,hu.range,lu.range,du.range,pu.range,_u.range,bu.range,La(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),yu=vu,gu=(vu.range,La(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));gu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?La(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var xu=gu;gu.range;function mu(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function wu(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Mu(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Tu(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,f=t.days,o=t.shortDays,a=t.months,u=t.shortMonths,c=Du(i),s=qu(i),h=Du(f),l=qu(f),d=Du(o),p=qu(o),_=Du(a),b=qu(a),v=Du(u),y=qu(u),g={a:function(t){return o[t.getDay()]},A:function(t){return f[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:ec,e:ec,f:ac,H:rc,I:ic,j:fc,L:oc,m:uc,M:cc,p:function(t){return i[+(t.getHours()>=12)]},Q:Fc,s:Yc,S:sc,u:hc,U:lc,V:dc,w:pc,W:_c,x:null,X:null,y:bc,Y:vc,Z:yc,"%":qc},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return f[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:gc,e:gc,f:Tc,H:xc,I:mc,j:wc,L:Mc,m:Nc,M:Ac,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Fc,s:Yc,S:Sc,u:kc,U:Ec,V:Cc,w:Uc,W:Lc,x:null,X:null,y:Pc,Y:Rc,Z:Dc,"%":qc},m={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=l[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=b[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:Bu,e:Bu,f:Gu,H:Zu,I:Zu,j:Vu,L:Qu,m:Xu,M:Ju,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:tc,s:nc,S:Wu,u:Yu,U:ju,V:Ou,w:Fu,W:zu,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:Hu,Y:Iu,Z:$u,"%":Ku};function w(t,n){return function(e){var r,i,f,o=[],a=-1,u=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(o.push(t.slice(u,a)),null!=(i=Eu[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(f=n[r])&&(r=f(e,i)),o.push(r),u=a+1);return o.push(t.slice(u,a)),o.join("")}}function M(t,n){return function(e){var r,i,f=Mu(1900);if(T(f,t,e+="",0)!=e.length)return null;if("Q"in f)return new Date(f.Q);if("p"in f&&(f.H=f.H%12+12*f.p),"V"in f){if(f.V<1||f.V>53)return null;"w"in f||(f.w=1),"Z"in f?(r=(i=(r=wu(Mu(f.y))).getUTCDay())>4||0===i?hu.ceil(r):hu(r),r=uu.offset(r,7*(f.V-1)),f.y=r.getUTCFullYear(),f.m=r.getUTCMonth(),f.d=r.getUTCDate()+(f.w+6)%7):(r=(i=(r=n(Mu(f.y))).getDay())>4||0===i?Va.ceil(r):Va(r),r=$a.offset(r,7*(f.V-1)),f.y=r.getFullYear(),f.m=r.getMonth(),f.d=r.getDate()+(f.w+6)%7)}else("W"in f||"U"in f)&&("w"in f||(f.w="u"in f?f.u%7:"W"in f?1:0),i="Z"in f?wu(Mu(f.y)).getUTCDay():n(Mu(f.y)).getDay(),f.m=0,f.d="W"in f?(f.w+6)%7+7*f.W-(i+5)%7:f.w+7*f.U-(i+6)%7);return"Z"in f?(f.H+=f.Z/100|0,f.M+=f.Z%100,wu(f)):n(f)}}function T(t,n,e,r){for(var i,f,o=0,a=n.length,u=e.length;o<a;){if(r>=u)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(f=m[i in Eu?n.charAt(o++):i])||(r=f(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return g.x=w(e,g),g.X=w(r,g),g.c=w(n,g),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",g);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",mu);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,wu);return n.toString=function(){return t},n}}}var Nu,Au,Su,ku,Eu={"-":"",_:" ",0:"0"},Cu=/^\s*\d+/,Uu=/^%/,Lu=/[\\^$*+?|[\]().{}]/g;function Pu(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",f=i.length;return r+(f<e?new Array(e-f+1).join(n)+i:i)}function Ru(t){return t.replace(Lu,"\\$&")}function Du(t){return new RegExp("^(?:"+t.map(Ru).join("|")+")","i")}function qu(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Fu(t,n,e){var r=Cu.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Yu(t,n,e){var r=Cu.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ju(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Ou(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function zu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Iu(t,n,e){var r=Cu.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Hu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function $u(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Xu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Bu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Vu(t,n,e){var r=Cu.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Zu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ju(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Wu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Qu(t,n,e){var r=Cu.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Gu(t,n,e){var r=Cu.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Ku(t,n,e){var r=Uu.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function tc(t,n,e){var r=Cu.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function nc(t,n,e){var r=Cu.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function ec(t,n){return Pu(t.getDate(),n,2)}function rc(t,n){return Pu(t.getHours(),n,2)}function ic(t,n){return Pu(t.getHours()%12||12,n,2)}function fc(t,n){return Pu(1+$a.count(eu(t),t),n,3)}function oc(t,n){return Pu(t.getMilliseconds(),n,3)}function ac(t,n){return oc(t,n)+"000"}function uc(t,n){return Pu(t.getMonth()+1,n,2)}function cc(t,n){return Pu(t.getMinutes(),n,2)}function sc(t,n){return Pu(t.getSeconds(),n,2)}function hc(t){var n=t.getDay();return 0===n?7:n}function lc(t,n){return Pu(Ba.count(eu(t),t),n,2)}function dc(t,n){var e=t.getDay();return t=e>=4||0===e?Wa(t):Wa.ceil(t),Pu(Wa.count(eu(t),t)+(4===eu(t).getDay()),n,2)}function pc(t){return t.getDay()}function _c(t,n){return Pu(Va.count(eu(t),t),n,2)}function bc(t,n){return Pu(t.getFullYear()%100,n,2)}function vc(t,n){return Pu(t.getFullYear()%1e4,n,4)}function yc(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Pu(n/60|0,"0",2)+Pu(n%60,"0",2)}function gc(t,n){return Pu(t.getUTCDate(),n,2)}function xc(t,n){return Pu(t.getUTCHours(),n,2)}function mc(t,n){return Pu(t.getUTCHours()%12||12,n,2)}function wc(t,n){return Pu(1+uu.count(xu(t),t),n,3)}function Mc(t,n){return Pu(t.getUTCMilliseconds(),n,3)}function Tc(t,n){return Mc(t,n)+"000"}function Nc(t,n){return Pu(t.getUTCMonth()+1,n,2)}function Ac(t,n){return Pu(t.getUTCMinutes(),n,2)}function Sc(t,n){return Pu(t.getUTCSeconds(),n,2)}function kc(t){var n=t.getUTCDay();return 0===n?7:n}function Ec(t,n){return Pu(su.count(xu(t),t),n,2)}function Cc(t,n){var e=t.getUTCDay();return t=e>=4||0===e?pu(t):pu.ceil(t),Pu(pu.count(xu(t),t)+(4===xu(t).getUTCDay()),n,2)}function Uc(t){return t.getUTCDay()}function Lc(t,n){return Pu(hu.count(xu(t),t),n,2)}function Pc(t,n){return Pu(t.getUTCFullYear()%100,n,2)}function Rc(t,n){return Pu(t.getUTCFullYear()%1e4,n,4)}function Dc(){return"+0000"}function qc(){return"%"}function Fc(t){return+t}function Yc(t){return Math.floor(+t/1e3)}!function(t){Nu=Tu(t),Au=Nu.format,Nu.parse,Su=Nu.utcFormat,ku=Nu.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Su("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ku("%Y-%m-%dT%H:%M:%S.%LZ");var jc=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Oc=(jc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),jc("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),jc("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jc("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),jc("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),jc("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),jc("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),jc("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),jc("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return ie(t[t.length-1])});Oc(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(jc)),Oc(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(jc)),Oc(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(jc)),Oc(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(jc)),Oc(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(jc)),Oc(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(jc)),Oc(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(jc)),Oc(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(jc)),Oc(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(jc)),Oc(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(jc)),Oc(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(jc)),Oc(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(jc)),Oc(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(jc)),Oc(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(jc)),Oc(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(jc)),Oc(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(jc)),Oc(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(jc)),Oc(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(jc)),Oc(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(jc)),Oc(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(jc)),Oc(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(jc)),Oc(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(jc)),Oc(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(jc)),Oc(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(jc)),Oc(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(jc)),Oc(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(jc)),Oc(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(jc)),Ce(Bn(300,.5,0),Bn(-240,.5,1)),Ce(Bn(-100,.75,.35),Bn(80,1.5,.8)),Ce(Bn(260,.75,.35),Bn(80,1.5,.8)),Bn(),pn(),Math.PI,Math.PI;function zc(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}zc(jc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),zc(jc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),zc(jc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),zc(jc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Ic=function(t){return function(){return t}},Hc=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,1e-12),$c=Math.PI,Xc=2*$c;function Bc(t){this._context=t}Bc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Vc=function(t){return new Bc(t)};function Zc(t){return t[0]}function Jc(t){return t[1]}var Wc=function(){var t=Zc,n=Jc,e=Ic(!0),r=null,i=Vc,f=null;function o(o){var a,u,c,s=o.length,h=!1;for(null==r&&(f=i(c=Sr())),a=0;a<=s;++a)!(a<s&&e(u=o[a],a,o))===h&&((h=!h)?f.lineStart():f.lineEnd()),h&&f.point(+t(u,a,o),+n(u,a,o));if(c)return f=null,c+""||null}return o.x=function(n){return arguments.length?(t="function"==typeof n?n:Ic(+n),o):t},o.y=function(t){return arguments.length?(n="function"==typeof t?t:Ic(+t),o):n},o.defined=function(t){return arguments.length?(e="function"==typeof t?t:Ic(!!t),o):e},o.curve=function(t){return arguments.length?(i=t,null!=r&&(f=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=f=null:f=i(r=t),o):r},o},Qc=function(){var t=Zc,n=null,e=Ic(0),r=Jc,i=Ic(!0),f=null,o=Vc,a=null;function u(u){var c,s,h,l,d,p=u.length,_=!1,b=new Array(p),v=new Array(p);for(null==f&&(a=o(d=Sr())),c=0;c<=p;++c){if(!(c<p&&i(l=u[c],c,u))===_)if(_=!_)s=c,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),h=c-1;h>=s;--h)a.point(b[h],v[h]);a.lineEnd(),a.areaEnd()}_&&(b[c]=+t(l,c,u),v[c]=+e(l,c,u),a.point(n?+n(l,c,u):b[c],r?+r(l,c,u):v[c]))}if(d)return a=null,d+""||null}function c(){return Wc().defined(i).curve(o).context(f)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:Ic(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:Ic(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Ic(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:Ic(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:Ic(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Ic(+t),u):r},u.lineX0=u.lineY0=function(){return c().x(t).y(e)},u.lineY1=function(){return c().x(t).y(r)},u.lineX1=function(){return c().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:Ic(!!t),u):i},u.curve=function(t){return arguments.length?(o=t,null!=f&&(a=o(f)),u):o},u.context=function(t){return arguments.length?(null==t?f=a=null:a=o(f=t),u):f},u};Kc(Vc);function Gc(t){this._curve=t}function Kc(t){function n(n){return new Gc(t(n))}return n._curve=t,n}Gc.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var ts=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]};Array.prototype.slice;var ns={draw:function(t,n){var e=Math.sqrt(n/$c);t.moveTo(e,0),t.arc(0,0,e,0,Xc)}},es={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},rs=Math.sqrt(1/3),is=2*rs,fs={draw:function(t,n){var e=Math.sqrt(n/is),r=e*rs;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},os=Math.sin($c/10)/Math.sin(7*$c/10),as=Math.sin(Xc/10)*os,us=-Math.cos(Xc/10)*os,cs={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=as*e,i=us*e;t.moveTo(0,-e),t.lineTo(r,i);for(var f=1;f<5;++f){var o=Xc*f/5,a=Math.cos(o),u=Math.sin(o);t.lineTo(u*e,-a*e),t.lineTo(a*r-u*i,u*r+a*i)}t.closePath()}},ss={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},hs=Math.sqrt(3),ls={draw:function(t,n){var e=-Math.sqrt(n/(3*hs));t.moveTo(0,2*e),t.lineTo(-hs*e,-e),t.lineTo(hs*e,-e),t.closePath()}},ds=Math.sqrt(3)/2,ps=1/Math.sqrt(12),_s=3*(ps/2+1),bs={draw:function(t,n){var e=Math.sqrt(n/_s),r=e/2,i=e*ps,f=r,o=e*ps+e,a=-f,u=o;t.moveTo(r,i),t.lineTo(f,o),t.lineTo(a,u),t.lineTo(-.5*r-ds*i,ds*r+-.5*i),t.lineTo(-.5*f-ds*o,ds*f+-.5*o),t.lineTo(-.5*a-ds*u,ds*a+-.5*u),t.lineTo(-.5*r+ds*i,-.5*i-ds*r),t.lineTo(-.5*f+ds*o,-.5*o-ds*f),t.lineTo(-.5*a+ds*u,-.5*u-ds*a),t.closePath()}},vs=function(){};function ys(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function gs(t){this._context=t}gs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ys(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ys(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function xs(t){this._context=t}xs.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:ys(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function ms(t){this._context=t}ms.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:ys(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function ws(t,n){this._basis=new gs(t),this._beta=n}ws.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],f=n[0],o=t[e]-i,a=n[e]-f,u=-1;++u<=e;)r=u/e,this._basis.point(this._beta*t[u]+(1-this._beta)*(i+r*o),this._beta*n[u]+(1-this._beta)*(f+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new gs(t):new ws(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function Ms(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Ts(t,n){this._context=t,this._k=(1-n)/6}Ts.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ms(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ms(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ts(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ns(t,n){this._context=t,this._k=(1-n)/6}Ns.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ms(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ns(t,n)}return e.tension=function(n){return t(+n)},e})(0);function As(t,n){this._context=t,this._k=(1-n)/6}As.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ms(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new As(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ss(t,n,e){var r=t._x1,i=t._y1,f=t._x2,o=t._y2;if(t._l01_a>Hc){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Hc){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);f=(f*c+t._x1*t._l23_2a-n*t._l12_2a)/s,o=(o*c+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,f,o,t._x2,t._y2)}function ks(t,n){this._context=t,this._alpha=n}ks.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ss(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new ks(t,n):new Ts(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Es(t,n){this._context=t,this._alpha=n}Es.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ss(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Es(t,n):new Ns(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Cs(t,n){this._context=t,this._alpha=n}Cs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ss(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Cs(t,n):new As(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Us(t){this._context=t}Us.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Ls(t){return t<0?-1:1}function Ps(t,n,e){var r=t._x1-t._x0,i=n-t._x1,f=(t._y1-t._y0)/(r||i<0&&-0),o=(e-t._y1)/(i||r<0&&-0),a=(f*i+o*r)/(r+i);return(Ls(f)+Ls(o))*Math.min(Math.abs(f),Math.abs(o),.5*Math.abs(a))||0}function Rs(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ds(t,n,e){var r=t._x0,i=t._y0,f=t._x1,o=t._y1,a=(f-r)/3;t._context.bezierCurveTo(r+a,i+a*n,f-a,o-a*e,f,o)}function qs(t){this._context=t}function Fs(t){this._context=new Ys(t)}function Ys(t){this._context=t}function js(t){this._context=t}function Os(t){var n,e,r=t.length-1,i=new Array(r),f=new Array(r),o=new Array(r);for(i[0]=0,f[0]=2,o[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,f[n]=4,o[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,f[r-1]=7,o[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/f[n-1],f[n]-=e,o[n]-=e*o[n-1];for(i[r-1]=o[r-1]/f[r-1],n=r-2;n>=0;--n)i[n]=(o[n]-i[n+1])/f[n];for(f[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)f[n]=2*t[n+1]-i[n+1];return[i,f]}qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ds(this,this._t0,Rs(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ds(this,Rs(this,e=Ps(this,t,n)),e);break;default:Ds(this,this._t0,e=Ps(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Fs.prototype=Object.create(qs.prototype)).point=function(t,n){qs.prototype.point.call(this,n,t)},Ys.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,f){this._context.bezierCurveTo(n,t,r,e,f,i)}},js.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Os(t),i=Os(n),f=0,o=1;o<e;++f,++o)this._context.bezierCurveTo(r[0][f],i[0][f],r[1][f],i[1][f],t[o],n[o]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function zs(t,n){this._context=t,this._t=n}zs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Is=function(t,n){if((i=t.length)>1)for(var e,r,i,f=1,o=t[n[0]],a=o.length;f<i;++f)for(r=o,o=t[n[f]],e=0;e<a;++e)o[e][1]+=o[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Hs=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};var $s=function(t){var n=t.map(Xs);return Hs(t).sort(function(t,e){return n[t]-n[e]})};function Xs(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Bs(){this._=null}function Vs(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Zs(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Js(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Ws(t){for(;t.L;)t=t.L;return t}Bs.prototype={constructor:Bs,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Ws(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Zs(this,e),e=(t=e).U),e.C=!1,r.C=!0,Js(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Js(this,e),e=(t=e).U),e.C=!1,r.C=!0,Zs(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,f=t.L,o=t.R;if(e=f?o?Ws(o):f:o,i?i.L===t?i.L=e:i.R=e:this._=e,f&&o?(r=e.C,e.C=t.C,e.L=f,f.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Zs(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Js(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Zs(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Js(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Zs(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Js(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Qs=Bs;function Gs(t,n,e,r){var i=[null,null],f=xh.push(i)-1;return i.left=t,i.right=n,e&&th(i,t,n,e),r&&th(i,n,t,r),yh[t.index].halfedges.push(f),yh[n.index].halfedges.push(f),i}function Ks(t,n,e){var r=[n,e];return r.left=t,r}function th(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function nh(t,n,e,r,i){var f,o=t[0],a=t[1],u=o[0],c=o[1],s=0,h=1,l=a[0]-u,d=a[1]-c;if(f=n-u,l||!(f>0)){if(f/=l,l<0){if(f<s)return;f<h&&(h=f)}else if(l>0){if(f>h)return;f>s&&(s=f)}if(f=r-u,l||!(f<0)){if(f/=l,l<0){if(f>h)return;f>s&&(s=f)}else if(l>0){if(f<s)return;f<h&&(h=f)}if(f=e-c,d||!(f>0)){if(f/=d,d<0){if(f<s)return;f<h&&(h=f)}else if(d>0){if(f>h)return;f>s&&(s=f)}if(f=i-c,d||!(f<0)){if(f/=d,d<0){if(f>h)return;f>s&&(s=f)}else if(d>0){if(f<s)return;f<h&&(h=f)}return!(s>0||h<1)||(s>0&&(t[0]=[u+s*l,c+s*d]),h<1&&(t[1]=[u+h*l,c+h*d]),!0)}}}}}function eh(t,n,e,r,i){var f=t[1];if(f)return!0;var o,a,u=t[0],c=t.left,s=t.right,h=c[0],l=c[1],d=s[0],p=s[1],_=(h+d)/2,b=(l+p)/2;if(p===l){if(_<n||_>=r)return;if(h>d){if(u){if(u[1]>=i)return}else u=[_,e];f=[_,i]}else{if(u){if(u[1]<e)return}else u=[_,i];f=[_,e]}}else if(a=b-(o=(h-d)/(p-l))*_,o<-1||o>1)if(h>d){if(u){if(u[1]>=i)return}else u=[(e-a)/o,e];f=[(i-a)/o,i]}else{if(u){if(u[1]<e)return}else u=[(i-a)/o,i];f=[(e-a)/o,e]}else if(l<p){if(u){if(u[0]>=r)return}else u=[n,o*n+a];f=[r,o*r+a]}else{if(u){if(u[0]<n)return}else u=[r,o*r+a];f=[n,o*n+a]}return t[0]=u,t[1]=f,!0}function rh(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function ih(t,n){return n[+(n.left!==t.site)]}function fh(t,n){return n[+(n.left===t.site)]}var oh,ah=[];function uh(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,f=e.site;if(r!==f){var o=i[0],a=i[1],u=r[0]-o,c=r[1]-a,s=f[0]-o,h=f[1]-a,l=2*(u*h-c*s);if(!(l>=-wh)){var d=u*u+c*c,p=s*s+h*h,_=(h*d-c*p)/l,b=(u*p-s*d)/l,v=ah.pop()||new function(){Vs(this),this.x=this.y=this.arc=this.site=this.cy=null};v.arc=t,v.site=i,v.x=_+o,v.y=(v.cy=b+a)+Math.sqrt(_*_+b*b),t.circle=v;for(var y=null,g=gh._;g;)if(v.y<g.y||v.y===g.y&&v.x<=g.x){if(!g.L){y=g.P;break}g=g.L}else{if(!g.R){y=g;break}g=g.R}gh.insert(y,v),y||(oh=v)}}}}function ch(t){var n=t.circle;n&&(n.P||(oh=n.N),gh.remove(n),ah.push(n),Vs(n),t.circle=null)}var sh=[];function hh(t){var n=sh.pop()||new function(){Vs(this),this.edge=this.site=this.circle=null};return n.site=t,n}function lh(t){ch(t),vh.remove(t),sh.push(t),Vs(t)}function dh(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],f=t.P,o=t.N,a=[t];lh(t);for(var u=f;u.circle&&Math.abs(e-u.circle.x)<mh&&Math.abs(r-u.circle.cy)<mh;)f=u.P,a.unshift(u),lh(u),u=f;a.unshift(u),ch(u);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<mh&&Math.abs(r-c.circle.cy)<mh;)o=c.N,a.push(c),lh(c),c=o;a.push(c),ch(c);var s,h=a.length;for(s=1;s<h;++s)c=a[s],u=a[s-1],th(c.edge,u.site,c.site,i);u=a[0],(c=a[h-1]).edge=Gs(u.site,c.site,null,i),uh(u),uh(c)}function ph(t){for(var n,e,r,i,f=t[0],o=t[1],a=vh._;a;)if((r=_h(a,o)-f)>mh)a=a.L;else{if(!((i=f-bh(a,o))>mh)){r>-mh?(n=a.P,e=a):i>-mh?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){yh[t.index]={site:t,halfedges:[]}}(t);var u=hh(t);if(vh.insert(n,u),n||e){if(n===e)return ch(n),e=hh(n.site),vh.insert(u,e),u.edge=e.edge=Gs(n.site,u.site),uh(n),void uh(e);if(e){ch(n),ch(e);var c=n.site,s=c[0],h=c[1],l=t[0]-s,d=t[1]-h,p=e.site,_=p[0]-s,b=p[1]-h,v=2*(l*b-d*_),y=l*l+d*d,g=_*_+b*b,x=[(b*y-d*g)/v+s,(l*g-_*y)/v+h];th(e.edge,c,p,x),u.edge=Gs(c,t,null,x),e.edge=Gs(t,p,null,x),uh(n),uh(e)}else u.edge=Gs(n.site,u.site)}}function _h(t,n){var e=t.site,r=e[0],i=e[1],f=i-n;if(!f)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],u=e[1],c=u-n;if(!c)return a;var s=a-r,h=1/f-1/c,l=s/c;return h?(-l+Math.sqrt(l*l-2*h*(s*s/(-2*c)-u+c/2+i-f/2)))/h+r:(r+a)/2}function bh(t,n){var e=t.N;if(e)return _h(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var vh,yh,gh,xh,mh=1e-6,wh=1e-12;function Mh(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Th(t,n){return n[1]-t[1]||n[0]-t[0]}function Nh(t,n){var e,r,i,f=t.sort(Th).pop();for(xh=[],yh=new Array(t.length),vh=new Qs,gh=new Qs;;)if(i=oh,f&&(!i||f[1]<i.y||f[1]===i.y&&f[0]<i.x))f[0]===e&&f[1]===r||(ph(f),e=f[0],r=f[1]),f=t.pop();else{if(!i)break;dh(i.arc)}if(function(){for(var t,n,e,r,i=0,f=yh.length;i<f;++i)if((t=yh[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=rh(t,xh[n[e]]);for(o.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],u=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,f=xh.length;f--;)eh(i=xh[f],t,n,e,r)&&nh(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>mh||Math.abs(i[0][1]-i[1][1])>mh)||delete xh[f]}(o,a,u,c),function(t,n,e,r){var i,f,o,a,u,c,s,h,l,d,p,_,b=yh.length,v=!0;for(i=0;i<b;++i)if(f=yh[i]){for(o=f.site,a=(u=f.halfedges).length;a--;)xh[u[a]]||u.splice(a,1);for(a=0,c=u.length;a<c;)p=(d=fh(f,xh[u[a]]))[0],_=d[1],h=(s=ih(f,xh[u[++a%c]]))[0],l=s[1],(Math.abs(p-h)>mh||Math.abs(_-l)>mh)&&(u.splice(a,0,xh.push(Ks(o,d,Math.abs(p-t)<mh&&r-_>mh?[t,Math.abs(h-t)<mh?l:r]:Math.abs(_-r)<mh&&e-p>mh?[Math.abs(l-r)<mh?h:e,r]:Math.abs(p-e)<mh&&_-n>mh?[e,Math.abs(h-e)<mh?l:n]:Math.abs(_-n)<mh&&p-t>mh?[Math.abs(l-n)<mh?h:t,n]:null))-1),++c);c&&(v=!1)}if(v){var y,g,x,m=1/0;for(i=0,v=null;i<b;++i)(f=yh[i])&&(x=(y=(o=f.site)[0]-t)*y+(g=o[1]-n)*g)<m&&(m=x,v=f);if(v){var w=[t,n],M=[t,r],T=[e,r],N=[e,n];v.halfedges.push(xh.push(Ks(o=v.site,w,M))-1,xh.push(Ks(o,M,T))-1,xh.push(Ks(o,T,N))-1,xh.push(Ks(o,N,w))-1)}}for(i=0;i<b;++i)(f=yh[i])&&(f.halfedges.length||delete yh[i])}(o,a,u,c)}this.edges=xh,this.cells=yh,vh=gh=xh=yh=null}Nh.prototype={constructor:Nh,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return ih(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(f=(i=e.halfedges).length)for(var i,f,o,a=e.site,u=-1,c=n[i[f-1]],s=c.left===a?c.right:c.left;++u<f;)o=s,s=(c=n[i[u]]).left===a?c.right:c.left,o&&s&&r<o.index&&r<s.index&&Mh(a,o,s)<0&&t.push([a.data,o.data,s.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,f=this,o=f._found||0,a=f.cells.length;!(i=f.cells[o]);)if(++o>=a)return null;var u=t-i.site[0],c=n-i.site[1],s=u*u+c*c;do{i=f.cells[r=o],o=null,i.halfedges.forEach(function(e){var r=f.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var u=t-a[0],c=n-a[1],h=u*u+c*c;h<s&&(s=h,o=a.index)}})}while(null!==o);return f._found=r,null==e||s<=e*e?i.site:null}};function Ah(t,n,e){this.k=t,this.x=n,this.y=e}Ah.prototype={constructor:Ah,scale:function(t){return 1===t?this:new Ah(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Ah(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Sh=new Ah(1,0,0);Ah.prototype;e.d(n,!1,function(){}),e.d(n,!1,function(){return a}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"a",function(){return r}),e.d(n,!1,function(){return i}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return s}),e.d(n,!1,function(){return h}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return x}),e.d(n,"e",function(){return w}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return M}),e.d(n,!1,function(){return T}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return m}),e.d(n,!1,function(){return d}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return v}),e.d(n,!1,function(){return y}),e.d(n,!1,function(){return g}),e.d(n,!1,function(){return N}),e.d(n,!1,function(){return c}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"b",function(){return Y}),e.d(n,"c",function(){return j}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"f",function(){return Ur}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Cr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return sn}),e.d(n,!1,function(){return pn}),e.d(n,!1,function(){return yn}),e.d(n,!1,function(){return Un}),e.d(n,!1,function(){return Yn}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Bn}),e.d(n,!1,function(){return Zr}),e.d(n,!1,function(){}),e.d(n,!1,function(){return X}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Xt}),e.d(n,!1,function(){return Bt}),e.d(n,!1,function(){return ni}),e.d(n,!1,function(){return ri}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return fi}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return vr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return vr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"d",function(){return ci}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ai}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ai}),e.d(n,!1,function(){return Si}),e.d(n,!1,function(){return Pi}),e.d(n,!1,function(){return wi}),e.d(n,!1,function(){return Ri}),e.d(n,!1,function(){return Di}),e.d(n,!1,function(){return qi}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Of}),e.d(n,!1,function(){return zf}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Xf}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ro}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return to}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Uo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Co}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Fo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ao}),e.d(n,!1,function(){return So}),e.d(n,!1,function(){}),e.d(n,!1,function(){return qo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Sf}),e.d(n,!1,function(){return df}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Wo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ia}),e.d(n,!1,function(){return oa}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ca}),e.d(n,!1,function(){}),e.d(n,!1,function(){return be}),e.d(n,!1,function(){return fe}),e.d(n,!1,function(){return Jn}),e.d(n,!1,function(){return Wn}),e.d(n,!1,function(){return oe}),e.d(n,!1,function(){return ae}),e.d(n,!1,function(){return ue}),e.d(n,!1,function(){return ve}),e.d(n,!1,function(){return _e}),e.d(n,!1,function(){return we}),e.d(n,!1,function(){return Me}),e.d(n,!1,function(){return Ae}),e.d(n,!1,function(){return ee}),e.d(n,!1,function(){return ie}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ce}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Sr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return _i}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ha}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return la}),e.d(n,!1,function(){}),e.d(n,"g",function(){return ya}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"h",function(){return Ea}),e.d(n,!1,function(){}),e.d(n,!1,function(){return va}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return J}),e.d(n,!1,function(){}),e.d(n,!1,function(){return rt}),e.d(n,!1,function(){return It}),e.d(n,!1,function(){return Z}),e.d(n,!1,function(){return V}),e.d(n,!1,function(){return zt}),e.d(n,"i",function(){return Ft}),e.d(n,!1,function(){}),e.d(n,!1,function(){return qt}),e.d(n,!1,function(){return Q}),e.d(n,!1,function(){return K}),e.d(n,!1,function(){return ht}),e.d(n,!1,function(){return Ht}),e.d(n,!1,function(){}),e.d(n,!1,function(){return st}),e.d(n,!1,function(){return At}),e.d(n,!1,function(){return Ut}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Qc}),e.d(n,!1,function(){return Wc}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ts}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ns}),e.d(n,!1,function(){return es}),e.d(n,!1,function(){return fs}),e.d(n,!1,function(){return ss}),e.d(n,!1,function(){return cs}),e.d(n,!1,function(){return ls}),e.d(n,!1,function(){return bs}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Vc}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Is}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return $s}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Hs}),e.d(n,!1,function(){}),e.d(n,!1,function(){return La}),e.d(n,!1,function(){return Ra}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ra}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ya}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ya}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Oa}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ia}),e.d(n,!1,function(){}),e.d(n,!1,function(){return $a}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ba}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ba}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Va}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Wa}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return tu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return eu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return iu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ou}),e.d(n,!1,function(){}),e.d(n,!1,function(){return uu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return su}),e.d(n,!1,function(){}),e.d(n,!1,function(){return su}),e.d(n,!1,function(){}),e.d(n,!1,function(){return hu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return pu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return yu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return xu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Au}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Su}),e.d(n,!1,function(){return ku}),e.d(n,!1,function(){return Tu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ie}),e.d(n,!1,function(){return Xe}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Je}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return cr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Sh})},,,,,function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),f=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(f).concat([i]).join("\n")}return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var f=this[i][0];"number"==typeof f&&(r[f]=!0)}for(i=0;i<t.length;i++){var o=t[i];"number"==typeof o[0]&&r[o[0]]||(e&&!o[2]?o[2]=e:e&&(o[2]="("+o[2]+") and ("+e+")"),n.push(o))}},n}},function(t,n,e){var r={},i=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),f=function(t){var n={};return function(t){if("function"==typeof t)return t();if(void 0===n[t]){var e=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}}(),o=null,a=0,u=[],c=e(7);function s(t,n){for(var e=0;e<t.length;e++){var i=t[e],f=r[i.id];if(f){f.refs++;for(var o=0;o<f.parts.length;o++)f.parts[o](i.parts[o]);for(;o<i.parts.length;o++)f.parts.push(b(i.parts[o],n))}else{var a=[];for(o=0;o<i.parts.length;o++)a.push(b(i.parts[o],n));r[i.id]={id:i.id,refs:1,parts:a}}}}function h(t,n){for(var e=[],r={},i=0;i<t.length;i++){var f=t[i],o=n.base?f[0]+n.base:f[0],a={css:f[1],media:f[2],sourceMap:f[3]};r[o]?r[o].parts.push(a):e.push(r[o]={id:o,parts:[a]})}return e}function l(t,n){var e=f(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),u.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=f(t.insertInto+" "+t.insertAt.before);e.insertBefore(n,i)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=u.indexOf(t);n>=0&&u.splice(n,1)}function p(t){var n=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),_(n,t.attrs),l(t,n),n}function _(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function b(t,n){var e,r,i,f;if(n.transform&&t.css){if(!(f=n.transform(t.css)))return function(){};t.css=f}if(n.singleton){var u=a++;e=o||(o=p(n)),r=y.bind(null,e,u,!1),i=y.bind(null,e,u,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",_(n,t.attrs),l(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,f=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||f)&&(r=c(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,e,n),i=function(){d(e),e.href&&URL.revokeObjectURL(e.href)}):(e=p(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){d(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=i()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=h(t,n);return s(e,n),function(t){for(var i=[],f=0;f<e.length;f++){var o=e[f];(a=r[o.id]).refs--,i.push(a)}t&&s(h(t,n),n);for(f=0;f<i.length;f++){var a;if(0===(a=i[f]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete r[a.id]}}}};var v=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}();function y(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=v(n,i);else{var f=document.createTextNode(i),o=t.childNodes;o[n]&&t.removeChild(o[n]),o.length?t.insertBefore(f,o[n]):t.appendChild(f)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,f=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(f)?t:(i=0===f.indexOf("//")?f:0===f.indexOf("/")?e+f:r+f.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMvZGlzdC9wYWNrYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZGV2aWF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZXh0ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9xdWFudGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdHJhbnNwb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvemlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2F4aXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbG9jYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc291cmNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbW91c2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvdG91Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hjbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcG9seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvc2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9iYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9lbGFzdGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9jaG9yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvbm9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvY29udG91cnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2RlbnNpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy90c3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMveG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvYWRkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvY292ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Zpc2l0QWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0UHJlZml4QXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdEdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hZGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2FydGVzaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2JvdW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3JvdGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2ludEVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvcmVqb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvbHlnb25Db250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvYW50aW1lcmlkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvYm91bmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL21lYXN1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vcmVzYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWlkaXN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVpcmVjdGFuZ3VsYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9nbm9tb25pYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9jb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hBZnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEJlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc3VtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9hbmNlc3RvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2Rlc2NlbmRhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svZW5jbG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3JvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvZGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zcXVhcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3Jlc3F1YXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2h1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9ub3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvdW5pZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9pcndpbkhhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbG9nTm9ybWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvYmF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZXhwb25lbnRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9ob3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvY2F0ZWdvcnkxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9BY2NlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvRGFyazIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0My5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsR24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1NwZWN0cmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9HbkJ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvT3JSZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdVJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUmRQdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yQnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yUmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvQmx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JlZW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9PcmFuZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvcmFpbmJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS92aXJpZGlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmVSYWRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludFJhZGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9kaWFtb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3N0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3F1YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3RyaWFuZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3d5ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNPcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYnVuZGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbENsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbU9wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXJDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL25hdHVyYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L25vbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL1JlZEJsYWNrVHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9CZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRGlhZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyJdLCJuYW1lcyI6WyJhc2NlbmRpbmciLCJhIiwiYiIsIk5hTiIsImJpc2VjdG9yIiwiY29tcGFyZSIsImxlbmd0aCIsImYiLCJkIiwieCIsImFzY2VuZGluZ0NvbXBhcmF0b3IiLCJsZWZ0IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiYXNjZW5kaW5nQmlzZWN0IiwiYmlzZWN0UmlnaHQiLCJiaXNlY3QiLCJudW1iZXIiLCJ2YXJpYW5jZSIsInZhbHVlcyIsInZhbHVlb2YiLCJ2YWx1ZSIsImRlbHRhIiwibiIsIm0iLCJpIiwibWVhbiIsInN1bSIsImlzTmFOIiwiZGV2aWF0aW9uIiwiYXJyYXkiLCJ2IiwiTWF0aCIsInNxcnQiLCJzcmNfZXh0ZW50IiwibWluIiwibWF4IiwiYXJyYXlfYXJyYXkiLCJBcnJheSIsInByb3RvdHlwZSIsInNyY19yYW5nZSIsInNsaWNlIiwibWFwIiwic3RhcnQiLCJzdG9wIiwic3RlcCIsImFyZ3VtZW50cyIsImNlaWwiLCJyYW5nZSIsImUxMCIsImU1IiwiZTIiLCJ0aWNrcyIsImNvdW50IiwicmV2ZXJzZSIsInRpY2tJbmNyZW1lbnQiLCJpc0Zpbml0ZSIsImZsb29yIiwicG93ZXIiLCJsb2ciLCJMTjEwIiwiZXJyb3IiLCJwb3ciLCJ0aWNrU3RlcCIsInN0ZXAwIiwiYWJzIiwic3RlcDEiLCJzdHVyZ2VzIiwiTE4yIiwicXVhbnRpbGUiLCJwIiwiaTAiLCJ2YWx1ZTAiLCJzcmNfbWF4Iiwic3JjX21lcmdlIiwiYXJyYXlzIiwibWVyZ2VkIiwiaiIsInNyY19taW4iLCJzcmNfdHJhbnNwb3NlIiwibWF0cml4IiwidHJhbnNwb3NlX2xlbmd0aCIsInRyYW5zcG9zZSIsInJvdyIsImFycmF5X3NsaWNlIiwic3JjX2lkZW50aXR5IiwiYXhpc190b3AiLCJheGlzX3JpZ2h0IiwiYXhpc19ib3R0b20iLCJheGlzX2xlZnQiLCJlcHNpbG9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ5IiwiZW50ZXJpbmciLCJ0aGlzIiwiX19heGlzIiwiYXhpc19heGlzIiwib3JpZW50Iiwic2NhbGUiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwiayIsInRyYW5zZm9ybSIsImF4aXMiLCJjb250ZXh0IiwiYXBwbHkiLCJkb21haW4iLCJmb3JtYXQiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicG9zaXRpb24iLCJiYW5kd2lkdGgiLCJvZmZzZXQiLCJyb3VuZCIsImNvcHkiLCJzZWxlY3Rpb24iLCJwYXRoIiwic2VsZWN0QWxsIiwiZGF0YSIsInRpY2siLCJvcmRlciIsInRpY2tFeGl0IiwiZXhpdCIsInRpY2tFbnRlciIsImVudGVyIiwiYXBwZW5kIiwiYXR0ciIsImxpbmUiLCJzZWxlY3QiLCJ0ZXh0IiwibWVyZ2UiLCJpbnNlcnQiLCJ0cmFuc2l0aW9uIiwiZ2V0QXR0cmlidXRlIiwicGFyZW50Tm9kZSIsInJlbW92ZSIsImZpbHRlciIsImVhY2giLCJfIiwiY2FsbCIsInRpY2tTaXplIiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0Iiwibm9vcCIsImRpc3BhdGNoIiwidCIsIkVycm9yIiwiRGlzcGF0Y2giLCJnZXQiLCJ0eXBlIiwibmFtZSIsImMiLCJzZXQiLCJjYWxsYmFjayIsImNvbmNhdCIsInB1c2giLCJjb25zdHJ1Y3RvciIsIm9uIiwidHlwZW5hbWUiLCJUIiwidHlwZW5hbWVzIiwidHlwZXMiLCJ0cmltIiwic3BsaXQiLCJpbmRleE9mIiwiaGFzT3duUHJvcGVydHkiLCJwYXJzZVR5cGVuYW1lcyIsInRoYXQiLCJhcmdzIiwic3JjX2Rpc3BhdGNoIiwieGh0bWwiLCJuYW1lc3BhY2VzIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsIm5hbWVzcGFjZSIsInByZWZpeCIsInNwYWNlIiwibG9jYWwiLCJjcmVhdG9yIiwiZnVsbG5hbWUiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9uZSIsInNyY19zZWxlY3RvciIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsInNlbGVjdG9yQWxsX2VtcHR5Iiwic2VsZWN0b3JBbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJtYXRjaGVyX2VsZW1lbnQiLCJ2ZW5kb3JNYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwic3JjX21hdGNoZXIiLCJzcGFyc2UiLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsInNvcnRfYXNjZW5kaW5nIiwic3JjX3dpbmRvdyIsImRlZmF1bHRWaWV3Iiwic3R5bGVWYWx1ZSIsInN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInNldEF0dHJpYnV0ZSIsImpvaW4iLCJzcGxpY2UiLCJjb250YWlucyIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsIm9uX2V2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwiZXZlbnQiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwib25SZW1vdmUiLCJfX29uIiwibyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1c3RvbUV2ZW50Iiwic291cmNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwic2VsZWN0aW9uX3Jvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uX3NlbGVjdGlvbiIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsIm1hdGNoIiwic2l6ZSIsImJpbmQiLCJzcmNfY29uc3RhbnQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkxIiwiX2VudGVyIiwiX2V4aXQiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJzb3J0IiwiY29tcGFyZU5vZGUiLCJzb3J0Z3JvdXBzIiwic29ydGdyb3VwIiwibm9kZXMiLCJlbXB0eSIsImdldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsInByb3BlcnR5IiwiY2xhc3NlZCIsImh0bWwiLCJjcmVhdGUiLCJiZWZvcmUiLCJjbG9uZSIsImRlZXAiLCJvbl9wYXJzZVR5cGVuYW1lcyIsInNyY19zZWxlY3Rpb24iLCJzcmNfc2VsZWN0IiwibmV4dElkIiwiTG9jYWwiLCJ0b1N0cmluZyIsImlkIiwic291cmNlIiwiY3VycmVudCIsInNyY19wb2ludCIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwicG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50TGVmdCIsInRvcCIsImNsaWVudFRvcCIsIm1vdXNlIiwiY2hhbmdlZFRvdWNoZXMiLCJzcmNfdG91Y2giLCJ0b3VjaGVzIiwiaWRlbnRpZmllciIsInRvdWNoIiwibm9ldmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibm9kcmFnIiwidmlldyIsInJvb3QiLCJfX25vc2VsZWN0IiwiTW96VXNlclNlbGVjdCIsInllc2RyYWciLCJub2NsaWNrIiwic2V0VGltZW91dCIsIkRyYWdFdmVudCIsInRhcmdldCIsInN1YmplY3QiLCJhY3RpdmUiLCJkeCIsImR5IiwiZGVmaW5lIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJPYmplY3QiLCJDb2xvciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4MyIsInJlSGV4NiIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9jb2xvciIsInRvTG93ZXJDYXNlIiwiZXhlYyIsIlJnYiIsInBhcnNlSW50IiwicmdibiIsInJnYmEiLCJoc2xhIiwiciIsImciLCJyZ2JDb252ZXJ0IiwicmdiIiwib3BhY2l0eSIsImNvbG9yX3JnYiIsImhleCIsImgiLCJzIiwibCIsIkhzbCIsImhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTIiLCJkaXNwbGF5YWJsZSIsImJyaWdodGVyIiwiZGFya2VyIiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsImxhYl90MCIsImxhYl90MSIsImxhYl90MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImNvcyIsInNpbiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJoY2wiLCJDIiwiY3ViZWhlbGl4X0QiLCJjdWJlaGVsaXhfRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeF9jdWJlaGVsaXgiLCJDdWJlaGVsaXgiLCJibCIsImN1YmVoZWxpeENvbnZlcnQiLCJiYXNpcyIsInQxIiwidjAiLCJ2MSIsInYyIiwidjMiLCJ0MiIsImNvc2giLCJzaW5oIiwic3JjX2Jhc2lzIiwiYmFzaXNDbG9zZWQiLCJkM19pbnRlcnBvbGF0ZV9zcmNfY29uc3RhbnQiLCJsaW5lYXIiLCJjb2xvcl9odWUiLCJnYW1tYSIsIm5vZ2FtbWEiLCJleHBvbmVudGlhbCIsInJnYkdhbW1hIiwiY29sb3IiLCJlbmQiLCJyZ2JTcGxpbmUiLCJzcGxpbmUiLCJjb2xvcnMiLCJyZ2JCYXNpcyIsInNyY19hcnJheSIsIm5iIiwibmEiLCJzcmNfdmFsdWUiLCJzcmNfZGF0ZSIsIkRhdGUiLCJzZXRUaW1lIiwic3JjX251bWJlciIsInNyY19vYmplY3QiLCJyZUEiLCJyZUIiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwic3JjX3N0cmluZyIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsIm9uZSIsInN0cmluZ196ZXJvIiwic3JjX3JnYiIsImlzQXJyYXkiLCJ2YWx1ZU9mIiwic3JjX3JvdW5kIiwiZGVncmVlcyIsImRlY29tcG9zZV9pZGVudGl0eSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZGVjb21wb3NlIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInBvcCIsInhhIiwieWEiLCJ4YiIsInliIiwidHJhbnNsYXRlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsInJobyIsIlNRUlQyIiwiem9vbV9jb3NoIiwiZXhwIiwic3JjX3pvb20iLCJwMCIsInAxIiwiUyIsInV4MCIsInV5MCIsIncwIiwidXgxIiwidXkxIiwidzEiLCJkMiIsImQxIiwiYjAiLCJiMSIsInIwIiwicjEiLCJjb3NocjAiLCJ1IiwidGFuaCIsInpvb21fc2luaCIsImR1cmF0aW9uIiwiaHNsX2hzbCIsImh1ZSIsImhjbF9oY2wiLCJzcmNfY3ViZWhlbGl4X2N1YmVoZWxpeCIsImN1YmVoZWxpeEdhbW1hIiwiY3ViZWhlbGl4IiwiY3ViZWhlbGl4TG9uZyIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJ0aW1lcl9mcmFtZSIsInRpbWVvdXQiLCJ0aW1lcl9pbnRlcnZhbCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsInQwIiwiSW5maW5pdHkiLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJUeXBlRXJyb3IiLCJzcmNfdGltZW91dCIsImVsYXBzZWQiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJ0cmFuc2l0aW9uX3NjaGVkdWxlIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJlYXNlIiwic2NoZWR1bGVfY3JlYXRlIiwic2NoZWR1bGVfaW5pdCIsInNjaGVkdWxlIiwic2NoZWR1bGVfZ2V0Iiwic2NoZWR1bGVfc2V0IiwiaW50ZXJydXB0IiwidHdlZW5WYWx1ZSIsIl9pZCIsInRyYW5zaXRpb25faW50ZXJwb2xhdGUiLCJzZWxlY3Rpb25fU2VsZWN0aW9uIiwidHJhbnNpdGlvbl9pZCIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImN1YmljSW5PdXQiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJldmVyeSIsIm9uX3N0YXJ0Iiwib25GdW5jdGlvbiIsImF0dHJUd2VlbiIsImludGVycG9sYXRlIiwidmFsdWUwMCIsInZhbHVlMTAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTEiLCJfdmFsdWUiLCJzdHlsZVR3ZWVuIiwic3R5bGVfc3R5bGVSZW1vdmUiLCJzdHlsZVJlbW92ZUVuZCIsInN0eWxlX3N0eWxlRnVuY3Rpb24iLCJzdHlsZV9zdHlsZUNvbnN0YW50IiwidGV4dF90ZXh0RnVuY3Rpb24iLCJ0ZXh0X3RleHRDb25zdGFudCIsInJlbW92ZUZ1bmN0aW9uIiwidHdlZW4wIiwidHdlZW4xIiwiZWFzZUNvbnN0YW50IiwiY3VzdG9tIiwicG9seUluIiwiZXhwb25lbnQiLCJwb2x5T3V0IiwicG9seUluT3V0IiwiYmFja0luIiwib3ZlcnNob290IiwiYmFja091dCIsImJhY2tJbk91dCIsInRhdSIsImRlZmF1bHRUaW1pbmciLCJhc2luIiwiZWxhc3RpY0luIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiZWxhc3RpY091dCIsImVsYXN0aWNJbk91dCIsInRyYW5zaXRpb25faW5oZXJpdCIsImJydXNoX3R5cGUiLCJwYXRoX3BpIiwicGF0aF90YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsInBhdGhfcGF0aCIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ4MSIsInkxIiwiYmV6aWVyQ3VydmVUbyIsIngyIiwieTIiLCJhcmNUbyIsIngwIiwieTAiLCJ4MjEiLCJ5MjEiLCJ4MDEiLCJ5MDEiLCJsMDFfMiIsIngyMCIsInkyMCIsImwyMV8yIiwibDIwXzIiLCJsMjEiLCJsMDEiLCJhY29zIiwidDAxIiwidDIxIiwiYXJjIiwiYTAiLCJhMSIsImNjdyIsImN3IiwiZGEiLCJ3Iiwic3JjX3BhdGgiLCJNYXAiLCJtYXBfbWFwIiwib2JqZWN0IiwiaGFzIiwiY2xlYXIiLCJrZXlzIiwiZW50cmllcyIsInNyY19tYXAiLCJzcmNfbmVzdCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwic29ydEtleXMiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInZhbHVlc0J5S2V5IiwicmVzdWx0IiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwic29ydEtleSIsIlNldCIsInByb3RvIiwic2V0X3NldCIsImQzX2NvbnRvdXJfc3JjX2FycmF5X3NsaWNlIiwic3JjX2FzY2VuZGluZyIsInNyY19hcmVhIiwicmluZyIsImFyZWEiLCJkM19jb250b3VyX3NyY19jb25zdGFudCIsImhvbGUiLCJyaW5nQ29udGFpbnMiLCJwaSIsInhpIiwieWkiLCJwaiIsInhqIiwieWoiLCJzZWdtZW50Q29udGFpbnMiLCJjb2xsaW5lYXIiLCJ3aXRoaW4iLCJzcmNfbm9vcCIsImNhc2VzIiwic3JjX2NvbnRvdXJzIiwidGhyZXNob2xkIiwic21vb3RoIiwic21vb3RoTGluZWFyIiwiY29udG91cnMiLCJ0eiIsImNvbnRvdXIiLCJwb2x5Z29ucyIsImhvbGVzIiwiZnJhZ21lbnRCeVN0YXJ0IiwiZnJhZ21lbnRCeUVuZCIsImZvckVhY2giLCJzdGl0Y2giLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJ1bnNoaWZ0IiwiaXNvcmluZ3MiLCJwb2x5Z29uIiwiY29vcmRpbmF0ZXMiLCJ4dCIsInl0IiwiXzAiLCJfMSIsInRocmVzaG9sZHMiLCJFT0wiLCJFT0YiLCJRVU9URSIsIk5FV0xJTkUiLCJSRVRVUk4iLCJvYmplY3RDb252ZXJ0ZXIiLCJjb2x1bW5zIiwiRnVuY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiZHN2IiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJERUxJTUlURVIiLCJjaGFyQ29kZUF0IiwicGFyc2VSb3dzIiwicm93cyIsIk4iLCJJIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJyZXBsYWNlIiwiZm9ybWF0Um93IiwiZm9ybWF0VmFsdWUiLCJ0ZXN0IiwiY29udmVydCIsImN1c3RvbUNvbnZlcnRlciIsImNvbHVtblNldCIsImNvbHVtbiIsImluZmVyQ29sdW1ucyIsImZvcm1hdFJvd3MiLCJjc3YiLCJjc3ZQYXJzZSIsInRzdiIsInRzdlBhcnNlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJzcmNfdGV4dCIsImlucHV0IiwiaW5pdCIsImZldGNoIiwidGhlbiIsImRzdlBhcnNlIiwidW5kZWZpbmVkIiwiZHN2X2NzdiIsInBhcnNlciIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImFkZF9hZGQiLCJ0cmVlIiwieG0iLCJ5bSIsInhwIiwieXAiLCJib3R0b20iLCJfcm9vdCIsImxlYWYiLCJfeCIsIl95Iiwic3JjX3F1YWQiLCJ4X2RlZmF1bHRYIiwieV9kZWZhdWx0WSIsInF1YWR0cmVlIiwiUXVhZHRyZWUiLCJhZGRBbGwiLCJsZWFmX2NvcHkiLCJ0cmVlUHJvdG8iLCJjb3ZlciIsInh6IiwieXoiLCJ2aXNpdCIsImV4dGVudCIsImZpbmQiLCJyYWRpdXMiLCJ4MyIsInkzIiwicXVhZHMiLCJyZXRhaW5lciIsInJlbW92ZUFsbCIsInZpc2l0QWZ0ZXIiLCJmb3JtYXREZWNpbWFsIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50Iiwic3JjX2V4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwiemVybyIsIndpZHRoIiwiY29tbWEiLCJwcmVjaXNpb24iLCJwcmVmaXhFeHBvbmVudCIsImRlZmF1bHRMb2NhbGVfbG9jYWxlIiwiZGVmYXVsdExvY2FsZV9mb3JtYXQiLCJkZWZhdWx0TG9jYWxlX2Zvcm1hdFByZWZpeCIsImZvcm1hdFRyaW0iLCJvdXQiLCJmb3JtYXRSb3VuZGVkIiwiZm9ybWF0VHlwZXMiLCIlIiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiWCIsInRvVXBwZXJDYXNlIiwiZDNfZm9ybWF0X3NyY19pZGVudGl0eSIsInByZWZpeGVzIiwic3JjX2xvY2FsZSIsImxvY2FsZSIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwic3Vic3RyaW5nIiwiZm9ybWF0R3JvdXAiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm5ld0Zvcm1hdCIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwicGFkZGluZyIsImZvcm1hdFByZWZpeCIsImRlZmF1bHRMb2NhbGUiLCJwcmVjaXNpb25GaXhlZCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwiYWRkZXIiLCJBZGRlciIsInJlc2V0IiwiYWRkZXJfYWRkIiwidGVtcCIsImJ2IiwiYXYiLCJtYXRoX2Vwc2lsb24iLCJzcmNfbWF0aF9waSIsInNyY19tYXRoX2hhbGZQaSIsInF1YXJ0ZXJQaSIsInNyY19tYXRoX3RhdSIsIm1hdGhfZGVncmVlcyIsInJhZGlhbnMiLCJtYXRoX2NvcyIsIm1hdGhfc2luIiwibWF0aF9zaWduIiwibm9vcF9ub29wIiwic3RyZWFtR2VvbWV0cnkiLCJnZW9tZXRyeSIsInN0cmVhbSIsInN0cmVhbUdlb21ldHJ5VHlwZSIsInN0cmVhbU9iamVjdFR5cGUiLCJGZWF0dXJlIiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJmZWF0dXJlcyIsIlNwaGVyZSIsInNwaGVyZSIsIlBvaW50IiwiTXVsdGlQb2ludCIsIkxpbmVTdHJpbmciLCJzdHJlYW1MaW5lIiwiTXVsdGlMaW5lU3RyaW5nIiwiUG9seWdvbiIsInN0cmVhbVBvbHlnb24iLCJNdWx0aVBvbHlnb24iLCJHZW9tZXRyeUNvbGxlY3Rpb24iLCJnZW9tZXRyaWVzIiwiY2xvc2VkIiwiY29vcmRpbmF0ZSIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJwb2x5Z29uU3RhcnQiLCJwb2x5Z29uRW5kIiwic3JjX3N0cmVhbSIsImNhcnRlc2lhbl9zcGhlcmljYWwiLCJjYXJ0ZXNpYW4iLCJjYXJ0ZXNpYW5fY2FydGVzaWFuIiwic3BoZXJpY2FsIiwibGFtYmRhIiwicGhpIiwiY29zUGhpIiwiY2FydGVzaWFuRG90IiwiY2FydGVzaWFuQ3Jvc3MiLCJjYXJ0ZXNpYW5BZGRJblBsYWNlIiwiY2FydGVzaWFuU2NhbGUiLCJ2ZWN0b3IiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiY29tcG9zZSIsImludmVydCIsInJvdGF0aW9uSWRlbnRpdHkiLCJyb3RhdGVSYWRpYW5zIiwiZGVsdGFMYW1iZGEiLCJkZWx0YVBoaSIsImRlbHRhR2FtbWEiLCJyb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uUGhpR2FtbWEiLCJmb3J3YXJkUm90YXRpb25MYW1iZGEiLCJyb3RhdGlvbiIsImNvc0RlbHRhUGhpIiwic2luRGVsdGFQaGkiLCJjb3NEZWx0YUdhbW1hIiwic2luRGVsdGFHYW1tYSIsInNyY19yb3RhdGlvbiIsImZvcndhcmQiLCJjaXJjbGVTdHJlYW0iLCJkaXJlY3Rpb24iLCJjb3NSYWRpdXMiLCJzaW5SYWRpdXMiLCJjaXJjbGVSYWRpdXMiLCJjbGlwX2J1ZmZlciIsImxpbmVzIiwicmVqb2luIiwic2hpZnQiLCJwb2ludEVxdWFsIiwiSW50ZXJzZWN0aW9uIiwicG9pbnRzIiwib3RoZXIiLCJlbnRyeSIsInNlZ21lbnRzIiwiY29tcGFyZUludGVyc2VjdGlvbiIsInN0YXJ0SW5zaWRlIiwiY2xpcCIsInNlZ21lbnQiLCJyZWpvaW5fbGluayIsImlzU3ViamVjdCIsInBvbHlnb25Db250YWluc19zdW0iLCJwb2x5Z29uQ29udGFpbnMiLCJzaW5QaGkiLCJub3JtYWwiLCJhbmdsZSIsIndpbmRpbmciLCJwb2ludDAiLCJsYW1iZGEwIiwicGhpMCIsInNpblBoaTAiLCJjb3NQaGkwIiwibGFtYmRhMSIsInNpblBoaTEiLCJjb3NQaGkxIiwicG9pbnQxIiwicGhpMSIsImFic0RlbHRhIiwiYW50aW1lcmlkaWFuIiwiaW50ZXJzZWN0aW9uIiwicGhpQXJjIiwic3JjX2NsaXAiLCJwb2ludFZpc2libGUiLCJjbGlwTGluZSIsInNpbmsiLCJyaW5nQnVmZmVyIiwicmluZ1NpbmsiLCJwb2x5Z29uU3RhcnRlZCIsInBvaW50UmluZyIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJjbGlwX2NvbXBhcmVJbnRlcnNlY3Rpb24iLCJwb2ludExpbmUiLCJjbGVhbiIsInJpbmdTZWdtZW50cyIsInZhbGlkU2VnbWVudCIsInNpZ24wIiwic2lnbjEiLCJzaW5MYW1iZGEwTGFtYmRhMSIsImNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJmcm9tIiwidG8iLCJjbGlwX2NpcmNsZSIsImNyIiwic21hbGxSYWRpdXMiLCJub3RIZW1pc3BoZXJlIiwidmlzaWJsZSIsImludGVyc2VjdCIsInR3byIsIm4xIiwibjIiLCJuMm4yIiwibjFuMiIsImRldGVybWluYW50IiwiYzEiLCJjMiIsIm4xeG4yIiwiQSIsInV1IiwicG9sYXIiLCJxMSIsImNvZGUiLCJjMCIsInYwMCIsInBvaW50MiIsImNsaXBfbGluZSIsImF4IiwiYXkiLCJjbGlwTWF4IiwiY2xpcE1pbiIsImNsaXBSZWN0YW5nbGUiLCJjb3JuZXIiLCJjb21wYXJlUG9pbnQiLCJjYSIsImNiIiwieF9fIiwieV9fIiwidl9fIiwieF8iLCJ5XyIsInZfIiwiZmlyc3QiLCJhY3RpdmVTdHJlYW0iLCJidWZmZXJTdHJlYW0iLCJjbGlwU3RyZWFtIiwibGluZVBvaW50IiwicG9seWdvbkluc2lkZSIsImNsZWFuSW5zaWRlIiwibGVuZ3RoX2xhbWJkYTAiLCJsZW5ndGhfc2luUGhpMCIsImxlbmd0aF9jb3NQaGkwIiwibGVuZ3RoU3VtIiwibGVuZ3RoU3RyZWFtIiwibGVuZ3RoUG9pbnRGaXJzdCIsImxlbmd0aExpbmVFbmQiLCJsZW5ndGhQb2ludCIsImNvc0RlbHRhIiwic3JjX2xlbmd0aCIsImRpc3RhbmNlX2Nvb3JkaW5hdGVzIiwiZGlzdGFuY2Vfb2JqZWN0Iiwic3JjX2Rpc3RhbmNlIiwiZDNfZ2VvX3NyY19pZGVudGl0eSIsImJvdW5kc194MCIsImJvdW5kc195MCIsImJvdW5kc194MSIsImJvdW5kc195MSIsInBhdGhfYm91bmRzIiwiYm91bmRzIiwiUGF0aENvbnRleHQiLCJfY29udGV4dCIsIl9yYWRpdXMiLCJwb2ludFJhZGl1cyIsIl9saW5lIiwiX3BvaW50IiwiUGF0aFN0cmluZyIsIl9zdHJpbmciLCJzdHJpbmdfY2lyY2xlIiwiX2NpcmNsZSIsInRyYW5zZm9ybWVyIiwibWV0aG9kcyIsIlRyYW5zZm9ybVN0cmVhbSIsImZpdCIsInByb2plY3Rpb24iLCJmaXRCb3VuZHMiLCJjbGlwRXh0ZW50IiwiZml0RXh0ZW50IiwiZml0U2l6ZSIsImZpdFdpZHRoIiwiZml0SGVpZ2h0IiwiaGVpZ2h0IiwibWF4RGVwdGgiLCJjb3NNaW5EaXN0YW5jZSIsInJlc2FtcGxlIiwicHJvamVjdCIsImRlbHRhMiIsInJlc2FtcGxlTGluZVRvIiwicGhpMiIsImxhbWJkYTIiLCJkeDIiLCJkeTIiLCJkeiIsImxhbWJkYTAwIiwieDAwIiwieTAwIiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJyZXNhbXBsZV9yZXNhbXBsZSIsInJlc2FtcGxlTm9uZSIsInRyYW5zZm9ybVJhZGlhbnMiLCJzY2FsZVRyYW5zbGF0ZVJvdGF0ZSIsImFscGhhIiwiY29zQWxwaGEiLCJzaW5BbHBoYSIsImFpIiwiY2kiLCJmaSIsInByb2plY3Rpb25fcHJvamVjdGlvbiIsInByb2plY3Rpb25NdXRhdG9yIiwicHJvamVjdEF0IiwicHJvamVjdFJlc2FtcGxlIiwicHJvamVjdFRyYW5zZm9ybSIsInByb2plY3RSb3RhdGVUcmFuc2Zvcm0iLCJjYWNoZSIsImNhY2hlU3RyZWFtIiwidGhldGEiLCJwcmVjbGlwIiwiY2xpcF9hbnRpbWVyaWRpYW4iLCJwb3N0Y2xpcCIsInJlY2VudGVyIiwiY2VudGVyIiwidHJhbnNmb3JtUm90YXRlIiwiY2xpcEFuZ2xlIiwiY29uaWNQcm9qZWN0aW9uIiwicGFyYWxsZWxzIiwiY29uaWNFcXVhbEFyZWFSYXciLCJzeTAiLCJjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyIsInIweSIsImNvbmljRXF1YWxBcmVhIiwiYWxiZXJzIiwiYXppbXV0aGFsUmF3IiwiY3giLCJjeSIsImF6aW11dGhhbEludmVydCIsInNjIiwiY2MiLCJhemltdXRoYWxFcXVhbEFyZWFSYXciLCJjeGN5IiwiYXppbXV0aGFsRXF1aWRpc3RhbnRSYXciLCJtZXJjYXRvclJhdyIsImVxdWlyZWN0YW5ndWxhclJhdyIsImdub21vbmljUmF3IiwibmF0dXJhbEVhcnRoMVJhdyIsInBoaTQiLCJvcnRob2dyYXBoaWNSYXciLCJzdGVyZW9ncmFwaGljUmF3IiwidHJhbnN2ZXJzZU1lcmNhdG9yUmF3IiwiY291bnRfY291bnQiLCJoaWVyYXJjaHkiLCJjaGlsZHMiLCJOb2RlIiwidmFsdWVkIiwiZGVmYXVsdENoaWxkcmVuIiwiZWFjaEJlZm9yZSIsImNvbXB1dGVIZWlnaHQiLCJjb3B5RGF0YSIsImVhY2hBZnRlciIsImFuY2VzdG9yIiwiYU5vZGVzIiwiYW5jZXN0b3JzIiwiYk5vZGVzIiwibGVhc3RDb21tb25BbmNlc3RvciIsImRlc2NlbmRhbnRzIiwibGVhdmVzIiwibGlua3MiLCJkM19oaWVyYXJjaHlfc3JjX2FycmF5X3NsaWNlIiwiZW5jbG9zZSIsImNpcmNsZXMiLCJyYW5kb20iLCJhcnJheV9zaHVmZmxlIiwiQiIsImVuY2xvc2VzV2VhayIsImVuY2xvc2VCYXNpcyIsImV4dGVuZEJhc2lzIiwiZW5jbG9zZXNXZWFrQWxsIiwiZW5jbG9zZXNOb3QiLCJlbmNsb3NlQmFzaXMyIiwiZW5jbG9zZUJhc2lzMyIsImRyIiwiZW5jbG9zZUJhc2lzMSIsInIyIiwicjIxIiwicjMiLCJhMiIsImEzIiwiYjIiLCJiMyIsImMzIiwiZDMiLCJhYiIsImRpY2UiLCJUcmVlTm9kZSIsInRyZWVtYXBfc2xpY2UiLCJzcXVhcmlmeV9waGkiLCJzcXVhcmlmeVJhdGlvIiwicmF0aW8iLCJub2RlVmFsdWUiLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiYmV0YSIsInNxdWFyaWZ5IiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsInNyY19kZWZhdWx0U291cmNlIiwic3JjX25vcm1hbCIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Vbmlmb3JtIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsImlyd2luSGFsbCIsInNvdXJjZVJhbmRvbUxvZ05vcm1hbCIsInJhbmRvbUxvZ05vcm1hbCIsInNvdXJjZVJhbmRvbUlyd2luSGFsbCIsInJhbmRvbUlyd2luSGFsbCIsImQzX3NjYWxlX3NyY19hcnJheV9hcnJheSIsInNvdXJjZVJhbmRvbUJhdGVzIiwicmFuZG9tQmF0ZXMiLCJzb3VyY2VSYW5kb21FeHBvbmVudGlhbCIsInJhbmRvbUV4cG9uZW50aWFsIiwiYXJyYXlfbWFwIiwiZDNfc2NhbGVfc3JjX2FycmF5X3NsaWNlIiwiaW1wbGljaXQiLCJvcmRpbmFsIiwidW5rbm93biIsImJhbmQiLCJvcmRpbmFsUmFuZ2UiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJyZXNjYWxlIiwicmFuZ2VSb3VuZCIsImQzX3NjYWxlX3NyY19jb25zdGFudCIsImQzX3NjYWxlX3NyY19udW1iZXIiLCJ1bml0IiwiZGVpbnRlcnBvbGF0ZUxpbmVhciIsImJpbWFwIiwiZGVpbnRlcnBvbGF0ZSIsInJlaW50ZXJwb2xhdGUiLCJkMCIsInBvbHltYXAiLCJjbGFtcCIsImNvbnRpbnVvdXMiLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJkZWludGVycG9sYXRlQ2xhbXAiLCJyZWludGVycG9sYXRlQ2xhbXAiLCJzcmNfdGlja0Zvcm1hdCIsImxpbmVhcmlzaCIsIm5pY2UiLCJzcmNfbGluZWFyX2xpbmVhciIsImludGVydmFsX3QwIiwiaW50ZXJ2YWxfdDEiLCJuZXdJbnRlcnZhbCIsImZsb29yaSIsIm9mZnNldGkiLCJmaWVsZCIsImludGVydmFsIiwiZGF0ZSIsIm1pbGxpc2Vjb25kX21pbGxpc2Vjb25kIiwic3JjX21pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJzZWNvbmRfc2Vjb25kIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbnV0ZV9taW51dGUiLCJnZXRNaW51dGVzIiwiaG91cl9ob3VyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRIb3VycyIsInNyY19ob3VyIiwiZGF5X2RheSIsInNldEhvdXJzIiwic2V0RGF0ZSIsImdldERhdGUiLCJzcmNfZGF5Iiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5IiwibW9udGhfbW9udGgiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJzcmNfbW9udGgiLCJ5ZWFyX3llYXIiLCJzZXRGdWxsWWVhciIsInNyY195ZWFyIiwidXRjTWludXRlIiwic2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJzcmNfdXRjTWludXRlIiwidXRjSG91ciIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENIb3VycyIsInNyY191dGNIb3VyIiwidXRjRGF5Iiwic2V0VVRDSG91cnMiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwic3JjX3V0Y01vbnRoIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3JjX3V0Y1llYXIiLCJsb2NhbERhdGUiLCJIIiwiTSIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3WWVhciIsImZvcm1hdExvY2FsZSIsImxvY2FsZV9kYXRlVGltZSIsImRhdGVUaW1lIiwibG9jYWxlX2RhdGUiLCJsb2NhbGVfdGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwiZm9ybWF0UmUiLCJwZXJpb2RMb29rdXAiLCJmb3JtYXRMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJRIiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJVIiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsIlYiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsIlciLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwibG9jYWxlX2Zvcm1hdFllYXIiLCJZIiwiZm9ybWF0RnVsbFllYXIiLCJaIiwiZm9ybWF0Wm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwidXRjRm9ybWF0cyIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlSG91cjI0IiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVySVNPIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2VZZWFyIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWm9uZSIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYWQiLCJwYWRzIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwid2VlayIsImRheSIsInNyY191dGNEYXkiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInNyY19kZWZhdWx0TG9jYWxlX2xvY2FsZSIsInRpbWVGb3JtYXQiLCItIiwiMCIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicmVxdW90ZSIsImdldE1pbGxpc2Vjb25kcyIsImdldFNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJkb3ciLCJkZWZhdWx0TG9jYWxlX2RlZmF1bHRMb2NhbGUiLCJ0b0lTT1N0cmluZyIsInNyY19jb2xvcnMiLCJyYW1wIiwic2NoZW1lIiwidmlyaWRpc19yYW1wIiwiZDNfc2hhcGVfc3JjX2NvbnN0YW50Iiwic3JjX21hdGhfZXBzaWxvbiIsImQzX3NoYXBlX3NyY19tYXRoX3BpIiwiZDNfc2hhcGVfc3JjX21hdGhfdGF1IiwiTGluZWFyIiwiYXJlYVN0YXJ0IiwiYXJlYUVuZCIsImN1cnZlX2xpbmVhciIsInBvaW50X3giLCJwb2ludF95IiwiZGVmaW5lZCIsImN1cnZlIiwiYnVmZmVyIiwiZGVmaW5lZDAiLCJkM19zaGFwZV9zcmNfYXJlYSIsIngweiIsInkweiIsImFyZWFsaW5lIiwic3JjX2xpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJjdXJ2ZVJhZGlhbCIsIlJhZGlhbCIsIl9jdXJ2ZSIsInJhZGlhbCIsInBvaW50UmFkaWFsIiwic3ltYm9sX2NpcmNsZSIsImRyYXciLCJzeW1ib2xfY3Jvc3MiLCJ0YW4zMCIsInRhbjMwXzIiLCJkaWFtb25kIiwia3IiLCJzdGFyX2t4Iiwic3Rhcl9reSIsInN0YXIiLCJzcXVhcmUiLCJzcXJ0MyIsInRyaWFuZ2xlIiwid3llX3MiLCJ3eWVfayIsInd5ZV9hIiwid3llIiwiZDNfc2hhcGVfc3JjX25vb3AiLCJiYXNpc19wb2ludCIsIkJhc2lzIiwiQmFzaXNDbG9zZWQiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJCYXNpc09wZW4iLCJCdW5kbGUiLCJfYmFzaXMiLCJfYmV0YSIsImJ1bmRsZSIsImNhcmRpbmFsX3BvaW50IiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiQ2FyZGluYWxPcGVuIiwiY2F0bXVsbFJvbV9wb2ludCIsIl9sMDFfYSIsIl9sMDFfMmEiLCJfbDEyX2EiLCJfbDEyXzJhIiwiX2wyM19hIiwiX2wyM18yYSIsIkNhdG11bGxSb20iLCJfYWxwaGEiLCJ4MjMiLCJ5MjMiLCJjYXRtdWxsUm9tIiwiQ2F0bXVsbFJvbUNsb3NlZCIsIkNhdG11bGxSb21PcGVuIiwiTGluZWFyQ2xvc2VkIiwibW9ub3RvbmVfc2lnbiIsInNsb3BlMyIsImgwIiwiaDEiLCJzMCIsInMxIiwic2xvcGUyIiwibW9ub3RvbmVfcG9pbnQiLCJNb25vdG9uZVgiLCJNb25vdG9uZVkiLCJSZWZsZWN0Q29udGV4dCIsIk5hdHVyYWwiLCJjb250cm9sUG9pbnRzIiwiX3QwIiwicHgiLCJweSIsIlN0ZXAiLCJfdCIsIm9mZnNldF9ub25lIiwic2VyaWVzIiwib3JkZXJfbm9uZSIsIm9yZGVyX2FzY2VuZGluZyIsInN1bXMiLCJhc2NlbmRpbmdfc3VtIiwiUmVkQmxhY2tUcmVlIiwiUmVkQmxhY2tOb2RlIiwiUiIsIlAiLCJSZWRCbGFja1JvdGF0ZUxlZnQiLCJSZWRCbGFja1JvdGF0ZVJpZ2h0IiwiUmVkQmxhY2tGaXJzdCIsImFmdGVyIiwiZ3JhbmRwYSIsInVuY2xlIiwic2libGluZyIsInNyY19SZWRCbGFja1RyZWUiLCJjcmVhdGVFZGdlIiwiZWRnZSIsIkRpYWdyYW1fZWRnZXMiLCJzZXRFZGdlRW5kIiwiY2VsbHMiLCJoYWxmZWRnZXMiLCJjcmVhdGVCb3JkZXJFZGdlIiwidmVydGV4IiwiY2xpcEVkZ2UiLCJjb25uZWN0RWRnZSIsImZtIiwiZmIiLCJseCIsImx5IiwicngiLCJyeSIsImZ4IiwiZnkiLCJjZWxsSGFsZmVkZ2VBbmdsZSIsImNlbGwiLCJzaXRlIiwidmEiLCJ2YiIsImNlbGxIYWxmZWRnZVN0YXJ0IiwiY2VsbEhhbGZlZGdlRW5kIiwiZmlyc3RDaXJjbGUiLCJjaXJjbGVQb29sIiwiYXR0YWNoQ2lyY2xlIiwibEFyYyIsInJBcmMiLCJsU2l0ZSIsImNTaXRlIiwiclNpdGUiLCJieCIsImJ5IiwiRGlhZ3JhbV9lcHNpbG9uMiIsImhhIiwiaGMiLCJjaXJjbGUiLCJEaWFncmFtX2NpcmNsZXMiLCJkZXRhY2hDaXJjbGUiLCJiZWFjaFBvb2wiLCJjcmVhdGVCZWFjaCIsImJlYWNoIiwiZGV0YWNoQmVhY2giLCJiZWFjaGVzIiwicmVtb3ZlQmVhY2giLCJkaXNhcHBlYXJpbmciLCJEaWFncmFtX2Vwc2lsb24iLCJpQXJjIiwibkFyY3MiLCJhZGRCZWFjaCIsImR4bCIsImR4ciIsImRpcmVjdHJpeCIsImxlZnRCcmVha1BvaW50IiwicmlnaHRCcmVha1BvaW50IiwiY3JlYXRlQ2VsbCIsIm5ld0FyYyIsImhiIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJ0cmlhbmdsZUFyZWEiLCJsZXhpY29ncmFwaGljIiwiRGlhZ3JhbSIsInNpdGVzIiwic29ydENlbGxIYWxmZWRnZXMiLCJjbGlwRWRnZXMiLCJpQ2VsbCIsImlIYWxmZWRnZSIsIm5IYWxmZWRnZXMiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsIm5DZWxscyIsImRjIiwidjAxIiwidjExIiwidjEwIiwiY2xpcENlbGxzIiwiZWRnZXMiLCJ0cmlhbmdsZXMiLCJlMSIsIl9mb3VuZCIsInZ4IiwidnkiLCJUcmFuc2Zvcm0iLCJhcHBseVgiLCJhcHBseVkiLCJsb2NhdGlvbiIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJyZXNjYWxlWSIsInRyYW5zZm9ybV9pZGVudGl0eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2VTb3VyY2VNYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImZuIiwibWVtbyIsIm1lbW9pemUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJpZHgiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhdHRycyIsImFkZEF0dHJzIiwiZWwiLCJvYmoiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY2hpbGROb2RlcyIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJs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LElBQUlyRCxFQUE2QixvQkFBWGxsRCxRQUEwQkEsT0FBT2tsRCxTQUV2RCxJQUFLQSxFQUNILE1BQU0sSUFBSWx1RCxNQUFNLG9DQUluQixJQUFLdXhELEdBQXNCLGlCQUFSQSxFQUNqQixPQUFPQSxFQUdSLElBQUl1QyxFQUFVNUYsRUFBUzZGLFNBQVcsS0FBTzdGLEVBQVM4RixLQUM5Q0MsRUFBYUgsRUFBVTVGLEVBQVNnRyxTQUFTdGdDLFFBQVEsWUFBYSxLQTJEbkUsT0EvQmUyOUIsRUFBSTM5QixRQUFRLHNEQUF1RCxTQUFTdWdDLEVBQVdDLEdBRXJHLElBV0lDLEVBWEFDLEVBQWtCRixFQUNwQnB6RCxPQUNBNHlCLFFBQVEsV0FBWSxTQUFTdHJCLEVBQUdpc0QsR0FBSyxPQUFPQSxJQUM1QzNnQyxRQUFRLFdBQVksU0FBU3RyQixFQUFHaXNELEdBQUssT0FBT0EsSUFHOUMsTUFBSSxvREFBb0R4Z0MsS0FBS3VnQyxHQUNwREgsR0FRUkUsRUFGcUMsSUFBbENDLEVBQWdCcHpELFFBQVEsTUFFbEJvekQsRUFDa0MsSUFBakNBLEVBQWdCcHpELFFBQVEsS0FFekI0eUQsRUFBVVEsRUFHVkwsRUFBYUssRUFBZ0IxZ0MsUUFBUSxRQUFTLElBSWpELE9BQVNkLEtBQUtDLFVBQVVzaEMsR0FBVSIsImZpbGUiOiJ2ZW5kb3JzfmluZGV4LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgbmFtZSA9IFwiZDNcIjtcbmV4cG9ydCB2YXIgdmVyc2lvbiA9IFwiNS41LjBcIjtcbmV4cG9ydCB2YXIgZGVzY3JpcHRpb24gPSBcIkRhdGEtRHJpdmVuIERvY3VtZW50c1wiO1xuZXhwb3J0IHZhciBrZXl3b3JkcyA9IFtcImRvbVwiLFwidmlzdWFsaXphdGlvblwiLFwic3ZnXCIsXCJhbmltYXRpb25cIixcImNhbnZhc1wiXTtcbmV4cG9ydCB2YXIgaG9tZXBhZ2UgPSBcImh0dHBzOi8vZDNqcy5vcmdcIjtcbmV4cG9ydCB2YXIgbGljZW5zZSA9IFwiQlNELTMtQ2xhdXNlXCI7XG5leHBvcnQgdmFyIGF1dGhvciA9IHtcIm5hbWVcIjpcIk1pa2UgQm9zdG9ja1wiLFwidXJsXCI6XCJodHRwczovL2Jvc3Qub2Nrcy5vcmcvbWlrZVwifTtcbmV4cG9ydCB2YXIgbWFpbiA9IFwiZGlzdC9kMy5ub2RlLmpzXCI7XG5leHBvcnQgdmFyIHVucGtnID0gXCJkaXN0L2QzLm1pbi5qc1wiO1xuZXhwb3J0IHZhciBqc2RlbGl2ciA9IFwiZGlzdC9kMy5taW4uanNcIjtcbmV4cG9ydCB2YXIgbW9kdWxlID0gXCJpbmRleFwiO1xuZXhwb3J0IHZhciByZXBvc2l0b3J5ID0ge1widHlwZVwiOlwiZ2l0XCIsXCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy5naXRcIn07XG5leHBvcnQgdmFyIHNjcmlwdHMgPSB7XCJwcmV0ZXN0XCI6XCJyaW1yYWYgZGlzdCAmJiBta2RpciBkaXN0ICYmIGpzb24ybW9kdWxlIHBhY2thZ2UuanNvbiA+IGRpc3QvcGFja2FnZS5qcyAmJiBub2RlIHJvbGx1cC5ub2RlXCIsXCJ0ZXN0XCI6XCJ0YXBlICd0ZXN0LyoqLyotdGVzdC5qcydcIixcInByZXB1Ymxpc2hPbmx5XCI6XCJucG0gcnVuIHRlc3QgJiYgcm9sbHVwIC1jIC0tYmFubmVyIFxcXCIkKHByZWFtYmxlKVxcXCIgJiYgdWdsaWZ5anMgLWIgYmVhdXRpZnk9ZmFsc2UscHJlYW1ibGU9XFxcIickKHByZWFtYmxlKSdcXFwiIGRpc3QvZDMuanMgLWMgbmVnYXRlX2lpZmU9ZmFsc2UgLW0gLW8gZGlzdC9kMy5taW4uanNcIixcInBvc3RwdWJsaXNoXCI6XCJnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLi4vZDMuZ2l0aHViLmNvbSAmJiBnaXQgcHVsbCAmJiBjcCAuLi9kMy9kaXN0L2QzLmpzIGQzLnY1LmpzICYmIGNwIC4uL2QzL2Rpc3QvZDMubWluLmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgYWRkIGQzLnY1LmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCJkMyAke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgcHVzaCAmJiBjZCAtICYmIGNkIC4uL2QzLWJvd2VyICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL0xJQ0VOU0UgLi4vZDMvUkVBRE1FLm1kIC4uL2QzL2Rpc3QvZDMuanMgLi4vZDMvZGlzdC9kMy5taW4uanMgLiAmJiBnaXQgYWRkIC0tIExJQ0VOU0UgUkVBRE1FLm1kIGQzLmpzIGQzLm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgdGFnIC1hbSBcXFwiJHtucG1fcGFja2FnZV92ZXJzaW9ufVxcXCIgdiR7bnBtX3BhY2thZ2VfdmVyc2lvbn0gJiYgZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzICYmIGNkIC0gJiYgemlwIC1qIGRpc3QvZDMuemlwIC0tIExJQ0VOU0UgUkVBRE1FLm1kIEFQSS5tZCBDSEFOR0VTLm1kIGRpc3QvZDMuanMgZGlzdC9kMy5taW4uanNcIn07XG5leHBvcnQgdmFyIGRldkRlcGVuZGVuY2llcyA9IHtcImpzb24ybW9kdWxlXCI6XCIwLjBcIixcInBhY2thZ2UtcHJlYW1ibGVcIjpcIjAuMVwiLFwicmltcmFmXCI6XCIyXCIsXCJyb2xsdXBcIjpcIjAuNTdcIixcInJvbGx1cC1wbHVnaW4tYXNjaWlcIjpcIjAuMFwiLFwicm9sbHVwLXBsdWdpbi1ub2RlLXJlc29sdmVcIjpcIjNcIixcInRhcGVcIjpcIjRcIixcInVnbGlmeS1qc1wiOlwiMy4yXCJ9O1xuZXhwb3J0IHZhciBkZXBlbmRlbmNpZXMgPSB7XCJkMy1hcnJheVwiOlwiMVwiLFwiZDMtYXhpc1wiOlwiMVwiLFwiZDMtYnJ1c2hcIjpcIjFcIixcImQzLWNob3JkXCI6XCIxXCIsXCJkMy1jb2xsZWN0aW9uXCI6XCIxXCIsXCJkMy1jb2xvclwiOlwiMVwiLFwiZDMtY29udG91clwiOlwiMVwiLFwiZDMtZGlzcGF0Y2hcIjpcIjFcIixcImQzLWRyYWdcIjpcIjFcIixcImQzLWRzdlwiOlwiMVwiLFwiZDMtZWFzZVwiOlwiMVwiLFwiZDMtZmV0Y2hcIjpcIjFcIixcImQzLWZvcmNlXCI6XCIxXCIsXCJkMy1mb3JtYXRcIjpcIjFcIixcImQzLWdlb1wiOlwiMVwiLFwiZDMtaGllcmFyY2h5XCI6XCIxXCIsXCJkMy1pbnRlcnBvbGF0ZVwiOlwiMVwiLFwiZDMtcGF0aFwiOlwiMVwiLFwiZDMtcG9seWdvblwiOlwiMVwiLFwiZDMtcXVhZHRyZWVcIjpcIjFcIixcImQzLXJhbmRvbVwiOlwiMVwiLFwiZDMtc2NhbGVcIjpcIjJcIixcImQzLXNjYWxlLWNocm9tYXRpY1wiOlwiMVwiLFwiZDMtc2VsZWN0aW9uXCI6XCIxXCIsXCJkMy1zaGFwZVwiOlwiMVwiLFwiZDMtdGltZVwiOlwiMVwiLFwiZDMtdGltZS1mb3JtYXRcIjpcIjJcIixcImQzLXRpbWVyXCI6XCIxXCIsXCJkMy10cmFuc2l0aW9uXCI6XCIxXCIsXCJkMy12b3Jvbm9pXCI6XCIxXCIsXCJkMy16b29tXCI6XCIxXCJ9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImltcG9ydCB7cGFpcn0gZnJvbSBcIi4vcGFpcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzMCwgdmFsdWVzMSwgcmVkdWNlKSB7XG4gIHZhciBuMCA9IHZhbHVlczAubGVuZ3RoLFxuICAgICAgbjEgPSB2YWx1ZXMxLmxlbmd0aCxcbiAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuMCAqIG4xKSxcbiAgICAgIGkwLFxuICAgICAgaTEsXG4gICAgICBpLFxuICAgICAgdmFsdWUwO1xuXG4gIGlmIChyZWR1Y2UgPT0gbnVsbCkgcmVkdWNlID0gcGFpcjtcblxuICBmb3IgKGkwID0gaSA9IDA7IGkwIDwgbjA7ICsraTApIHtcbiAgICBmb3IgKHZhbHVlMCA9IHZhbHVlczBbaTBdLCBpMSA9IDA7IGkxIDwgbjE7ICsraTEsICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gcmVkdWNlKHZhbHVlMCwgdmFsdWVzMVtpMV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IDAsXG4gICAgICBpID0gLTEsXG4gICAgICBtZWFuID0gMCxcbiAgICAgIHZhbHVlLFxuICAgICAgZGVsdGEsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG0gPiAxKSByZXR1cm4gc3VtIC8gKG0gLSAxKTtcbn1cbiIsImltcG9ydCB2YXJpYW5jZSBmcm9tIFwiLi92YXJpYW5jZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcbiAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFttaW4sIG1heF07XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHZhbHVlb2YgPSBudW1iZXI7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHZhciBuID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgIG0sXG4gICAgICBpID0gLTEsXG4gICAgICBqID0gMCxcbiAgICAgIG1lcmdlZCxcbiAgICAgIGFycmF5O1xuXG4gIHdoaWxlICgrK2kgPCBuKSBqICs9IGFycmF5c1tpXS5sZW5ndGg7XG4gIG1lcmdlZCA9IG5ldyBBcnJheShqKTtcblxuICB3aGlsZSAoLS1uID49IDApIHtcbiAgICBhcnJheSA9IGFycmF5c1tuXTtcbiAgICBtID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlICgtLW0gPj0gMCkge1xuICAgICAgbWVyZ2VkWy0tal0gPSBhcnJheVttXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn1cbiIsImltcG9ydCBtaW4gZnJvbSBcIi4vbWluXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdHJpeCkge1xuICBpZiAoIShuID0gbWF0cml4Lmxlbmd0aCkpIHJldHVybiBbXTtcbiAgZm9yICh2YXIgaSA9IC0xLCBtID0gbWluKG1hdHJpeCwgbGVuZ3RoKSwgdHJhbnNwb3NlID0gbmV3IEFycmF5KG0pOyArK2kgPCBtOykge1xuICAgIGZvciAodmFyIGogPSAtMSwgbiwgcm93ID0gdHJhbnNwb3NlW2ldID0gbmV3IEFycmF5KG4pOyArK2ogPCBuOykge1xuICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJhbnNwb3NlO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgoZCkge1xuICByZXR1cm4gZC5sZW5ndGg7XG59XG4iLCJpbXBvcnQgdHJhbnNwb3NlIGZyb20gXCIuL3RyYW5zcG9zZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRyYW5zcG9zZShhcmd1bWVudHMpO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHggKyAwLjUpICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKHkgKyAwLjUpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgMC41LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpKSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybShwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxuICAgICAgICAgICAgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyXG4gICAgICAgICAgICA6IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwidmFyIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIWVsZW1lbnQubWF0Y2hlcykge1xuICAgIHZhciB2ZW5kb3JNYXRjaGVzID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm9NYXRjaGVzU2VsZWN0b3I7XG4gICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2ZW5kb3JNYXRjaGVzLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsInZhciBuZXh0SWQgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2NhbCgpIHtcbiAgcmV0dXJuIG5ldyBMb2NhbDtcbn1cblxuZnVuY3Rpb24gTG9jYWwoKSB7XG4gIHRoaXMuXyA9IFwiQFwiICsgKCsrbmV4dElkKS50b1N0cmluZygzNik7XG59XG5cbkxvY2FsLnByb3RvdHlwZSA9IGxvY2FsLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExvY2FsLFxuICBnZXQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl87XG4gICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgcmV0dXJuIG5vZGVbaWRdO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5vZGVbdGhpcy5fXSA9IHZhbHVlO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fIGluIG5vZGUgJiYgZGVsZXRlIG5vZGVbdGhpcy5fXTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiLi9zZWxlY3Rpb24vb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50ID0gZXZlbnQsIHNvdXJjZTtcbiAgd2hpbGUgKHNvdXJjZSA9IGN1cnJlbnQuc291cmNlRXZlbnQpIGN1cnJlbnQgPSBzb3VyY2U7XG4gIHJldHVybiBjdXJyZW50O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgZXZlbnQpIHtcbiAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG5cbiAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgfVxuXG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHZhciBldmVudCA9IHNvdXJjZUV2ZW50KCk7XG4gIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgcmV0dXJuIHBvaW50KG5vZGUsIGV2ZW50KTtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBpZGVudGlmaWVyID0gdG91Y2hlcywgdG91Y2hlcyA9IHNvdXJjZUV2ZW50KCkuY2hhbmdlZFRvdWNoZXM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzID8gdG91Y2hlcy5sZW5ndGggOiAwLCB0b3VjaDsgaSA8IG47ICsraSkge1xuICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gcG9pbnQobm9kZSwgdG91Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEcmFnRXZlbnQodGFyZ2V0LCB0eXBlLCBzdWJqZWN0LCBpZCwgYWN0aXZlLCB4LCB5LCBkeCwgZHksIGRpc3BhdGNoKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICB0aGlzLmlkZW50aWZpZXIgPSBpZDtcbiAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG4gIHRoaXMuZHggPSBkeDtcbiAgdGhpcy5keSA9IGR5O1xuICB0aGlzLl8gPSBkaXNwYXRjaDtcbn1cblxuRHJhZ0V2ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSB0aGlzLl8ub24uYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgPT09IHRoaXMuXyA/IHRoaXMgOiB2YWx1ZTtcbn07XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZXZlbnQsIGN1c3RvbUV2ZW50LCBzZWxlY3QsIG1vdXNlLCB0b3VjaH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZHJhZywge3llc2RyYWd9IGZyb20gXCIuL25vZHJhZ1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBEcmFnRXZlbnQgZnJvbSBcIi4vZXZlbnRcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN1YmplY3QoZCkge1xuICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV2ZW50LngsIHk6IGV2ZW50Lnl9IDogZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgY29udGFpbmVyID0gZGVmYXVsdENvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBnZXN0dXJlcyA9IHt9LFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICBhY3RpdmUgPSAwLFxuICAgICAgbW91c2Vkb3dueCxcbiAgICAgIG1vdXNlZG93bnksXG4gICAgICBtb3VzZW1vdmluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bmVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGdlc3R1cmUgPSBiZWZvcmVzdGFydChcIm1vdXNlXCIsIGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBtb3VzZSwgdGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZ1wiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuZHJhZ1wiLCBtb3VzZXVwcGVkLCB0cnVlKTtcbiAgICBub2RyYWcoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIG1vdXNlbW92aW5nID0gZmFsc2U7XG4gICAgbW91c2Vkb3dueCA9IGV2ZW50LmNsaWVudFg7XG4gICAgbW91c2Vkb3dueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKCFtb3VzZW1vdmluZykge1xuICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIG1vdXNlZG93bngsIGR5ID0gZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICBtb3VzZW1vdmluZyA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgfVxuICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWcgbW91c2V1cC5kcmFnXCIsIG51bGwpO1xuICAgIHllc2RyYWcoZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgIG5vZXZlbnQoKTtcbiAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRvdWNoZXNbaV0uaWRlbnRpZmllciwgYywgdG91Y2gsIHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgIGdlc3R1cmUoXCJlbmRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQoaWQsIGNvbnRhaW5lciwgcG9pbnQsIHRoYXQsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBzLCBkeCwgZHksXG4gICAgICAgIHN1Ymxpc3RlbmVycyA9IGxpc3RlbmVycy5jb3B5KCk7XG5cbiAgICBpZiAoIWN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgXCJiZWZvcmVzdGFydFwiLCBzLCBpZCwgYWN0aXZlLCBwWzBdLCBwWzFdLCAwLCAwLCBzdWJsaXN0ZW5lcnMpLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgoZXZlbnQuc3ViamVjdCA9IHMgPSBzdWJqZWN0LmFwcGx5KHRoYXQsIGFyZ3MpKSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkpIHJldHVybjtcblxuICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUpIHtcbiAgICAgIHZhciBwMCA9IHAsIG47XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkXSA9IGdlc3R1cmUsIG4gPSBhY3RpdmUrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbmRcIjogZGVsZXRlIGdlc3R1cmVzW2lkXSwgLS1hY3RpdmU7IC8vIG5vYnJlYWtcbiAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgdHlwZSwgcywgaWQsIG4sIHBbMF0gKyBkeCwgcFsxXSArIGR5LCBwWzBdIC0gcDBbMF0sIHBbMV0gLSBwMFsxXSwgc3VibGlzdGVuZXJzKSwgc3VibGlzdGVuZXJzLmFwcGx5LCBzdWJsaXN0ZW5lcnMsIFt0eXBlLCB0aGF0LCBhcmdzXSk7XG4gICAgfTtcbiAgfVxuXG4gIGRyYWcuZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gIH07XG5cbiAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGFpbmVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBjb250YWluZXI7XG4gIH07XG5cbiAgZHJhZy5zdWJqZWN0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN1YmplY3QgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gIH07XG5cbiAgZHJhZy50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgfTtcblxuICBkcmFnLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIGRyYWcpIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gZHJhZztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLyxcbiAgICByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmhleCgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG4vLyBodHRwczovL2JldGEub2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZVwiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYlwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3RcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsInZhciByaG8gPSBNYXRoLlNRUlQyLFxuICAgIHJobzIgPSAyLFxuICAgIHJobzQgPSA0LFxuICAgIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmFsIGNhc2UuXG4gIGVsc2Uge1xuICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuIiwiaW1wb3J0IHtoc2wgYXMgY29sb3JIc2x9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBoc2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIc2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIc2woZW5kKSkuaCksXG4gICAgICAgIHMgPSBjb2xvcihzdGFydC5zLCBlbmQucyksXG4gICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhzbChodWUpO1xuZXhwb3J0IHZhciBoc2xMb25nID0gaHNsKGNvbG9yKTtcbiIsImltcG9ydCB7aGNsIGFzIGNvbG9ySGNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gaGNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySGNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySGNsKGVuZCkpLmgpLFxuICAgICAgICBjID0gY29sb3Ioc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LmMgPSBjKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoY2woaHVlKTtcbmV4cG9ydCB2YXIgaGNsTG9uZyA9IGhjbChjb2xvcik7XG4iLCJpbXBvcnQge2N1YmVoZWxpeCBhcyBjb2xvckN1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChodWUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgeSA9ICt5O1xuXG4gICAgZnVuY3Rpb24gY3ViZWhlbGl4KHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9yQ3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9yQ3ViZWhlbGl4KGVuZCkpLmgpLFxuICAgICAgICAgIHMgPSBjb2xvcihzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjdWJlaGVsaXguZ2FtbWEgPSBjdWJlaGVsaXhHYW1tYTtcblxuICAgIHJldHVybiBjdWJlaGVsaXg7XG4gIH0pKDEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjdWJlaGVsaXgoaHVlKTtcbmV4cG9ydCB2YXIgY3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeChjb2xvcik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnRlcnBvbGF0b3IsIG4pIHtcbiAgdmFyIHNhbXBsZXMgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcbiAgcmV0dXJuIHNhbXBsZXM7XG59XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHN0YXJ0ZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2Vcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3J9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3JBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSwgY2hpbGQsIGluaGVyaXQgPSBnZXQobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHttYXRjaGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gc3RhcnQobmFtZSkge1xuICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pLmV2ZXJ5KGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuICF0IHx8IHQgPT09IFwic3RhcnRcIjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQobmFtZSkgPyBpbml0IDogc2V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICA/IGdldCh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICA6IHRoaXMuZWFjaChvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlICsgXCJcIikpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkodCkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlRW5kKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZVJlbW92ZShuYW1lLCBpKSlcbiAgICAgICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZUVuZChuYW1lKSlcbiAgICAgIDogdGhpcy5zdHlsZVR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUgKyBcIlwiKSwgcHJpb3JpdHkpO1xufVxuIiwiZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJ2YXIgZXhwb25lbnQgPSAzO1xuXG5leHBvcnQgdmFyIHBvbHlJbiA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCwgZSk7XG4gIH1cblxuICBwb2x5SW4uZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbjtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5T3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5T3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB0LCBlKTtcbiAgfVxuXG4gIHBvbHlPdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlPdXQ7XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seUluT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IE1hdGgucG93KHQsIGUpIDogMiAtIE1hdGgucG93KDIgLSB0LCBlKSkgLyAyO1xuICB9XG5cbiAgcG9seUluT3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW5PdXQ7XG59KShleHBvbmVudCk7XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIGhhbGZQaSA9IHBpIC8gMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogaGFsZlBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbk91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNpbih0ICogaGFsZlBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbkluT3V0KHQpIHtcbiAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xufVxuIiwidmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbmV4cG9ydCB2YXIgYmFja0luID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9XG5cbiAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luO1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfVxuXG4gIGJhY2tPdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrT3V0O1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gIH1cblxuICBiYWNrSW5PdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW5PdXQ7XG59KShvdmVyc2hvb3QpO1xuIiwidmFyIHRhdSA9IDIgKiBNYXRoLlBJLFxuICAgIGFtcGxpdHVkZSA9IDEsXG4gICAgcGVyaW9kID0gMC4zO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNJbiA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW4odCkge1xuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgMTAgKiAtLXQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY0luLmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luLnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luO1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY091dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgPSB0ICogMiAtIDEpIDwgMFxuICAgICAgICA/IGEgKiBNYXRoLnBvdygyLCAxMCAqIHQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApXG4gICAgICAgIDogMiAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKChzICsgdCkgLyBwKSkgLyAyO1xuICB9XG5cbiAgZWxhc3RpY0luT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtjdXN0b21FdmVudCwgZXZlbnQsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudFwiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxudmFyIFggPSB7XG4gIG5hbWU6IFwieFwiLFxuICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ICYmIFtbeFswXSwgZVswXVsxXV0sIFt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwiZVwiLCBcInNcIiwgXCJ3XCIsIFwibndcIiwgXCJuZVwiLCBcInNlXCIsIFwic3dcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaCB0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAmJiBzZWxlY3Rpb24xID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjEgPT0gbnVsbCB8fCBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHJldHVybiB0aGF0Ll9fYnJ1c2guZW1pdHRlciB8fCBuZXcgRW1pdHRlcih0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgfVxuXG4gIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGJlZm9yZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB0aGlzLnN0YXRlLmVtaXR0ZXIgPSB0aGlzLCB0aGlzLnN0YXJ0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgIGlmIChldmVudC50b3VjaGVzKSB7IGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuIG5vZXZlbnQoKTsgfVxuICAgIGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5LFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnQwID0gbW91c2UodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG5cbiAgICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIH1cblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICB2YXIgcG9pbnQxID0gbW91c2UodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgICAgZ3JvdXAub24oXCJ0b3VjaG1vdmUuYnJ1c2ggdG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7bWF4LCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gY29tcGFyZVZhbHVlKGNvbXBhcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZShcbiAgICAgIGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUsXG4gICAgICBiLnNvdXJjZS52YWx1ZSArIGIudGFyZ2V0LnZhbHVlXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBwYWRBbmdsZSA9IDAsXG4gICAgICBzb3J0R3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRTdWJncm91cHMgPSBudWxsLFxuICAgICAgc29ydENob3JkcyA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2hvcmQobWF0cml4KSB7XG4gICAgdmFyIG4gPSBtYXRyaXgubGVuZ3RoLFxuICAgICAgICBncm91cFN1bXMgPSBbXSxcbiAgICAgICAgZ3JvdXBJbmRleCA9IHJhbmdlKG4pLFxuICAgICAgICBzdWJncm91cEluZGV4ID0gW10sXG4gICAgICAgIGNob3JkcyA9IFtdLFxuICAgICAgICBncm91cHMgPSBjaG9yZHMuZ3JvdXBzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBzdWJncm91cHMgPSBuZXcgQXJyYXkobiAqIG4pLFxuICAgICAgICBrLFxuICAgICAgICB4LFxuICAgICAgICB4MCxcbiAgICAgICAgZHgsXG4gICAgICAgIGksXG4gICAgICAgIGo7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzdW0uXG4gICAgayA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHggPSAwLCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHggKz0gbWF0cml4W2ldW2pdO1xuICAgICAgfVxuICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICBzdWJncm91cEluZGV4LnB1c2gocmFuZ2UobikpO1xuICAgICAgayArPSB4O1xuICAgIH1cblxuICAgIC8vIFNvcnQgZ3JvdXBz4oCmXG4gICAgaWYgKHNvcnRHcm91cHMpIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gc29ydEdyb3Vwcyhncm91cFN1bXNbYV0sIGdyb3VwU3Vtc1tiXSk7XG4gICAgfSk7XG5cbiAgICAvLyBTb3J0IHN1Ymdyb3Vwc+KAplxuICAgIGlmIChzb3J0U3ViZ3JvdXBzKSBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBDb252ZXJ0IHRoZSBzdW0gdG8gc2NhbGluZyBmYWN0b3IgZm9yIFswLCAycGldLlxuICAgIC8vIFRPRE8gQWxsb3cgc3RhcnQgYW5kIGVuZCBhbmdsZSB0byBiZSBzcGVjaWZpZWQ/XG4gICAgLy8gVE9ETyBBbGxvdyBwYWRkaW5nIHRvIGJlIHNwZWNpZmllZCBhcyBwZXJjZW50YWdlP1xuICAgIGsgPSBtYXgoMCwgdGF1IC0gcGFkQW5nbGUgKiBuKSAvIGs7XG4gICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUgLyBuO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZSBmb3IgZWFjaCBncm91cCBhbmQgc3ViZ3JvdXAuXG4gICAgLy8gTm90ZTogT3BlcmEgaGFzIGEgYnVnIHJlb3JkZXJpbmcgb2JqZWN0IGxpdGVyYWwgcHJvcGVydGllcyFcbiAgICB4ID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgeDAgPSB4LCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBkaSA9IGdyb3VwSW5kZXhbaV0sXG4gICAgICAgICAgICBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLFxuICAgICAgICAgICAgdiA9IG1hdHJpeFtkaV1bZGpdLFxuICAgICAgICAgICAgYTAgPSB4LFxuICAgICAgICAgICAgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICBzdWJncm91cHNbZGogKiBuICsgZGldID0ge1xuICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICBzdWJpbmRleDogZGosXG4gICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBncm91cHNbZGldID0ge1xuICAgICAgICBpbmRleDogZGksXG4gICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuICAgICAgICBlbmRBbmdsZTogeCxcbiAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cbiAgICAgIH07XG4gICAgICB4ICs9IGR4O1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGNob3JkcyBmb3IgZWFjaCAobm9uLWVtcHR5KSBzdWJncm91cC1zdWJncm91cCBsaW5rLlxuICAgIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGogPSBpIC0gMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN1Ymdyb3Vwc1tqICogbiArIGldLFxuICAgICAgICAgICAgdGFyZ2V0ID0gc3ViZ3JvdXBzW2kgKiBuICsgal07XG4gICAgICAgIGlmIChzb3VyY2UudmFsdWUgfHwgdGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgID8ge3NvdXJjZTogdGFyZ2V0LCB0YXJnZXQ6IHNvdXJjZX1cbiAgICAgICAgICAgICAgOiB7c291cmNlOiBzb3VyY2UsIHRhcmdldDogdGFyZ2V0fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc29ydENob3JkcyA/IGNob3Jkcy5zb3J0KHNvcnRDaG9yZHMpIDogY2hvcmRzO1xuICB9XG5cbiAgY2hvcmQucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgfTtcblxuICByZXR1cm4gY2hvcmQ7XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpIHt9XG5cbiAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbikgfHwgIXIpIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZHJhdyBhbiBhcmMhXG4gICAgZWxzZSB7XG4gICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICB5MjAgPSB5MiAtIHkwLFxuICAgICAgICAgIGwyMV8yID0geDIxICogeDIxICsgeTIxICogeTIxLFxuICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgIGwyMSA9IE1hdGguc3FydChsMjFfMiksXG4gICAgICAgICAgbDAxID0gTWF0aC5zcXJ0KGwwMV8yKSxcbiAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSAtIE1hdGguYWNvcygobDIxXzIgKyBsMDFfMiAtIGwyMF8yKSAvICgyICogbDIxICogbDAxKSkpIC8gMiksXG4gICAgICAgICAgdDAxID0gbCAvIGwwMSxcbiAgICAgICAgICB0MjEgPSBsIC8gbDIxO1xuXG4gICAgICAvLyBJZiB0aGUgc3RhcnQgdGFuZ2VudCBpcyBub3QgY29pbmNpZGVudCB3aXRoICh4MCx5MCksIGxpbmUgdG8uXG4gICAgICBpZiAoTWF0aC5hYnModDAxIC0gMSkgPiBlcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXyArPSBcIkxcIiArICh4MSArIHQwMSAqIHgwMSkgKyBcIixcIiArICh5MSArIHQwMSAqIHkwMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDAsXCIgKyAoKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApKSArIFwiLFwiICsgKHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSArIHQyMSAqIHkyMSk7XG4gICAgfVxuICB9LFxuICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArcjtcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgbWFwIGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIG1hcCgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmluZykge1xuICB2YXIgaSA9IDAsIG4gPSByaW5nLmxlbmd0aCwgYXJlYSA9IHJpbmdbbiAtIDFdWzFdICogcmluZ1swXVswXSAtIHJpbmdbbiAtIDFdWzBdICogcmluZ1swXVsxXTtcbiAgd2hpbGUgKCsraSA8IG4pIGFyZWEgKz0gcmluZ1tpIC0gMV1bMV0gKiByaW5nW2ldWzBdIC0gcmluZ1tpIC0gMV1bMF0gKiByaW5nW2ldWzFdO1xuICByZXR1cm4gYXJlYTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmluZywgaG9sZSkge1xuICB2YXIgaSA9IC0xLCBuID0gaG9sZS5sZW5ndGgsIGM7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAoYyA9IHJpbmdDb250YWlucyhyaW5nLCBob2xlW2ldKSkgcmV0dXJuIGM7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiByaW5nQ29udGFpbnMocmluZywgcG9pbnQpIHtcbiAgdmFyIHggPSBwb2ludFswXSwgeSA9IHBvaW50WzFdLCBjb250YWlucyA9IC0xO1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHJpbmcubGVuZ3RoLCBqID0gbiAtIDE7IGkgPCBuOyBqID0gaSsrKSB7XG4gICAgdmFyIHBpID0gcmluZ1tpXSwgeGkgPSBwaVswXSwgeWkgPSBwaVsxXSwgcGogPSByaW5nW2pdLCB4aiA9IHBqWzBdLCB5aiA9IHBqWzFdO1xuICAgIGlmIChzZWdtZW50Q29udGFpbnMocGksIHBqLCBwb2ludCkpIHJldHVybiAwO1xuICAgIGlmICgoKHlpID4geSkgIT09ICh5aiA+IHkpKSAmJiAoKHggPCAoeGogLSB4aSkgKiAoeSAtIHlpKSAvICh5aiAtIHlpKSArIHhpKSkpIGNvbnRhaW5zID0gLWNvbnRhaW5zO1xuICB9XG4gIHJldHVybiBjb250YWlucztcbn1cblxuZnVuY3Rpb24gc2VnbWVudENvbnRhaW5zKGEsIGIsIGMpIHtcbiAgdmFyIGk7IHJldHVybiBjb2xsaW5lYXIoYSwgYiwgYykgJiYgd2l0aGluKGFbaSA9ICsoYVswXSA9PT0gYlswXSldLCBjW2ldLCBiW2ldKTtcbn1cblxuZnVuY3Rpb24gY29sbGluZWFyKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAoY1sxXSAtIGFbMV0pID09PSAoY1swXSAtIGFbMF0pICogKGJbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gd2l0aGluKHAsIHEsIHIpIHtcbiAgcmV0dXJuIHAgPD0gcSAmJiBxIDw9IHIgfHwgciA8PSBxICYmIHEgPD0gcDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge31cbiIsImltcG9ydCB7ZXh0ZW50LCB0aHJlc2hvbGRTdHVyZ2VzLCB0aWNrU3RlcCwgcmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYXJlYSBmcm9tIFwiLi9hcmVhXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWluc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcFwiO1xuXG52YXIgY2FzZXMgPSBbXG4gIFtdLFxuICBbW1sxLjAsIDEuNV0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMS41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzAuNSwgMS4wXV1dLFxuICBbW1sxLjAsIDAuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMC41LCAxLjBdXSwgW1sxLjAsIDAuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzAuNSwgMS4wXV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMC41XV0sIFtbMS41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzEuMCwgMC41XV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbXVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICB0aHJlc2hvbGQgPSB0aHJlc2hvbGRTdHVyZ2VzLFxuICAgICAgc21vb3RoID0gc21vb3RoTGluZWFyO1xuXG4gIGZ1bmN0aW9uIGNvbnRvdXJzKHZhbHVlcykge1xuICAgIHZhciB0eiA9IHRocmVzaG9sZCh2YWx1ZXMpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB2YXIgZG9tYWluID0gZXh0ZW50KHZhbHVlcyksIHN0YXJ0ID0gZG9tYWluWzBdLCBzdG9wID0gZG9tYWluWzFdO1xuICAgICAgdHogPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgdHopO1xuICAgICAgdHogPSByYW5nZShNYXRoLmZsb29yKHN0YXJ0IC8gdHopICogdHosIE1hdGguZmxvb3Ioc3RvcCAvIHR6KSAqIHR6LCB0eik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR6ID0gdHouc2xpY2UoKS5zb3J0KGFzY2VuZGluZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR6Lm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvbnRvdXIodmFsdWVzLCB2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBBY2N1bXVsYXRlLCBzbW9vdGggY29udG91ciByaW5ncywgYXNzaWduIGhvbGVzIHRvIGV4dGVyaW9yIHJpbmdzLlxuICAvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbWJvc3RvY2svc2hhcGVmaWxlL2Jsb2IvdjAuNi4yL3NocC9wb2x5Z29uLmpzXG4gIGZ1bmN0aW9uIGNvbnRvdXIodmFsdWVzLCB2YWx1ZSkge1xuICAgIHZhciBwb2x5Z29ucyA9IFtdLFxuICAgICAgICBob2xlcyA9IFtdO1xuXG4gICAgaXNvcmluZ3ModmFsdWVzLCB2YWx1ZSwgZnVuY3Rpb24ocmluZykge1xuICAgICAgc21vb3RoKHJpbmcsIHZhbHVlcywgdmFsdWUpO1xuICAgICAgaWYgKGFyZWEocmluZykgPiAwKSBwb2x5Z29ucy5wdXNoKFtyaW5nXSk7XG4gICAgICBlbHNlIGhvbGVzLnB1c2gocmluZyk7XG4gICAgfSk7XG5cbiAgICBob2xlcy5mb3JFYWNoKGZ1bmN0aW9uKGhvbGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbnMubGVuZ3RoLCBwb2x5Z29uOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChjb250YWlucygocG9seWdvbiA9IHBvbHlnb25zW2ldKVswXSwgaG9sZSkgIT09IC0xKSB7XG4gICAgICAgICAgcG9seWdvbi5wdXNoKGhvbGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiTXVsdGlQb2x5Z29uXCIsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBjb29yZGluYXRlczogcG9seWdvbnNcbiAgICB9O1xuICB9XG5cbiAgLy8gTWFyY2hpbmcgc3F1YXJlcyB3aXRoIGlzb2xpbmVzIHN0aXRjaGVkIGludG8gcmluZ3MuXG4gIC8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90b3BvanNvbi90b3BvanNvbi1jbGllbnQvYmxvYi92My4wLjAvc3JjL3N0aXRjaC5qc1xuICBmdW5jdGlvbiBpc29yaW5ncyh2YWx1ZXMsIHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciBmcmFnbWVudEJ5U3RhcnQgPSBuZXcgQXJyYXksXG4gICAgICAgIGZyYWdtZW50QnlFbmQgPSBuZXcgQXJyYXksXG4gICAgICAgIHgsIHksIHQwLCB0MSwgdDIsIHQzO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB0aGUgZmlyc3Qgcm93ICh5ID0gLTEsIHQyID0gdDMgPSAwKS5cbiAgICB4ID0geSA9IC0xO1xuICAgIHQxID0gdmFsdWVzWzBdID49IHZhbHVlO1xuICAgIGNhc2VzW3QxIDw8IDFdLmZvckVhY2goc3RpdGNoKTtcbiAgICB3aGlsZSAoKyt4IDwgZHggLSAxKSB7XG4gICAgICB0MCA9IHQxLCB0MSA9IHZhbHVlc1t4ICsgMV0gPj0gdmFsdWU7XG4gICAgICBjYXNlc1t0MCB8IHQxIDw8IDFdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG4gICAgY2FzZXNbdDEgPDwgMF0uZm9yRWFjaChzdGl0Y2gpO1xuXG4gICAgLy8gR2VuZXJhbCBjYXNlIGZvciB0aGUgaW50ZXJtZWRpYXRlIHJvd3MuXG4gICAgd2hpbGUgKCsreSA8IGR5IC0gMSkge1xuICAgICAgeCA9IC0xO1xuICAgICAgdDEgPSB2YWx1ZXNbeSAqIGR4ICsgZHhdID49IHZhbHVlO1xuICAgICAgdDIgPSB2YWx1ZXNbeSAqIGR4XSA+PSB2YWx1ZTtcbiAgICAgIGNhc2VzW3QxIDw8IDEgfCB0MiA8PCAyXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgICB3aGlsZSAoKyt4IDwgZHggLSAxKSB7XG4gICAgICAgIHQwID0gdDEsIHQxID0gdmFsdWVzW3kgKiBkeCArIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgICB0MyA9IHQyLCB0MiA9IHZhbHVlc1t5ICogZHggKyB4ICsgMV0gPj0gdmFsdWU7XG4gICAgICAgIGNhc2VzW3QwIHwgdDEgPDwgMSB8IHQyIDw8IDIgfCB0MyA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgICB9XG4gICAgICBjYXNlc1t0MSB8IHQyIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRoZSBsYXN0IHJvdyAoeSA9IGR5IC0gMSwgdDAgPSB0MSA9IDApLlxuICAgIHggPSAtMTtcbiAgICB0MiA9IHZhbHVlc1t5ICogZHhdID49IHZhbHVlO1xuICAgIGNhc2VzW3QyIDw8IDJdLmZvckVhY2goc3RpdGNoKTtcbiAgICB3aGlsZSAoKyt4IDwgZHggLSAxKSB7XG4gICAgICB0MyA9IHQyLCB0MiA9IHZhbHVlc1t5ICogZHggKyB4ICsgMV0gPj0gdmFsdWU7XG4gICAgICBjYXNlc1t0MiA8PCAyIHwgdDMgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgIH1cbiAgICBjYXNlc1t0MiA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG5cbiAgICBmdW5jdGlvbiBzdGl0Y2gobGluZSkge1xuICAgICAgdmFyIHN0YXJ0ID0gW2xpbmVbMF1bMF0gKyB4LCBsaW5lWzBdWzFdICsgeV0sXG4gICAgICAgICAgZW5kID0gW2xpbmVbMV1bMF0gKyB4LCBsaW5lWzFdWzFdICsgeV0sXG4gICAgICAgICAgc3RhcnRJbmRleCA9IGluZGV4KHN0YXJ0KSxcbiAgICAgICAgICBlbmRJbmRleCA9IGluZGV4KGVuZCksXG4gICAgICAgICAgZiwgZztcbiAgICAgIGlmIChmID0gZnJhZ21lbnRCeUVuZFtzdGFydEluZGV4XSkge1xuICAgICAgICBpZiAoZyA9IGZyYWdtZW50QnlTdGFydFtlbmRJbmRleF0pIHtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeUVuZFtmLmVuZF07XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtnLnN0YXJ0XTtcbiAgICAgICAgICBpZiAoZiA9PT0gZykge1xuICAgICAgICAgICAgZi5yaW5nLnB1c2goZW5kKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGYucmluZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XSA9IGZyYWdtZW50QnlFbmRbZy5lbmRdID0ge3N0YXJ0OiBmLnN0YXJ0LCBlbmQ6IGcuZW5kLCByaW5nOiBmLnJpbmcuY29uY2F0KGcucmluZyl9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeUVuZFtmLmVuZF07XG4gICAgICAgICAgZi5yaW5nLnB1c2goZW5kKTtcbiAgICAgICAgICBmcmFnbWVudEJ5RW5kW2YuZW5kID0gZW5kSW5kZXhdID0gZjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChmID0gZnJhZ21lbnRCeVN0YXJ0W2VuZEluZGV4XSkge1xuICAgICAgICBpZiAoZyA9IGZyYWdtZW50QnlFbmRbc3RhcnRJbmRleF0pIHtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnRdO1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5RW5kW2cuZW5kXTtcbiAgICAgICAgICBpZiAoZiA9PT0gZykge1xuICAgICAgICAgICAgZi5yaW5nLnB1c2goZW5kKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGYucmluZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyYWdtZW50QnlTdGFydFtnLnN0YXJ0XSA9IGZyYWdtZW50QnlFbmRbZi5lbmRdID0ge3N0YXJ0OiBnLnN0YXJ0LCBlbmQ6IGYuZW5kLCByaW5nOiBnLnJpbmcuY29uY2F0KGYucmluZyl9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnRdO1xuICAgICAgICAgIGYucmluZy51bnNoaWZ0KHN0YXJ0KTtcbiAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydCA9IHN0YXJ0SW5kZXhdID0gZjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W3N0YXJ0SW5kZXhdID0gZnJhZ21lbnRCeUVuZFtlbmRJbmRleF0gPSB7c3RhcnQ6IHN0YXJ0SW5kZXgsIGVuZDogZW5kSW5kZXgsIHJpbmc6IFtzdGFydCwgZW5kXX07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5kZXgocG9pbnQpIHtcbiAgICByZXR1cm4gcG9pbnRbMF0gKiAyICsgcG9pbnRbMV0gKiAoZHggKyAxKSAqIDQ7XG4gIH1cblxuICBmdW5jdGlvbiBzbW9vdGhMaW5lYXIocmluZywgdmFsdWVzLCB2YWx1ZSkge1xuICAgIHJpbmcuZm9yRWFjaChmdW5jdGlvbihwb2ludCkge1xuICAgICAgdmFyIHggPSBwb2ludFswXSxcbiAgICAgICAgICB5ID0gcG9pbnRbMV0sXG4gICAgICAgICAgeHQgPSB4IHwgMCxcbiAgICAgICAgICB5dCA9IHkgfCAwLFxuICAgICAgICAgIHYwLFxuICAgICAgICAgIHYxID0gdmFsdWVzW3l0ICogZHggKyB4dF07XG4gICAgICBpZiAoeCA+IDAgJiYgeCA8IGR4ICYmIHh0ID09PSB4KSB7XG4gICAgICAgIHYwID0gdmFsdWVzW3l0ICogZHggKyB4dCAtIDFdO1xuICAgICAgICBwb2ludFswXSA9IHggKyAodmFsdWUgLSB2MCkgLyAodjEgLSB2MCkgLSAwLjU7XG4gICAgICB9XG4gICAgICBpZiAoeSA+IDAgJiYgeSA8IGR5ICYmIHl0ID09PSB5KSB7XG4gICAgICAgIHYwID0gdmFsdWVzWyh5dCAtIDEpICogZHggKyB4dF07XG4gICAgICAgIHBvaW50WzFdID0geSArICh2YWx1ZSAtIHYwKSAvICh2MSAtIHYwKSAtIDAuNTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnRvdXJzLmNvbnRvdXIgPSBjb250b3VyO1xuXG4gIGNvbnRvdXJzLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgdmFyIF8wID0gTWF0aC5jZWlsKF9bMF0pLCBfMSA9IE1hdGguY2VpbChfWzFdKTtcbiAgICBpZiAoIShfMCA+IDApIHx8ICEoXzEgPiAwKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzaXplXCIpO1xuICAgIHJldHVybiBkeCA9IF8wLCBkeSA9IF8xLCBjb250b3VycztcbiAgfTtcblxuICBjb250b3Vycy50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGNvbnRvdXJzKSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICBjb250b3Vycy5zbW9vdGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc21vb3RoID0gXyA/IHNtb290aExpbmVhciA6IG5vb3AsIGNvbnRvdXJzKSA6IHNtb290aCA9PT0gc21vb3RoTGluZWFyO1xuICB9O1xuXG4gIHJldHVybiBjb250b3Vycztcbn1cbiIsImltcG9ydCB7bWF4LCByYW5nZSwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7Ymx1clgsIGJsdXJZfSBmcm9tIFwiLi9ibHVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjb250b3VycyBmcm9tIFwiLi9jb250b3Vyc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2VpZ2h0KCkge1xuICByZXR1cm4gMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gZGVmYXVsdFgsXG4gICAgICB5ID0gZGVmYXVsdFksXG4gICAgICB3ZWlnaHQgPSBkZWZhdWx0V2VpZ2h0LFxuICAgICAgZHggPSA5NjAsXG4gICAgICBkeSA9IDUwMCxcbiAgICAgIHIgPSAyMCwgLy8gYmx1ciByYWRpdXNcbiAgICAgIGsgPSAyLCAvLyBsb2cyKGdyaWQgY2VsbCBzaXplKVxuICAgICAgbyA9IHIgKiAzLCAvLyBncmlkIG9mZnNldCwgdG8gcGFkIGZvciBibHVyXG4gICAgICBuID0gKGR4ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgd2lkdGhcbiAgICAgIG0gPSAoZHkgKyBvICogMikgPj4gaywgLy8gZ3JpZCBoZWlnaHRcbiAgICAgIHRocmVzaG9sZCA9IGNvbnN0YW50KDIwKTtcblxuICBmdW5jdGlvbiBkZW5zaXR5KGRhdGEpIHtcbiAgICB2YXIgdmFsdWVzMCA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pLFxuICAgICAgICB2YWx1ZXMxID0gbmV3IEZsb2F0MzJBcnJheShuICogbSk7XG5cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZCwgaSwgZGF0YSkge1xuICAgICAgdmFyIHhpID0gKCt4KGQsIGksIGRhdGEpICsgbykgPj4gayxcbiAgICAgICAgICB5aSA9ICgreShkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgd2kgPSArd2VpZ2h0KGQsIGksIGRhdGEpO1xuICAgICAgaWYgKHhpID49IDAgJiYgeGkgPCBuICYmIHlpID49IDAgJiYgeWkgPCBtKSB7XG4gICAgICAgIHZhbHVlczBbeGkgKyB5aSAqIG5dICs9IHdpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcblxuICAgIHZhciB0eiA9IHRocmVzaG9sZCh2YWx1ZXMwKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIHN0b3AgPSBtYXgodmFsdWVzMCk7XG4gICAgICB0eiA9IHRpY2tTdGVwKDAsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoMCwgTWF0aC5mbG9vcihzdG9wIC8gdHopICogdHosIHR6KTtcbiAgICAgIHR6LnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRvdXJzKClcbiAgICAgICAgLnRocmVzaG9sZHModHopXG4gICAgICAgIC5zaXplKFtuLCBtXSlcbiAgICAgICh2YWx1ZXMwKVxuICAgICAgICAubWFwKHRyYW5zZm9ybSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0oZ2VvbWV0cnkpIHtcbiAgICBnZW9tZXRyeS52YWx1ZSAqPSBNYXRoLnBvdygyLCAtMiAqIGspOyAvLyBEZW5zaXR5IGluIHBvaW50cyBwZXIgc3F1YXJlIHBpeGVsLlxuICAgIGdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9seWdvbik7XG4gICAgcmV0dXJuIGdlb21ldHJ5O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9seWdvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1SaW5nKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2ludCk7XG4gIH1cblxuICAvLyBUT0RPIE9wdGltaXplLlxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzWzBdID0gY29vcmRpbmF0ZXNbMF0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gICAgY29vcmRpbmF0ZXNbMV0gPSBjb29yZGluYXRlc1sxXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICBvID0gciAqIDM7XG4gICAgbiA9IChkeCArIG8gKiAyKSA+PiBrO1xuICAgIG0gPSAoZHkgKyBvICogMikgPj4gaztcbiAgICByZXR1cm4gZGVuc2l0eTtcbiAgfVxuXG4gIGRlbnNpdHkueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeDtcbiAgfTtcblxuICBkZW5zaXR5LnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHk7XG4gIH07XG5cbiAgZGVuc2l0eS53ZWlnaHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2VpZ2h0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogd2VpZ2h0O1xuICB9O1xuXG4gIGRlbnNpdHkuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICB2YXIgXzAgPSBNYXRoLmNlaWwoX1swXSksIF8xID0gTWF0aC5jZWlsKF9bMV0pO1xuICAgIGlmICghKF8wID49IDApICYmICEoXzAgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS5jZWxsU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiAxIDw8IGs7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2VsbCBzaXplXCIpO1xuICAgIHJldHVybiBrID0gTWF0aC5mbG9vcihNYXRoLmxvZyhfKSAvIE1hdGguTE4yKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGRlbnNpdHkpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGRlbnNpdHkuYmFuZHdpZHRoID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydChyICogKHIgKyAxKSk7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmFuZHdpZHRoXCIpO1xuICAgIHJldHVybiByID0gTWF0aC5yb3VuZCgoTWF0aC5zcXJ0KDQgKiBfICogXyArIDEpIC0gMSkgLyAyKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlbnNpdHk7XG59XG4iLCJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHRleHQgKz0gXCJcIikgPyBcIlxcXCJcIiArIHRleHQucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdGV4dDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZVRleHQocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZVRleHQpO1xufVxuIiwiaW1wb3J0IHtjc3ZQYXJzZSwgZHN2Rm9ybWF0LCB0c3ZQYXJzZX0gZnJvbSBcImQzLWRzdlwiO1xuaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dFwiO1xuXG5mdW5jdGlvbiBkc3ZQYXJzZShwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQsIHJvdykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBwYXJzZShyZXNwb25zZSwgcm93KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHN2KGRlbGltaXRlciwgaW5wdXQsIGluaXQsIHJvdykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICB2YXIgZm9ybWF0ID0gZHN2Rm9ybWF0KGRlbGltaXRlcik7XG4gIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGZvcm1hdC5wYXJzZShyZXNwb25zZSwgcm93KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgY3N2ID0gZHN2UGFyc2UoY3N2UGFyc2UpO1xuZXhwb3J0IHZhciB0c3YgPSBkc3ZQYXJzZSh0c3ZQYXJzZSk7XG4iLCJpbXBvcnQgdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5cbmZ1bmN0aW9uIHBhcnNlcih0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCkgIHtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICByZXR1cm4gKG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0ZXh0LCB0eXBlKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VyKFwiYXBwbGljYXRpb24veG1sXCIpO1xuXG5leHBvcnQgdmFyIGh0bWwgPSBwYXJzZXIoXCJ0ZXh0L2h0bWxcIik7XG5cbmV4cG9ydCB2YXIgc3ZnID0gcGFyc2VyKFwiaW1hZ2Uvc3ZnK3htbFwiKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG59XG5cbmZ1bmN0aW9uIGFkZCh0cmVlLCB4LCB5LCBkKSB7XG4gIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdHJlZS5fcm9vdCxcbiAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHhwLFxuICAgICAgeXAsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgeXAgPSArdHJlZS5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gIGRvIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICB2YXIgZCwgaSwgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgIHkwID0gSW5maW5pdHksXG4gICAgICB4MSA9IC1JbmZpbml0eSxcbiAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gIC8vIENvbXB1dGUgdGhlIHBvaW50cyBhbmQgdGhlaXIgZXh0ZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICB4eltpXSA9IHg7XG4gICAgeXpbaV0gPSB5O1xuICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIHdlcmUgbm8gKHZhbGlkKSBwb2ludHMsIGluaGVyaXQgdGhlIGV4aXN0aW5nIGV4dGVudC5cbiAgaWYgKHgxIDwgeDApIHgwID0gdGhpcy5feDAsIHgxID0gdGhpcy5feDE7XG4gIGlmICh5MSA8IHkwKSB5MCA9IHRoaXMuX3kwLCB5MSA9IHRoaXMuX3kxO1xuXG4gIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgaWYgKGlzTmFOKHggPSAreCkgfHwgaXNOYU4oeSA9ICt5KSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxO1xuXG4gIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gIC8vIEludGVnZXIgZXh0ZW50IGFyZSBuZWNlc3Nhcnkgc28gdGhhdCBpZiB3ZSBsYXRlciBkb3VibGUgdGhlIGV4dGVudCxcbiAgLy8gdGhlIGV4aXN0aW5nIHF1YWRyYW50IGJvdW5kYXJpZXMgZG9u4oCZdCBjaGFuZ2UgZHVlIHRvIGZsb2F0aW5nIHBvaW50IGVycm9yIVxuICBpZiAoaXNOYU4oeDApKSB7XG4gICAgeDEgPSAoeDAgPSBNYXRoLmZsb29yKHgpKSArIDE7XG4gICAgeTEgPSAoeTAgPSBNYXRoLmZsb29yKHkpKSArIDE7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGRvdWJsZSByZXBlYXRlZGx5IHRvIGNvdmVyLlxuICBlbHNlIGlmICh4MCA+IHggfHwgeCA+IHgxIHx8IHkwID4geSB8fCB5ID4geTEpIHtcbiAgICB2YXIgeiA9IHgxIC0geDAsXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGk7XG5cbiAgICBzd2l0Y2ggKGkgPSAoeSA8ICh5MCArIHkxKSAvIDIpIDw8IDEgfCAoeCA8ICh4MCArIHgxKSAvIDIpKSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICB3aGlsZSAoeiAqPSAyLCB4MSA9IHgwICsgeiwgeTEgPSB5MCArIHosIHggPiB4MSB8fCB5ID4geTEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MSA9IHkwICsgeiwgeDAgPiB4IHx8IHkgPiB5MSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIGRvIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgd2hpbGUgKHogKj0gMiwgeDEgPSB4MCArIHosIHkwID0geTEgLSB6LCB4ID4geDEgfHwgeTAgPiB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICB3aGlsZSAoeiAqPSAyLCB4MCA9IHgxIC0geiwgeTAgPSB5MSAtIHosIHgwID4geCB8fCB5MCA+IHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lmxlbmd0aCkgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgY292ZXJzIHRoZSBwb2ludCBhbHJlYWR5LCBqdXN0IHJldHVybi5cbiAgZWxzZSByZXR1cm4gdGhpcztcblxuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuIiwiaW1wb3J0IHRyZWVfYWRkLCB7YWRkQWxsIGFzIHRyZWVfYWRkQWxsfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB0cmVlX2NvdmVyIGZyb20gXCIuL2NvdmVyXCI7XG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCB0cmVlX2V4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCB0cmVlX2ZpbmQgZnJvbSBcIi4vZmluZFwiO1xuaW1wb3J0IHRyZWVfcmVtb3ZlLCB7cmVtb3ZlQWxsIGFzIHRyZWVfcmVtb3ZlQWxsfSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCB0cmVlX3Jvb3QgZnJvbSBcIi4vcm9vdFwiO1xuaW1wb3J0IHRyZWVfc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgdHJlZV92aXNpdCBmcm9tIFwiLi92aXNpdFwiO1xuaW1wb3J0IHRyZWVfdmlzaXRBZnRlciBmcm9tIFwiLi92aXNpdEFmdGVyXCI7XG5pbXBvcnQgdHJlZV94LCB7ZGVmYXVsdFh9IGZyb20gXCIuL3hcIjtcbmltcG9ydCB0cmVlX3ksIHtkZWZhdWx0WX0gZnJvbSBcIi4veVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCA6IHgsIHkgPT0gbnVsbCA/IGRlZmF1bHRZIDogeSwgTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xufVxuXG5mdW5jdGlvbiBRdWFkdHJlZSh4LCB5LCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLl94ID0geDtcbiAgdGhpcy5feSA9IHk7XG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHRoaXMuX3Jvb3QgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XG4gIHZhciBjb3B5ID0ge2RhdGE6IGxlYWYuZGF0YX0sIG5leHQgPSBjb3B5O1xuICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICByZXR1cm4gY29weTtcbn1cblxudmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxudHJlZVByb3RvLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvcHkgPSBuZXcgUXVhZHRyZWUodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBub2RlcyxcbiAgICAgIGNoaWxkO1xuXG4gIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgaWYgKCFub2RlLmxlbmd0aCkgcmV0dXJuIGNvcHkuX3Jvb3QgPSBsZWFmX2NvcHkobm9kZSksIGNvcHk7XG5cbiAgbm9kZXMgPSBbe3NvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpfV07XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKGNoaWxkID0gbm9kZS5zb3VyY2VbaV0pIHtcbiAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICBlbHNlIG5vZGUudGFyZ2V0W2ldID0gbGVhZl9jb3B5KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn07XG5cbnRyZWVQcm90by5hZGQgPSB0cmVlX2FkZDtcbnRyZWVQcm90by5hZGRBbGwgPSB0cmVlX2FkZEFsbDtcbnRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG50cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbnRyZWVQcm90by5leHRlbnQgPSB0cmVlX2V4dGVudDtcbnRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xudHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xudHJlZVByb3RvLnJlbW92ZUFsbCA9IHRyZWVfcmVtb3ZlQWxsO1xudHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XG50cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbnRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG50cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcbnRyZWVQcm90by54ID0gdHJlZV94O1xudHJlZVByb3RvLnkgPSB0cmVlX3k7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gZGF0YS5wdXNoKG5vZGUuZGF0YSk7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICByZXRhaW5lcixcbiAgICAgIHByZXZpb3VzLFxuICAgICAgbmV4dCxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdGhpcztcblxuICAvLyBGaW5kIHRoZSBsZWFmIG5vZGUgZm9yIHRoZSBwb2ludC5cbiAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICBpZiAobm9kZS5sZW5ndGgpIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKCEocGFyZW50ID0gbm9kZSwgbm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICBpZiAobmV4dCA9IG5vZGUubmV4dCkgZGVsZXRlIG5vZGUubmV4dDtcblxuICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cbiAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHBvaW50LCByZW1vdmUgaXQuXG4gIGlmICghcGFyZW50KSByZXR1cm4gdGhpcy5fcm9vdCA9IG5leHQsIHRoaXM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xuXG4gIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXG4gIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICYmIG5vZGUgPT09IChwYXJlbnRbM10gfHwgcGFyZW50WzJdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMF0pXG4gICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGRhdGEubGVuZ3RoOyBpIDwgbjsgKytpKSB0aGlzLnJlbW92ZShkYXRhW2ldKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyArK3NpemU7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBxLCBub2RlID0gdGhpcy5fcm9vdCwgY2hpbGQsIHgwLCB5MCwgeDEsIHkxO1xuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgaWYgKCFjYWxsYmFjayhub2RlID0gcS5ub2RlLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEpICYmIG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKCkge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuXG4gICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICBmb3JjZShhbHBoYSk7XG4gICAgfSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgIGlmIChub2RlLmZ5ID09IG51bGwpIG5vZGUueSArPSBub2RlLnZ5ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLmluZGV4ID0gaTtcbiAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcbiAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgIGlmIChmb3JjZS5pbml0aWFsaXplKSBmb3JjZS5pbml0aWFsaXplKG5vZGVzKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtXFwoIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5mdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICB0aGlzLmZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIjtcbiAgdGhpcy5hbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiO1xuICB0aGlzLnNpZ24gPSBtYXRjaFszXSB8fCBcIi1cIjtcbiAgdGhpcy5zeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiO1xuICB0aGlzLnplcm8gPSAhIW1hdGNoWzVdO1xuICB0aGlzLndpZHRoID0gbWF0Y2hbNl0gJiYgK21hdGNoWzZdO1xuICB0aGlzLmNvbW1hID0gISFtYXRjaFs3XTtcbiAgdGhpcy5wcmVjaXNpb24gPSBtYXRjaFs4XSAmJiArbWF0Y2hbOF0uc2xpY2UoMSk7XG4gIHRoaXMudHJpbSA9ICEhbWF0Y2hbOV07XG4gIHRoaXMudHlwZSA9IG1hdGNoWzEwXSB8fCBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT0gbnVsbCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT0gbnVsbCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSB7IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaTAgPSAwOyB9IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nICYmIGxvY2FsZS50aG91c2FuZHMgPyBmb3JtYXRHcm91cChsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZS50aG91c2FuZHMpIDogaWRlbnRpdHksXG4gICAgICBjdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSxcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCxcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID8gZm9ybWF0TnVtZXJhbHMobG9jYWxlLm51bWVyYWxzKSA6IGlkZW50aXR5LFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50IHx8IFwiJVwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09IG51bGwgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVswXSA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzFdIDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMDtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gZHVyaW5nIGZvcm1hdHRpbmcsIHRyZWF0IGFzIHBvc2l0aXZlLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDApIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBcIi1cIikgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiLy8gQWRkcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIHdpdGggdHdpY2UgdGhlIG5vcm1hbCBwcmVjaXNpb24uXG4vLyBSZWZlcmVuY2U6IEouIFIuIFNoZXdjaHVrLCBBZGFwdGl2ZSBQcmVjaXNpb24gRmxvYXRpbmctUG9pbnQgQXJpdGhtZXRpYyBhbmRcbi8vIEZhc3QgUm9idXN0IEdlb21ldHJpYyBQcmVkaWNhdGVzLCBEaXNjcmV0ZSAmIENvbXB1dGF0aW9uYWwgR2VvbWV0cnkgMTgoMylcbi8vIDMwNeKAkzM2MyAoMTk5NykuXG4vLyBDb2RlIGFkYXB0ZWQgZnJvbSBHZW9ncmFwaGljTGliIGJ5IENoYXJsZXMgRi4gRi4gS2FybmV5LFxuLy8gaHR0cDovL2dlb2dyYXBoaWNsaWIuc291cmNlZm9yZ2UubmV0L1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBBZGRlcjtcbn1cblxuZnVuY3Rpb24gQWRkZXIoKSB7XG4gIHRoaXMucmVzZXQoKTtcbn1cblxuQWRkZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQWRkZXIsXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnMgPSAvLyByb3VuZGVkIHZhbHVlXG4gICAgdGhpcy50ID0gMDsgLy8gZXhhY3QgZXJyb3JcbiAgfSxcbiAgYWRkOiBmdW5jdGlvbih5KSB7XG4gICAgYWRkKHRlbXAsIHksIHRoaXMudCk7XG4gICAgYWRkKHRoaXMsIHRlbXAucywgdGhpcy5zKTtcbiAgICBpZiAodGhpcy5zKSB0aGlzLnQgKz0gdGVtcC50O1xuICAgIGVsc2UgdGhpcy5zID0gdGVtcC50O1xuICB9LFxuICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zO1xuICB9XG59O1xuXG52YXIgdGVtcCA9IG5ldyBBZGRlcjtcblxuZnVuY3Rpb24gYWRkKGFkZGVyLCBhLCBiKSB7XG4gIHZhciB4ID0gYWRkZXIucyA9IGEgKyBiLFxuICAgICAgYnYgPSB4IC0gYSxcbiAgICAgIGF2ID0geCAtIGJ2O1xuICBhZGRlci50ID0gKGEgLSBhdikgKyAoYiAtIGJ2KTtcbn1cbiIsImV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciBxdWFydGVyUGkgPSBwaSAvIDQ7XG5leHBvcnQgdmFyIHRhdSA9IHBpICogMjtcblxuZXhwb3J0IHZhciBkZWdyZWVzID0gMTgwIC8gcGk7XG5leHBvcnQgdmFyIHJhZGlhbnMgPSBwaSAvIDE4MDtcblxuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbiA9IE1hdGguYXRhbjtcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgY2VpbCA9IE1hdGguY2VpbDtcbmV4cG9ydCB2YXIgZXhwID0gTWF0aC5leHA7XG5leHBvcnQgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbmV4cG9ydCB2YXIgbG9nID0gTWF0aC5sb2c7XG5leHBvcnQgdmFyIHBvdyA9IE1hdGgucG93O1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc2lnbiA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbih4KSB7IHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDsgfTtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcbmV4cG9ydCB2YXIgdGFuID0gTWF0aC50YW47XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID4gMSA/IGhhbGZQaSA6IHggPCAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXZlcnNpbih4KSB7XG4gIHJldHVybiAoeCA9IHNpbih4IC8gMikpICogeDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiZnVuY3Rpb24gc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cnksIHN0cmVhbSkge1xuICBpZiAoZ2VvbWV0cnkgJiYgc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBzdHJlYW0pO1xuICB9XG59XG5cbnZhciBzdHJlYW1PYmplY3RUeXBlID0ge1xuICBGZWF0dXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdC5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9XG59O1xuXG52YXIgc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICBTcGhlcmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtLnNwaGVyZSgpO1xuICB9LFxuICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBvYmplY3QgPSBvYmplY3QuY29vcmRpbmF0ZXM7XG4gICAgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICB9LFxuICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbUxpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0sIDApO1xuICB9LFxuICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMCk7XG4gIH0sXG4gIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSk7XG4gIH0sXG4gIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgc3RyZWFtKTtcbiAgfSxcbiAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBnZW9tZXRyaWVzID0gb2JqZWN0Lmdlb21ldHJpZXMsIGkgPSAtMSwgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBzdHJlYW0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzLCBzdHJlYW0sIGNsb3NlZCkge1xuICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcbiAgc3RyZWFtLmxpbmVFbmQoKTtcbn1cblxuZnVuY3Rpb24gc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgc3RyZWFtKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMSk7XG4gIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gIGlmIChvYmplY3QgJiYgc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICBzdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBzdHJlYW0pO1xuICB9XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YXRhbjIsIGNvcywgcXVhcnRlclBpLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcFwiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW1cIjtcblxuZXhwb3J0IHZhciBhcmVhUmluZ1N1bSA9IGFkZGVyKCk7XG5cbnZhciBhcmVhU3VtID0gYWRkZXIoKSxcbiAgICBsYW1iZGEwMCxcbiAgICBwaGkwMCxcbiAgICBsYW1iZGEwLFxuICAgIGNvc1BoaTAsXG4gICAgc2luUGhpMDtcblxuZXhwb3J0IHZhciBhcmVhU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYVJpbmcgPSArYXJlYVJpbmdTdW07XG4gICAgYXJlYVN1bS5hZGQoYXJlYVJpbmcgPCAwID8gdGF1ICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XG4gICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmxpbmVFbmQgPSB0aGlzLnBvaW50ID0gbm9vcDtcbiAgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3VtLmFkZCh0YXUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3MocGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaSksIHNpblBoaTAgPSBzaW4ocGhpKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgcGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaTsgLy8gaGFsZiB0aGUgYW5ndWxhciBkaXN0YW5jZSBmcm9tIHNvdXRoIHBvbGVcblxuICAvLyBTcGhlcmljYWwgZXhjZXNzIEUgZm9yIGEgc3BoZXJpY2FsIHRyaWFuZ2xlIHdpdGggdmVydGljZXM6IHNvdXRoIHBvbGUsXG4gIC8vIHByZXZpb3VzIHBvaW50LCBjdXJyZW50IHBvaW50LiAgVXNlcyBhIGZvcm11bGEgZGVyaXZlZCBmcm9tIENhZ25vbGnigJlzXG4gIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cbiAgdmFyIGRMYW1iZGEgPSBsYW1iZGEgLSBsYW1iZGEwLFxuICAgICAgc2RMYW1iZGEgPSBkTGFtYmRhID49IDAgPyAxIDogLTEsXG4gICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBrID0gc2luUGhpMCAqIHNpblBoaSxcbiAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpICsgayAqIGNvcyhhZExhbWJkYSksXG4gICAgICB2ID0gayAqIHNkTGFtYmRhICogc2luKGFkTGFtYmRhKTtcbiAgYXJlYVJpbmdTdW0uYWRkKGF0YW4yKHYsIHUpKTtcblxuICAvLyBBZHZhbmNlIHRoZSBwcmV2aW91cyBwb2ludHMuXG4gIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3NQaGksIHNpblBoaTAgPSBzaW5QaGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCkge1xuICBhcmVhU3VtLnJlc2V0KCk7XG4gIHN0cmVhbShvYmplY3QsIGFyZWFTdHJlYW0pO1xuICByZXR1cm4gYXJlYVN1bSAqIDI7XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3BoZXJpY2FsKGNhcnRlc2lhbikge1xuICByZXR1cm4gW2F0YW4yKGNhcnRlc2lhblsxXSwgY2FydGVzaWFuWzBdKSwgYXNpbihjYXJ0ZXNpYW5bMl0pXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSwgcGhpID0gc3BoZXJpY2FsWzFdLCBjb3NQaGkgPSBjb3MocGhpKTtcbiAgcmV0dXJuIFtjb3NQaGkgKiBjb3MobGFtYmRhKSwgY29zUGhpICogc2luKGxhbWJkYSksIHNpbihwaGkpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXV07XG59XG5cbi8vIFRPRE8gcmV0dXJuIGFcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICByZXR1cm4gW3ZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGtdO1xufVxuXG4vLyBUT0RPIHJldHVybiBkXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gIHZhciBsID0gc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2FyZWFTdHJlYW0sIGFyZWFSaW5nU3VtfSBmcm9tIFwiLi9hcmVhXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UsIHNwaGVyaWNhbH0gZnJvbSBcIi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2FicywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFuc30gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW1cIjtcblxudmFyIGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEsIC8vIGJvdW5kc1xuICAgIGxhbWJkYTIsIC8vIHByZXZpb3VzIGxhbWJkYS1jb29yZGluYXRlXG4gICAgbGFtYmRhMDAsIHBoaTAwLCAvLyBmaXJzdCBwb2ludFxuICAgIHAwLCAvLyBwcmV2aW91cyAzRCBwb2ludFxuICAgIGRlbHRhU3VtID0gYWRkZXIoKSxcbiAgICByYW5nZXMsXG4gICAgcmFuZ2U7XG5cbnZhciBib3VuZHNTdHJlYW0gPSB7XG4gIHBvaW50OiBib3VuZHNQb2ludCxcbiAgbGluZVN0YXJ0OiBib3VuZHNMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGJvdW5kc0xpbmVFbmQsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUmluZ1BvaW50O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lU3RhcnQgPSBib3VuZHNSaW5nU3RhcnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNSaW5nRW5kO1xuICAgIGRlbHRhU3VtLnJlc2V0KCk7XG4gICAgYXJlYVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc0xpbmVTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc0xpbmVFbmQ7XG4gICAgaWYgKGFyZWFSaW5nU3VtIDwgMCkgbGFtYmRhMCA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XG4gICAgZWxzZSBpZiAoZGVsdGFTdW0gPiBlcHNpbG9uKSBwaGkxID0gOTA7XG4gICAgZWxzZSBpZiAoZGVsdGFTdW0gPCAtZXBzaWxvbikgcGhpMCA9IC05MDtcbiAgICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG59XG5cbmZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICB2YXIgcCA9IGNhcnRlc2lhbihbbGFtYmRhICogcmFkaWFucywgcGhpICogcmFkaWFuc10pO1xuICBpZiAocDApIHtcbiAgICB2YXIgbm9ybWFsID0gY2FydGVzaWFuQ3Jvc3MocDAsIHApLFxuICAgICAgICBlcXVhdG9yaWFsID0gW25vcm1hbFsxXSwgLW5vcm1hbFswXSwgMF0sXG4gICAgICAgIGluZmxlY3Rpb24gPSBjYXJ0ZXNpYW5Dcm9zcyhlcXVhdG9yaWFsLCBub3JtYWwpO1xuICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW5mbGVjdGlvbik7XG4gICAgaW5mbGVjdGlvbiA9IHNwaGVyaWNhbChpbmZsZWN0aW9uKTtcbiAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyLFxuICAgICAgICBzaWduID0gZGVsdGEgPiAwID8gMSA6IC0xLFxuICAgICAgICBsYW1iZGFpID0gaW5mbGVjdGlvblswXSAqIGRlZ3JlZXMgKiBzaWduLFxuICAgICAgICBwaGlpLFxuICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnMoZGVsdGEpID4gMTgwO1xuICAgIGlmIChhbnRpbWVyaWRpYW4gXiAoc2lnbiAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduICogbGFtYmRhKSkge1xuICAgICAgcGhpaSA9IGluZmxlY3Rpb25bMV0gKiBkZWdyZWVzO1xuICAgICAgaWYgKHBoaWkgPiBwaGkxKSBwaGkxID0gcGhpaTtcbiAgICB9IGVsc2UgaWYgKGxhbWJkYWkgPSAobGFtYmRhaSArIDM2MCkgJSAzNjAgLSAxODAsIGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gLWluZmxlY3Rpb25bMV0gKiBkZWdyZWVzO1xuICAgICAgaWYgKHBoaWkgPCBwaGkwKSBwaGkwID0gcGhpaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gICAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgICB9XG4gICAgaWYgKGFudGltZXJpZGlhbikge1xuICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTIpIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAsIGxhbWJkYSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTAgPSBsYW1iZGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsYW1iZGExID49IGxhbWJkYTApIHtcbiAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTApIGxhbWJkYTAgPSBsYW1iZGE7XG4gICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGExKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTIpIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTAgPSBsYW1iZGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICB9XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lU3RhcnQoKSB7XG4gIGJvdW5kc1N0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbn1cblxuZnVuY3Rpb24gYm91bmRzTGluZUVuZCgpIHtcbiAgcmFuZ2VbMF0gPSBsYW1iZGEwLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xuICBwMCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICBpZiAocDApIHtcbiAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyO1xuICAgIGRlbHRhU3VtLmFkZChhYnMoZGVsdGEpID4gMTgwID8gZGVsdGEgKyAoZGVsdGEgPiAwID8gMzYwIDogLTM2MCkgOiBkZWx0YSk7XG4gIH0gZWxzZSB7XG4gICAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICB9XG4gIGFyZWFTdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICBsaW5lUG9pbnQobGFtYmRhLCBwaGkpO1xufVxuXG5mdW5jdGlvbiBib3VuZHNSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ubGluZVN0YXJ0KCk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdFbmQoKSB7XG4gIGJvdW5kc1JpbmdQb2ludChsYW1iZGEwMCwgcGhpMDApO1xuICBhcmVhU3RyZWFtLmxpbmVFbmQoKTtcbiAgaWYgKGFicyhkZWx0YVN1bSkgPiBlcHNpbG9uKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKTtcbiAgcmFuZ2VbMF0gPSBsYW1iZGEwLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIHAwID0gbnVsbDtcbn1cblxuLy8gRmluZHMgdGhlIGxlZnQtcmlnaHQgZGlzdGFuY2UgYmV0d2VlbiB0d28gbG9uZ2l0dWRlcy5cbi8vIFRoaXMgaXMgYWxtb3N0IHRoZSBzYW1lIGFzIChsYW1iZGExIC0gbGFtYmRhMCArIDM2MMKwKSAlIDM2MMKwLCBleGNlcHQgdGhhdCB3ZSB3YW50XG4vLyB0aGUgZGlzdGFuY2UgYmV0d2VlbiDCsTE4MMKwIHRvIGJlIDM2MMKwLlxuZnVuY3Rpb24gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkge1xuICByZXR1cm4gKGxhbWJkYTEgLT0gbGFtYmRhMCkgPCAwID8gbGFtYmRhMSArIDM2MCA6IGxhbWJkYTE7XG59XG5cbmZ1bmN0aW9uIHJhbmdlQ29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb250YWlucyhyYW5nZSwgeCkge1xuICByZXR1cm4gcmFuZ2VbMF0gPD0gcmFuZ2VbMV0gPyByYW5nZVswXSA8PSB4ICYmIHggPD0gcmFuZ2VbMV0gOiB4IDwgcmFuZ2VbMF0gfHwgcmFuZ2VbMV0gPCB4O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIHZhciBpLCBuLCBhLCBiLCBtZXJnZWQsIGRlbHRhTWF4LCBkZWx0YTtcblxuICBwaGkxID0gbGFtYmRhMSA9IC0obGFtYmRhMCA9IHBoaTAgPSBJbmZpbml0eSk7XG4gIHJhbmdlcyA9IFtdO1xuICBzdHJlYW0oZmVhdHVyZSwgYm91bmRzU3RyZWFtKTtcblxuICAvLyBGaXJzdCwgc29ydCByYW5nZXMgYnkgdGhlaXIgbWluaW11bSBsb25naXR1ZGVzLlxuICBpZiAobiA9IHJhbmdlcy5sZW5ndGgpIHtcbiAgICByYW5nZXMuc29ydChyYW5nZUNvbXBhcmUpO1xuXG4gICAgLy8gVGhlbiwgbWVyZ2UgYW55IHJhbmdlcyB0aGF0IG92ZXJsYXAuXG4gICAgZm9yIChpID0gMSwgYSA9IHJhbmdlc1swXSwgbWVyZ2VkID0gW2FdOyBpIDwgbjsgKytpKSB7XG4gICAgICBiID0gcmFuZ2VzW2ldO1xuICAgICAgaWYgKHJhbmdlQ29udGFpbnMoYSwgYlswXSkgfHwgcmFuZ2VDb250YWlucyhhLCBiWzFdKSkge1xuICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XG4gICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBmaW5kIHRoZSBsYXJnZXN0IGdhcCBiZXR3ZWVuIHRoZSBtZXJnZWQgcmFuZ2VzLlxuICAgIC8vIFRoZSBmaW5hbCBib3VuZGluZyBib3ggd2lsbCBiZSB0aGUgaW52ZXJzZSBvZiB0aGlzIGdhcC5cbiAgICBmb3IgKGRlbHRhTWF4ID0gLUluZmluaXR5LCBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgIGIgPSBtZXJnZWRbaV07XG4gICAgICBpZiAoKGRlbHRhID0gYW5nbGUoYVsxXSwgYlswXSkpID4gZGVsdGFNYXgpIGRlbHRhTWF4ID0gZGVsdGEsIGxhbWJkYTAgPSBiWzBdLCBsYW1iZGExID0gYVsxXTtcbiAgICB9XG4gIH1cblxuICByYW5nZXMgPSByYW5nZSA9IG51bGw7XG5cbiAgcmV0dXJuIGxhbWJkYTAgPT09IEluZmluaXR5IHx8IHBoaTAgPT09IEluZmluaXR5XG4gICAgICA/IFtbTmFOLCBOYU5dLCBbTmFOLCBOYU5dXVxuICAgICAgOiBbW2xhbWJkYTAsIHBoaTBdLCBbbGFtYmRhMSwgcGhpMV1dO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcbiAgfVxuXG4gIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBiLmludmVydCh4LCB5KSwgeCAmJiBhLmludmVydCh4WzBdLCB4WzFdKTtcbiAgfTtcblxuICByZXR1cm4gY29tcG9zZTtcbn1cbiIsImltcG9ydCBjb21wb3NlIGZyb20gXCIuL2NvbXBvc2VcIjtcbmltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgcGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEgPiBwaSA/IGxhbWJkYSAtIHRhdSA6IGxhbWJkYSA8IC1waSA/IGxhbWJkYSArIHRhdSA6IGxhbWJkYSwgcGhpXTtcbn1cblxucm90YXRpb25JZGVudGl0eS5pbnZlcnQgPSByb3RhdGlvbklkZW50aXR5O1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgcmV0dXJuIChkZWx0YUxhbWJkYSAlPSB0YXUpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgOiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkpXG4gICAgOiAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpXG4gICAgOiByb3RhdGlvbklkZW50aXR5KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSA/IGxhbWJkYSAtIHRhdSA6IGxhbWJkYSA8IC1waSA/IGxhbWJkYSArIHRhdSA6IGxhbWJkYSwgcGhpXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcbiAgcm90YXRpb24uaW52ZXJ0ID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKC1kZWx0YUxhbWJkYSk7XG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICB2YXIgY29zRGVsdGFQaGkgPSBjb3MoZGVsdGFQaGkpLFxuICAgICAgc2luRGVsdGFQaGkgPSBzaW4oZGVsdGFQaGkpLFxuICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyhkZWx0YUdhbW1hKSxcbiAgICAgIHNpbkRlbHRhR2FtbWEgPSBzaW4oZGVsdGFHYW1tYSk7XG5cbiAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YUdhbW1hICsgeSAqIHNpbkRlbHRhR2FtbWEpXG4gICAgXTtcbiAgfVxuXG4gIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhR2FtbWEgLSB5ICogc2luRGVsdGFHYW1tYTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgKyB6ICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpICsgayAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKVxuICAgIF07XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb3RhdGUpIHtcbiAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcblxuICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cbiIsImltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlLCBzcGhlcmljYWx9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge2Fjb3MsIGNvcywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCB7cm90YXRlUmFkaWFuc30gZnJvbSBcIi4vcm90YXRpb25cIjtcblxuLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIHQwLCB0MSkge1xuICBpZiAoIWRlbHRhKSByZXR1cm47XG4gIHZhciBjb3NSYWRpdXMgPSBjb3MocmFkaXVzKSxcbiAgICAgIHNpblJhZGl1cyA9IHNpbihyYWRpdXMpLFxuICAgICAgc3RlcCA9IGRpcmVjdGlvbiAqIGRlbHRhO1xuICBpZiAodDAgPT0gbnVsbCkge1xuICAgIHQwID0gcmFkaXVzICsgZGlyZWN0aW9uICogdGF1O1xuICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gIH0gZWxzZSB7XG4gICAgdDAgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MCk7XG4gICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgaWYgKGRpcmVjdGlvbiA+IDAgPyB0MCA8IHQxIDogdDAgPiB0MSkgdDAgKz0gZGlyZWN0aW9uICogdGF1O1xuICB9XG4gIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xuICAgIHBvaW50ID0gc3BoZXJpY2FsKFtjb3NSYWRpdXMsIC1zaW5SYWRpdXMgKiBjb3ModCksIC1zaW5SYWRpdXMgKiBzaW4odCldKTtcbiAgICBzdHJlYW0ucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgfVxufVxuXG4vLyBSZXR1cm5zIHRoZSBzaWduZWQgYW5nbGUgb2YgYSBjYXJ0ZXNpYW4gcG9pbnQgcmVsYXRpdmUgdG8gW2Nvc1JhZGl1cywgMCwgMF0uXG5mdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICBwb2ludCA9IGNhcnRlc2lhbihwb2ludCksIHBvaW50WzBdIC09IGNvc1JhZGl1cztcbiAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShwb2ludCk7XG4gIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gIHJldHVybiAoKC1wb2ludFsyXSA8IDAgPyAtcmFkaXVzIDogcmFkaXVzKSArIHRhdSAtIGVwc2lsb24pICUgdGF1O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNlbnRlciA9IGNvbnN0YW50KFswLCAwXSksXG4gICAgICByYWRpdXMgPSBjb25zdGFudCg5MCksXG4gICAgICBwcmVjaXNpb24gPSBjb25zdGFudCg2KSxcbiAgICAgIHJpbmcsXG4gICAgICByb3RhdGUsXG4gICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuICAgIHhbMF0gKj0gZGVncmVlcywgeFsxXSAqPSBkZWdyZWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgIHZhciBjID0gY2VudGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgcmluZyA9IFtdO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICBjID0ge3R5cGU6IFwiUG9seWdvblwiLCBjb29yZGluYXRlczogW3JpbmddfTtcbiAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbK19bMF0sICtfWzFdXSksIGNpcmNsZSkgOiBjZW50ZXI7XG4gIH07XG5cbiAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHJhZGl1cztcbiAgfTtcblxuICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xuICB9O1xuXG4gIHJldHVybiBjaXJjbGU7XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxpbmVzID0gW10sXG4gICAgICBsaW5lO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBub29wLFxuICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaW5lcztcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBsaW5lID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24gJiYgYWJzKGFbMV0gLSBiWzFdKSA8IGVwc2lsb247XG59XG4iLCJpbXBvcnQgcG9pbnRFcXVhbCBmcm9tIFwiLi4vcG9pbnRFcXVhbFwiO1xuXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gIHRoaXMueCA9IHBvaW50O1xuICB0aGlzLnogPSBwb2ludHM7XG4gIHRoaXMubyA9IG90aGVyOyAvLyBhbm90aGVyIGludGVyc2VjdGlvblxuICB0aGlzLmUgPSBlbnRyeTsgLy8gaXMgYW4gZW50cnk/XG4gIHRoaXMudiA9IGZhbHNlOyAvLyB2aXNpdGVkXG4gIHRoaXMubiA9IHRoaXMucCA9IG51bGw7IC8vIG5leHQgJiBwcmV2aW91c1xufVxuXG4vLyBBIGdlbmVyYWxpemVkIHBvbHlnb24gY2xpcHBpbmcgYWxnb3JpdGhtOiBnaXZlbiBhIHBvbHlnb24gdGhhdCBoYXMgYmVlbiBjdXRcbi8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcbi8vIGFsb25nIHRoZSBjbGlwIGVkZ2UuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pIHtcbiAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgIGNsaXAgPSBbXSxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgIGlmICgobiA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPD0gMCkgcmV0dXJuO1xuICAgIHZhciBuLCBwMCA9IHNlZ21lbnRbMF0sIHAxID0gc2VnbWVudFtuXSwgeDtcblxuICAgIC8vIElmIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgb2YgYSBzZWdtZW50IGFyZSBjb2luY2lkZW50LCB0aGVuIHRyZWF0IGFzIGFcbiAgICAvLyBjbG9zZWQgcmluZy4gVE9ETyBpZiBhbGwgcmluZ3MgYXJlIGNsb3NlZCwgdGhlbiB0aGUgd2luZGluZyBvcmRlciBvZiB0aGVcbiAgICAvLyBleHRlcmlvciByaW5nIHNob3VsZCBiZSBjaGVja2VkLlxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIHNlZ21lbnQsIG51bGwsIHRydWUpKTtcbiAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMCwgbnVsbCwgeCwgZmFsc2UpKTtcbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIG51bGwsIHgsIHRydWUpKTtcbiAgfSk7XG5cbiAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIGNsaXAuc29ydChjb21wYXJlSW50ZXJzZWN0aW9uKTtcbiAgbGluayhzdWJqZWN0KTtcbiAgbGluayhjbGlwKTtcblxuICBmb3IgKGkgPSAwLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjbGlwW2ldLmUgPSBzdGFydEluc2lkZSA9ICFzdGFydEluc2lkZTtcbiAgfVxuXG4gIHZhciBzdGFydCA9IHN1YmplY3RbMF0sXG4gICAgICBwb2ludHMsXG4gICAgICBwb2ludDtcblxuICB3aGlsZSAoMSkge1xuICAgIC8vIEZpbmQgZmlyc3QgdW52aXNpdGVkIGludGVyc2VjdGlvbi5cbiAgICB2YXIgY3VycmVudCA9IHN0YXJ0LFxuICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xuICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50LnYgPSBjdXJyZW50Lm8udiA9IHRydWU7XG4gICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aDsgaSA8IG47ICsraSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgZm9yIChpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnA7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICBzdHJlYW0ubGluZUVuZCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxpbmsoYXJyYXkpIHtcbiAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgdmFyIG4sXG4gICAgICBpID0gMCxcbiAgICAgIGEgPSBhcnJheVswXSxcbiAgICAgIGI7XG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgIGIucCA9IGE7XG4gICAgYSA9IGI7XG4gIH1cbiAgYS5uID0gYiA9IGFycmF5WzBdO1xuICBiLnAgPSBhO1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2V9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBxdWFydGVyUGksIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBzdW0gPSBhZGRlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICBwaGkgPSBwb2ludFsxXSxcbiAgICAgIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgbm9ybWFsID0gW3NpbihsYW1iZGEpLCAtY29zKGxhbWJkYSksIDBdLFxuICAgICAgYW5nbGUgPSAwLFxuICAgICAgd2luZGluZyA9IDA7XG5cbiAgc3VtLnJlc2V0KCk7XG5cbiAgaWYgKHNpblBoaSA9PT0gMSkgcGhpID0gaGFsZlBpICsgZXBzaWxvbjtcbiAgZWxzZSBpZiAoc2luUGhpID09PSAtMSkgcGhpID0gLWhhbGZQaSAtIGVwc2lsb247XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IHBvaW50MFswXSxcbiAgICAgICAgcGhpMCA9IHBvaW50MFsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgIHNpblBoaTAgPSBzaW4ocGhpMCksXG4gICAgICAgIGNvc1BoaTAgPSBjb3MocGhpMCk7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraiwgbGFtYmRhMCA9IGxhbWJkYTEsIHNpblBoaTAgPSBzaW5QaGkxLCBjb3NQaGkwID0gY29zUGhpMSwgcG9pbnQwID0gcG9pbnQxKSB7XG4gICAgICB2YXIgcG9pbnQxID0gcmluZ1tqXSxcbiAgICAgICAgICBsYW1iZGExID0gcG9pbnQxWzBdLFxuICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTEgPSBzaW4ocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyhwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGksXG4gICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICBzdW0uYWRkKGF0YW4yKGsgKiBzaWduICogc2luKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zKGFic0RlbHRhKSkpO1xuICAgICAgYW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZGVsdGEgKyBzaWduICogdGF1IDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiB8fCBhbmdsZSA8IGVwc2lsb24gJiYgc3VtIDwgLWVwc2lsb24pIF4gKHdpbmRpbmcgJiAxKTtcbn1cbiIsImltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luXCI7XG5pbXBvcnQge2Vwc2lsb24sIGhhbGZQaX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBwb2x5Z29uQ29udGFpbnMgZnJvbSBcIi4uL3BvbHlnb25Db250YWluc1wiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2luaykge1xuICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHN0YXJ0KTtcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEsIHBoaSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgcmluZ1NpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgcmluZyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgIHBvaW50O1xuXG4gICAgICByaW5nLnBvcCgpO1xuICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGJbMV0pO1xufVxuIiwiaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7YWJzLCBhdGFuLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgcGksIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xpcChcbiAgZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICBjbGlwQW50aW1lcmlkaWFuTGluZSxcbiAgY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlLFxuICBbLXBpLCAtaGFsZlBpXVxuKTtcblxuLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm8gaW50ZXJzZWN0aW9uczsgMiAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gIHZhciBsYW1iZGEwID0gTmFOLFxuICAgICAgcGhpMCA9IE5hTixcbiAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICByZXR1cm4ge1xuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBjbGVhbiA9IDE7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhMSwgcGhpMSkge1xuICAgICAgdmFyIHNpZ24xID0gbGFtYmRhMSA+IDAgPyBwaSA6IC1waSxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbikgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwLCBwaGkwID0gKHBoaTAgKyBwaGkxKSAvIDIgPiAwID8gaGFsZlBpIDogLWhhbGZQaSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSkgeyAvLyBsaW5lIGNyb3NzZXMgYW50aW1lcmlkaWFuXG4gICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24pIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uOyAvLyBoYW5kbGUgZGVnZW5lcmFjaWVzXG4gICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24pIGxhbWJkYTEgLT0gc2lnbjEgKiBlcHNpbG9uO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luKGxhbWJkYTAgLSBsYW1iZGExKTtcbiAgcmV0dXJuIGFicyhzaW5MYW1iZGEwTGFtYmRhMSkgPiBlcHNpbG9uXG4gICAgICA/IGF0YW4oKHNpbihwaGkwKSAqIChjb3NQaGkxID0gY29zKHBoaTEpKSAqIHNpbihsYW1iZGExKVxuICAgICAgICAgIC0gc2luKHBoaTEpICogKGNvc1BoaTAgPSBjb3MocGhpMCkpICogc2luKGxhbWJkYTApKVxuICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxuICAgICAgOiAocGhpMCArIHBoaTEpIC8gMjtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICB2YXIgcGhpO1xuICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgcGhpID0gZGlyZWN0aW9uICogaGFsZlBpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IGVwc2lsb24pIHtcbiAgICB2YXIgbGFtYmRhID0gZnJvbVswXSA8IHRvWzBdID8gcGkgOiAtcGk7XG4gICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcbiAgICBzdHJlYW0ucG9pbnQoLWxhbWJkYSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICB9XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQWRkSW5QbGFjZSwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbkRvdCwgY2FydGVzaWFuU2NhbGUsIHNwaGVyaWNhbH0gZnJvbSBcIi4uL2NhcnRlc2lhblwiO1xuaW1wb3J0IHtjaXJjbGVTdHJlYW19IGZyb20gXCIuLi9jaXJjbGVcIjtcbmltcG9ydCB7YWJzLCBjb3MsIGVwc2lsb24sIHBpLCByYWRpYW5zLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWxcIjtcbmltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cykge1xuICB2YXIgY3IgPSBjb3MocmFkaXVzKSxcbiAgICAgIGRlbHRhID0gNiAqIHJhZGlhbnMsXG4gICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbjsgLy8gVE9ETyBvcHRpbWlzZSBmb3IgdGhpcyBjb21tb24gY2FzZVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgZnJvbSwgdG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlzaWJsZShsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBjb3MobGFtYmRhKSAqIGNvcyhwaGkpID4gY3I7XG4gIH1cblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkgOiAtcGkpLCBwaGkpIDogMDtcbiAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgLy8gSGFuZGxlIGRlZ2VuZXJhY2llcy5cbiAgICAgICAgLy8gVE9ETyBpZ25vcmUgaWYgbm90IGNsaXBwaW5nIHBvbHlnb25zLlxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgIGlmICghcG9pbnQyIHx8IHBvaW50RXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IHBvaW50RXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICBwb2ludDFbMF0gKz0gZXBzaWxvbjtcbiAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uO1xuICAgICAgICAgICAgdiA9IHZpc2libGUocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnNpZGUgZ29pbmcgb3V0XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MjtcbiAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAvLyBJZiB0aGUgY29kZXMgZm9yIHR3byBwb2ludHMgYXJlIGRpZmZlcmVudCwgb3IgYXJlIGJvdGggemVybyxcbiAgICAgICAgICAvLyBhbmQgdGhlcmUgdGhpcyBzZWdtZW50IGludGVyc2VjdHMgd2l0aCB0aGUgc21hbGwgY2lyY2xlLlxuICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludDAgPSBwb2ludDEsIHYwID0gdiwgYzAgPSBjO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodjApIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICB9LFxuICAgICAgLy8gUmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIGlmIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBhbmQgdGhlIGZpcnN0XG4gICAgICAvLyBhbmQgbGFzdCBwb2ludHMgd2VyZSB2aXNpYmxlLlxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW4gfCAoKHYwMCAmJiB2MCkgPDwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXG4gIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICB2YXIgcGEgPSBjYXJ0ZXNpYW4oYSksXG4gICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xuXG4gICAgLy8gV2UgaGF2ZSB0d28gcGxhbmVzLCBuMS5wID0gZDEgYW5kIG4yLnAgPSBkMi5cbiAgICAvLyBGaW5kIGludGVyc2VjdGlvbiBsaW5lIHAodCkgPSBjMSBuMSArIGMyIG4yICsgdCAobjEg4qivIG4yKS5cbiAgICB2YXIgbjEgPSBbMSwgMCwgMF0sIC8vIG5vcm1hbFxuICAgICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXG4gICAgICAgIG4ybjIgPSBjYXJ0ZXNpYW5Eb3QobjIsIG4yKSxcbiAgICAgICAgbjFuMiA9IG4yWzBdLCAvLyBjYXJ0ZXNpYW5Eb3QobjEsIG4yKSxcbiAgICAgICAgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XG5cbiAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxuICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG5cbiAgICB2YXIgYzEgPSAgY3IgKiBuMm4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIGMyID0gLWNyICogbjFuMiAvIGRldGVybWluYW50LFxuICAgICAgICBuMXhuMiA9IGNhcnRlc2lhbkNyb3NzKG4xLCBuMiksXG4gICAgICAgIEEgPSBjYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLFxuICAgICAgICBCID0gY2FydGVzaWFuU2NhbGUobjIsIGMyKTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKEEsIEIpO1xuXG4gICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxuICAgIHZhciB1ID0gbjF4bjIsXG4gICAgICAgIHcgPSBjYXJ0ZXNpYW5Eb3QoQSwgdSksXG4gICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxuICAgICAgICB0MiA9IHcgKiB3IC0gdXUgKiAoY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG5cbiAgICBpZiAodDIgPCAwKSByZXR1cm47XG5cbiAgICB2YXIgdCA9IHNxcnQodDIpLFxuICAgICAgICBxID0gY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShxLCBBKTtcbiAgICBxID0gc3BoZXJpY2FsKHEpO1xuXG4gICAgaWYgKCF0d28pIHJldHVybiBxO1xuXG4gICAgLy8gVHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gICAgdmFyIGxhbWJkYTAgPSBhWzBdLFxuICAgICAgICBsYW1iZGExID0gYlswXSxcbiAgICAgICAgcGhpMCA9IGFbMV0sXG4gICAgICAgIHBoaTEgPSBiWzFdLFxuICAgICAgICB6O1xuXG4gICAgaWYgKGxhbWJkYTEgPCBsYW1iZGEwKSB6ID0gbGFtYmRhMCwgbGFtYmRhMCA9IGxhbWJkYTEsIGxhbWJkYTEgPSB6O1xuXG4gICAgdmFyIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgIHBvbGFyID0gYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbixcbiAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb247XG5cbiAgICBpZiAoIXBvbGFyICYmIHBoaTEgPCBwaGkwKSB6ID0gcGhpMCwgcGhpMCA9IHBoaTEsIHBoaTEgPSB6O1xuXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgZmlyc3QgcG9pbnQgaXMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGlmIChtZXJpZGlhblxuICAgICAgICA/IHBvbGFyXG4gICAgICAgICAgPyBwaGkwICsgcGhpMSA+IDAgXiBxWzFdIDwgKGFicyhxWzBdIC0gbGFtYmRhMCkgPCBlcHNpbG9uID8gcGhpMCA6IHBoaTEpXG4gICAgICAgICAgOiBwaGkwIDw9IHFbMV0gJiYgcVsxXSA8PSBwaGkxXG4gICAgICAgIDogZGVsdGEgPiBwaSBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpIC0gcmFkaXVzLFxuICAgICAgICBjb2RlID0gMDtcbiAgICBpZiAobGFtYmRhIDwgLXIpIGNvZGUgfD0gMTsgLy8gbGVmdFxuICAgIGVsc2UgaWYgKGxhbWJkYSA+IHIpIGNvZGUgfD0gMjsgLy8gcmlnaHRcbiAgICBpZiAocGhpIDwgLXIpIGNvZGUgfD0gNDsgLy8gYmVsb3dcbiAgICBlbHNlIGlmIChwaGkgPiByKSBjb2RlIHw9IDg7IC8vIGFib3ZlXG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICByZXR1cm4gY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1yYWRpdXNdIDogWy1waSwgcmFkaXVzIC0gcGldKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICBpZiAodDEgPCAxKSBiWzBdID0gYXggKyB0MSAqIGR4LCBiWzFdID0gYXkgKyB0MSAqIGR5O1xuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyXCI7XG5pbXBvcnQgY2xpcExpbmUgZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxudmFyIGNsaXBNYXggPSAxZTksIGNsaXBNaW4gPSAtY2xpcE1heDtcblxuLy8gVE9ETyBVc2UgZDMtcG9seWdvbuKAmXMgcG9seWdvbkNvbnRhaW5zIGhlcmUgZm9yIHRoZSByaW5nIGNoZWNrP1xuLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaXBSZWN0YW5nbGUoeDAsIHkwLCB4MSwgeTEpIHtcblxuICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcbiAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSlcbiAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgIHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICA6IGFicyhwWzBdIC0geDEpIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxuICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICA6IGNhID09PSAwID8gYlsxXSAtIGFbMV1cbiAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICA6IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sXG4gICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIHhfLCB5Xywgdl8sIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBjbGVhbjtcblxuICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XG4gICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlciBnZW9tZXRyeSB3aXRoaW4gYSBwb2x5Z29uIGFuZCB0aGVuIGNsaXAgaXQgZW4gbWFzc2UuXG4gICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXG4gICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgY2xpcFJlam9pbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XG4gICAgICBmaXJzdCA9IHRydWU7XG4gICAgICB2XyA9IGZhbHNlO1xuICAgICAgeF8gPSB5XyA9IE5hTjtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgLy8gSWRlYWxseSwgY29pbmNpZGVudCBpbnRlcnNlY3Rpb24gcG9pbnRzIHNob3VsZCBiZSBqaXR0ZXJlZCB0byBhdm9pZFxuICAgIC8vIGNsaXBwaW5nIGlzc3Vlcy5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XG4gICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgc2VnbWVudHMucHVzaChidWZmZXJTdHJlYW0ucmVzdWx0KCkpO1xuICAgICAgfVxuICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgaWYgKHZfKSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgdiA9IHZpc2libGUoeCwgeSk7XG4gICAgICBpZiAocG9seWdvbikgcmluZy5wdXNoKFt4LCB5XSk7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodiAmJiB2XykgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYSA9IFt4XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHhfKSksIHlfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeV8pKV0sXG4gICAgICAgICAgICAgIGIgPSBbeCA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHgpKSwgeSA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHkpKV07XG4gICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgaWYgKCF2Xykge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChiWzBdLCBiWzFdKTtcbiAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmICh2KSB7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcFN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuL3JlY3RhbmdsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHkwID0gMCxcbiAgICAgIHgxID0gOTYwLFxuICAgICAgeTEgPSA1MDAsXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgY2xpcDtcblxuICByZXR1cm4gY2xpcCA9IHtcbiAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gY2xpcFJlY3RhbmdsZSh4MCwgeTAsIHgxLCB5MSkoY2FjaGVTdHJlYW0gPSBzdHJlYW0pO1xuICAgIH0sXG4gICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdLCBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbCwgY2xpcCkgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAsXG4gICAgc2luUGhpMCxcbiAgICBjb3NQaGkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGxlbmd0aExpbmVTdGFydCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBub29wLFxuICBwb2x5Z29uRW5kOiBub29wXG59O1xuXG5mdW5jdGlvbiBsZW5ndGhMaW5lU3RhcnQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTGluZUVuZCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpbihwaGkpLCBjb3NQaGkwID0gY29zKHBoaSk7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgZGVsdGEgPSBhYnMobGFtYmRhIC0gbGFtYmRhMCksXG4gICAgICBjb3NEZWx0YSA9IGNvcyhkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbihkZWx0YSksXG4gICAgICB4ID0gY29zUGhpICogc2luRGVsdGEsXG4gICAgICB5ID0gY29zUGhpMCAqIHNpblBoaSAtIHNpblBoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwICogc2luUGhpICsgY29zUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhO1xuICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQoeCAqIHggKyB5ICogeSksIHopKTtcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpblBoaSwgY29zUGhpMCA9IGNvc1BoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGxlbmd0aFN1bS5yZXNldCgpO1xuICBzdHJlYW0ob2JqZWN0LCBsZW5ndGhTdHJlYW0pO1xuICByZXR1cm4gK2xlbmd0aFN1bTtcbn1cbiIsImltcG9ydCBsZW5ndGggZnJvbSBcIi4vbGVuZ3RoXCI7XG5cbnZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXSxcbiAgICBvYmplY3QgPSB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICBjb29yZGluYXRlc1sxXSA9IGI7XG4gIHJldHVybiBsZW5ndGgob2JqZWN0KTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgaGF2ZXJzaW4sIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB4MCA9IGFbMF0gKiByYWRpYW5zLFxuICAgICAgeTAgPSBhWzFdICogcmFkaWFucyxcbiAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICB5MSA9IGJbMV0gKiByYWRpYW5zLFxuICAgICAgY3kwID0gY29zKHkwKSxcbiAgICAgIHN5MCA9IHNpbih5MCksXG4gICAgICBjeTEgPSBjb3MoeTEpLFxuICAgICAgc3kxID0gc2luKHkxKSxcbiAgICAgIGt4MCA9IGN5MCAqIGNvcyh4MCksXG4gICAgICBreTAgPSBjeTAgKiBzaW4oeDApLFxuICAgICAga3gxID0gY3kxICogY29zKHgxKSxcbiAgICAgIGt5MSA9IGN5MSAqIHNpbih4MSksXG4gICAgICBkID0gMiAqIGFzaW4oc3FydChoYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGhhdmVyc2luKHgxIC0geDApKSksXG4gICAgICBrID0gc2luKGQpO1xuXG4gIHZhciBpbnRlcnBvbGF0ZSA9IGQgPyBmdW5jdGlvbih0KSB7XG4gICAgdmFyIEIgPSBzaW4odCAqPSBkKSAvIGssXG4gICAgICAgIEEgPSBzaW4oZCAtIHQpIC8gayxcbiAgICAgICAgeCA9IEEgKiBreDAgKyBCICoga3gxLFxuICAgICAgICB5ID0gQSAqIGt5MCArIEIgKiBreTEsXG4gICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSwgeCkgKiBkZWdyZWVzLFxuICAgICAgYXRhbjIoeiwgc3FydCh4ICogeCArIHkgKiB5KSkgKiBkZWdyZWVzXG4gICAgXTtcbiAgfSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBbeDAgKiBkZWdyZWVzLCB5MCAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIGludGVycG9sYXRlLmRpc3RhbmNlID0gZDtcblxuICByZXR1cm4gaW50ZXJwb2xhdGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuLi9hZGRlclwiO1xuaW1wb3J0IHthYnN9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgYXJlYVN1bSA9IGFkZGVyKCksXG4gICAgYXJlYVJpbmdTdW0gPSBhZGRlcigpLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBhcmVhU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhU3RyZWFtLnBvaW50ID0gbm9vcDtcbiAgICBhcmVhU3VtLmFkZChhYnMoYXJlYVJpbmdTdW0pKTtcbiAgICBhcmVhUmluZ1N1bS5yZXNldCgpO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhID0gYXJlYVN1bSAvIDI7XG4gICAgYXJlYVN1bS5yZXNldCgpO1xuICAgIHJldHVybiBhcmVhO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KHgsIHkpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludCh4LCB5KSB7XG4gIGFyZWFSaW5nU3VtLmFkZCh5MCAqIHggLSB4MCAqIHkpO1xuICB4MCA9IHgsIHkwID0geTtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludCh4MDAsIHkwMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFyZWFTdHJlYW07XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgeDAgPSBJbmZpbml0eSxcbiAgICB5MCA9IHgwLFxuICAgIHgxID0gLXgwLFxuICAgIHkxID0geDE7XG5cbnZhciBib3VuZHNTdHJlYW0gPSB7XG4gIHBvaW50OiBib3VuZHNQb2ludCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IG5vb3AsXG4gIHBvbHlnb25FbmQ6IG5vb3AsXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgxID0geTEgPSAtKHkwID0geDAgPSBJbmZpbml0eSk7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQoeCwgeSkge1xuICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gIGlmICh4ID4geDEpIHgxID0geDtcbiAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICBpZiAoeSA+IHkxKSB5MSA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJvdW5kc1N0cmVhbTtcbiIsImltcG9ydCB7dGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUGF0aENvbnRleHQucHJvdG90eXBlID0ge1xuICBfcmFkaXVzOiA0LjUsXG4gIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXM7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9wb2ludCA9IE5hTjtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIHRoaXMuX3BvaW50ID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4ICsgdGhpcy5fcmFkaXVzLCB5KTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5hcmMoeCwgeSwgdGhpcy5fcmFkaXVzLCAwLCB0YXUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogbm9vcFxufTtcbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi4vYWRkZXJcIjtcbmltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxlbmd0aFJpbmcsXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGxlbmd0aFN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnRGaXJzdDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKGxlbmd0aFJpbmcpIGxlbmd0aFBvaW50KHgwMCwgeTAwKTtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBub29wO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSB0cnVlO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gbnVsbDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gK2xlbmd0aFN1bTtcbiAgICBsZW5ndGhTdW0ucmVzZXQoKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9XG59O1xuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KHgsIHkpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnQ7XG4gIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludCh4LCB5KSB7XG4gIHgwIC09IHgsIHkwIC09IHk7XG4gIGxlbmd0aFN1bS5hZGQoc3FydCh4MCAqIHgwICsgeTAgKiB5MCkpO1xuICB4MCA9IHgsIHkwID0geTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGVuZ3RoU3RyZWFtO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcbiAgdGhpcy5fc3RyaW5nID0gW107XG59XG5cblBhdGhTdHJpbmcucHJvdG90eXBlID0ge1xuICBfcmFkaXVzOiA0LjUsXG4gIF9jaXJjbGU6IGNpcmNsZSg0LjUpLFxuICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgIGlmICgoXyA9ICtfKSAhPT0gdGhpcy5fcmFkaXVzKSB0aGlzLl9yYWRpdXMgPSBfLCB0aGlzLl9jaXJjbGUgPSBudWxsO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX3N0cmluZy5wdXNoKFwiWlwiKTtcbiAgICB0aGlzLl9wb2ludCA9IE5hTjtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX2NpcmNsZSA9PSBudWxsKSB0aGlzLl9jaXJjbGUgPSBjaXJjbGUodGhpcy5fcmFkaXVzKTtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCB0aGlzLl9jaXJjbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3N0cmluZy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIHRoaXMuX3N0cmluZyA9IFtdO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjaXJjbGUocmFkaXVzKSB7XG4gIHJldHVybiBcIm0wLFwiICsgcmFkaXVzXG4gICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzXG4gICAgICArIFwielwiO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWV0aG9kcykge1xuICByZXR1cm4ge1xuICAgIHN0cmVhbTogdHJhbnNmb3JtZXIobWV0aG9kcylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKG1ldGhvZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgIHMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiBzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW0oKSB7fVxuXG5UcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxufTtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBnZW9TdHJlYW19IGZyb20gXCIuLi9zdHJlYW1cIjtcbmltcG9ydCBib3VuZHNTdHJlYW0gZnJvbSBcIi4uL3BhdGgvYm91bmRzXCI7XG5cbmZ1bmN0aW9uIGZpdChwcm9qZWN0aW9uLCBmaXRCb3VuZHMsIG9iamVjdCkge1xuICB2YXIgY2xpcCA9IHByb2plY3Rpb24uY2xpcEV4dGVudCAmJiBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoKTtcbiAgcHJvamVjdGlvbi5zY2FsZSgxNTApLnRyYW5zbGF0ZShbMCwgMF0pO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQobnVsbCk7XG4gIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb24uc3RyZWFtKGJvdW5kc1N0cmVhbSkpO1xuICBmaXRCb3VuZHMoYm91bmRzU3RyZWFtLnJlc3VsdCgpKTtcbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuICByZXR1cm4gcHJvamVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9IGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSxcbiAgICAgICAgaCA9IGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSxcbiAgICAgICAgayA9IE1hdGgubWluKHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLCBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSksXG4gICAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBbWzAsIDBdLCBzaXplXSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIHcgPSArd2lkdGgsXG4gICAgICAgIGsgPSB3IC8gKGJbMV1bMF0gLSBiWzBdWzBdKSxcbiAgICAgICAgeCA9ICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcbiAgICAgICAgeSA9IC1rICogYlswXVsxXTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciBoID0gK2hlaWdodCxcbiAgICAgICAgayA9IGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pLFxuICAgICAgICB4ID0gLWsgKiBiWzBdWzBdLFxuICAgICAgICB5ID0gKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbn0gZnJvbSBcIi4uL2NhcnRlc2lhblwiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHJhZGlhbnMsIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtXCI7XG5cbnZhciBtYXhEZXB0aCA9IDE2LCAvLyBtYXhpbXVtIGRlcHRoIG9mIHN1YmRpdmlzaW9uXG4gICAgY29zTWluRGlzdGFuY2UgPSBjb3MoMzAgKiByYWRpYW5zKTsgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdCwgZGVsdGEyKSB7XG4gIHJldHVybiArZGVsdGEyID8gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGVOb25lKHByb2plY3QpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIHtcblxuICBmdW5jdGlvbiByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSkge1xuICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgIGR5ID0geTEgLSB5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICBpZiAoZDIgPiA0ICogZGVsdGEyICYmIGRlcHRoLS0pIHtcbiAgICAgIHZhciBhID0gYTAgKyBhMSxcbiAgICAgICAgICBiID0gYjAgKyBiMSxcbiAgICAgICAgICBjID0gYzAgKyBjMSxcbiAgICAgICAgICBtID0gc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpLFxuICAgICAgICAgIHBoaTIgPSBhc2luKGMgLz0gbSksXG4gICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24gfHwgYWJzKGxhbWJkYTAgLSBsYW1iZGExKSA8IGVwc2lsb24gPyAobGFtYmRhMCArIGxhbWJkYTEpIC8gMiA6IGF0YW4yKGIsIGEpLFxuICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxuICAgICAgICAgIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7IC8vIGFuZ3VsYXIgZGlzdGFuY2VcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgbGFtYmRhMiwgYSwgYiwgYywgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIGxhbWJkYTAsIHgwLCB5MCwgYTAsIGIwLCBjMDsgLy8gcHJldmlvdXMgcG9pbnRcblxuICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gcmluZ1N0YXJ0OyB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB4MCA9IE5hTjtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGxpbmVTdGFydCgpO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmVQb2ludChsYW1iZGEwMCA9IGxhbWJkYSwgcGhpKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIGxhbWJkYTAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgbGluZUVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwQW50aW1lcmlkaWFuIGZyb20gXCIuLi9jbGlwL2FudGltZXJpZGlhblwiO1xuaW1wb3J0IGNsaXBDaXJjbGUgZnJvbSBcIi4uL2NsaXAvY2lyY2xlXCI7XG5pbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi4vY2xpcC9yZWN0YW5nbGVcIjtcbmltcG9ydCBjb21wb3NlIGZyb20gXCIuLi9jb21wb3NlXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQge2NvcywgZGVncmVlcywgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi4vcm90YXRpb25cIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1cIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplLCBmaXRXaWR0aCwgZml0SGVpZ2h0fSBmcm9tIFwiLi9maXRcIjtcbmltcG9ydCByZXNhbXBsZSBmcm9tIFwiLi9yZXNhbXBsZVwiO1xuXG52YXIgdHJhbnNmb3JtUmFkaWFucyA9IHRyYW5zZm9ybWVyKHtcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICogcmFkaWFucywgeSAqIHJhZGlhbnMpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgciA9IHJvdGF0ZSh4LCB5KTtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb2ludChyWzBdLCByWzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZShrLCBkeCwgZHkpIHtcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHgsIHkpIHtcbiAgICByZXR1cm4gW2R4ICsgayAqIHgsIGR5IC0gayAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsoeCAtIGR4KSAvIGssIChkeSAtIHkpIC8ga107XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIGR4LCBkeSwgYWxwaGEpIHtcbiAgdmFyIGNvc0FscGhhID0gY29zKGFscGhhKSxcbiAgICAgIHNpbkFscGhhID0gc2luKGFscGhhKSxcbiAgICAgIGEgPSBjb3NBbHBoYSAqIGssXG4gICAgICBiID0gc2luQWxwaGEgKiBrLFxuICAgICAgYWkgPSBjb3NBbHBoYSAvIGssXG4gICAgICBiaSA9IHNpbkFscGhhIC8gayxcbiAgICAgIGNpID0gKHNpbkFscGhhICogZHkgLSBjb3NBbHBoYSAqIGR4KSAvIGssXG4gICAgICBmaSA9IChzaW5BbHBoYSAqIGR4ICsgY29zQWxwaGEgKiBkeSkgLyBrO1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHJldHVybiBbYSAqIHggLSBiICogeSArIGR4LCBkeSAtIGIgKiB4IC0gYSAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFthaSAqIHggLSBiaSAqIHkgKyBjaSwgZmkgLSBiaSAqIHggLSBhaSAqIHldO1xuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgcmV0dXJuIHByb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvamVjdDsgfSkoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICB2YXIgcHJvamVjdCxcbiAgICAgIGsgPSAxNTAsIC8vIHNjYWxlXG4gICAgICB4ID0gNDgwLCB5ID0gMjUwLCAvLyB0cmFuc2xhdGVcbiAgICAgIGxhbWJkYSA9IDAsIHBoaSA9IDAsIC8vIGNlbnRlclxuICAgICAgZGVsdGFMYW1iZGEgPSAwLCBkZWx0YVBoaSA9IDAsIGRlbHRhR2FtbWEgPSAwLCByb3RhdGUsIC8vIHByZS1yb3RhdGVcbiAgICAgIGFscGhhID0gMCwgLy8gcG9zdC1yb3RhdGVcbiAgICAgIHRoZXRhID0gbnVsbCwgcHJlY2xpcCA9IGNsaXBBbnRpbWVyaWRpYW4sIC8vIHByZS1jbGlwIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHksIC8vIHBvc3QtY2xpcCBleHRlbnRcbiAgICAgIGRlbHRhMiA9IDAuNSwgLy8gcHJlY2lzaW9uXG4gICAgICBwcm9qZWN0UmVzYW1wbGUsXG4gICAgICBwcm9qZWN0VHJhbnNmb3JtLFxuICAgICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW07XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgIHJldHVybiBwcm9qZWN0Um90YXRlVHJhbnNmb3JtKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZVRyYW5zZm9ybS5pbnZlcnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZGVncmVlcywgcG9pbnRbMV0gKiBkZWdyZWVzXTtcbiAgfVxuXG4gIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gdHJhbnNmb3JtUmFkaWFucyh0cmFuc2Zvcm1Sb3RhdGUocm90YXRlKShwcmVjbGlwKHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSkpO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gXywgdGhldGEgPSB1bmRlZmluZWQsIHJlc2V0KCkpIDogcHJlY2xpcDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnBvc3RjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXywgeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCByZXNldCgpKSA6IHBvc3RjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSArXyA/IGNsaXBDaXJjbGUodGhldGEgPSBfICogcmFkaWFucykgOiAodGhldGEgPSBudWxsLCBjbGlwQW50aW1lcmlkaWFuKSwgcmVzZXQoKSkgOiB0aGV0YSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZWNlbnRlcigpKSA6IGs7XG4gIH07XG5cbiAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfWzBdLCB5ID0gK19bMV0sIHJlY2VudGVyKCkpIDogW3gsIHldO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBwaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBbbGFtYmRhICogZGVncmVlcywgcGhpICogZGVncmVlc107XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVsdGFMYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgZGVsdGFQaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgZGVsdGFHYW1tYSA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiByYWRpYW5zIDogMCwgcmVjZW50ZXIoKSkgOiBbZGVsdGFMYW1iZGEgKiBkZWdyZWVzLCBkZWx0YVBoaSAqIGRlZ3JlZXMsIGRlbHRhR2FtbWEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gXyAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogYWxwaGEgKiBkZWdyZWVzO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiA9IF8gKiBfKSwgcmVzZXQoKSkgOiBzcXJ0KGRlbHRhMik7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRXaWR0aCA9IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0V2lkdGgocHJvamVjdGlvbiwgd2lkdGgsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlY2VudGVyKCkge1xuICAgIHZhciBjZW50ZXIgPSBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCAwLCAwLCBhbHBoYSkuYXBwbHkobnVsbCwgcHJvamVjdChsYW1iZGEsIHBoaSkpLFxuICAgICAgICB0cmFuc2Zvcm0gPSAoYWxwaGEgPyBzY2FsZVRyYW5zbGF0ZVJvdGF0ZSA6IHNjYWxlVHJhbnNsYXRlKShrLCB4IC0gY2VudGVyWzBdLCB5IC0gY2VudGVyWzFdLCBhbHBoYSk7XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpO1xuICAgIHByb2plY3RUcmFuc2Zvcm0gPSBjb21wb3NlKHByb2plY3QsIHRyYW5zZm9ybSk7XG4gICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSA9IGNvbXBvc2Uocm90YXRlLCBwcm9qZWN0VHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIpO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIHByb2plY3Rpb247XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgIHJldHVybiByZWNlbnRlcigpO1xuICB9O1xufVxuIiwiaW1wb3J0IHtkZWdyZWVzLCBwaSwgcmFkaWFuc30gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7cHJvamVjdGlvbk11dGF0b3J9IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY1Byb2plY3Rpb24ocHJvamVjdEF0KSB7XG4gIHZhciBwaGkwID0gMCxcbiAgICAgIHBoaTEgPSBwaSAvIDMsXG4gICAgICBtID0gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSxcbiAgICAgIHAgPSBtKHBoaTAsIHBoaTEpO1xuXG4gIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gbShwaGkwID0gX1swXSAqIHJhZGlhbnMsIHBoaTEgPSBfWzFdICogcmFkaWFucykgOiBbcGhpMCAqIGRlZ3JlZXMsIHBoaTEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICByZXR1cm4gcDtcbn1cbiIsImltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7Y3lsaW5kcmljYWxFcXVhbEFyZWFSYXd9IGZyb20gXCIuL2N5bGluZHJpY2FsRXF1YWxBcmVhXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY0VxdWFsQXJlYVJhdyh5MCwgeTEpIHtcbiAgdmFyIHN5MCA9IHNpbih5MCksIG4gPSAoc3kwICsgc2luKHkxKSkgLyAyO1xuXG4gIC8vIEFyZSB0aGUgcGFyYWxsZWxzIHN5bW1ldHJpY2FsIGFyb3VuZCB0aGUgRXF1YXRvcj9cbiAgaWYgKGFicyhuKSA8IGVwc2lsb24pIHJldHVybiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyh5MCk7XG5cbiAgdmFyIGMgPSAxICsgc3kwICogKDIgKiBuIC0gc3kwKSwgcjAgPSBzcXJ0KGMpIC8gbjtcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICB2YXIgciA9IHNxcnQoYyAtIDIgKiBuICogc2luKHkpKSAvIG47XG4gICAgcmV0dXJuIFtyICogc2luKHggKj0gbiksIHIwIC0gciAqIGNvcyh4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgcjB5ID0gcjAgLSB5O1xuICAgIHJldHVybiBbYXRhbjIoeCwgYWJzKHIweSkpIC8gbiAqIHNpZ24ocjB5KSwgYXNpbigoYyAtICh4ICogeCArIHIweSAqIHIweSkgKiBuICogbikgLyAoMiAqIG4pKV07XG4gIH07XG5cbiAgcmV0dXJuIHByb2plY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1YWxBcmVhUmF3KVxuICAgICAgLnNjYWxlKDE1NS40MjQpXG4gICAgICAuY2VudGVyKFswLCAzMy42NDQyXSk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3lsaW5kcmljYWxFcXVhbEFyZWFSYXcocGhpMCkge1xuICB2YXIgY29zUGhpMCA9IGNvcyhwaGkwKTtcblxuICBmdW5jdGlvbiBmb3J3YXJkKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIFtsYW1iZGEgKiBjb3NQaGkwLCBzaW4ocGhpKSAvIGNvc1BoaTBdO1xuICB9XG5cbiAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFt4IC8gY29zUGhpMCwgYXNpbih5ICogY29zUGhpMCldO1xuICB9O1xuXG4gIHJldHVybiBmb3J3YXJkO1xufVxuIiwiaW1wb3J0IGNvbmljRXF1YWxBcmVhIGZyb20gXCIuL2NvbmljRXF1YWxBcmVhXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNFcXVhbEFyZWEoKVxuICAgICAgLnBhcmFsbGVscyhbMjkuNSwgNDUuNV0pXG4gICAgICAuc2NhbGUoMTA3MClcbiAgICAgIC50cmFuc2xhdGUoWzQ4MCwgMjUwXSlcbiAgICAgIC5yb3RhdGUoWzk2LCAwXSlcbiAgICAgIC5jZW50ZXIoWy0wLjYsIDM4LjddKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGN4ID0gY29zKHgpLFxuICAgICAgICBjeSA9IGNvcyh5KSxcbiAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgIHJldHVybiBbXG4gICAgICBrICogY3kgKiBzaW4oeCksXG4gICAgICBrICogc2luKHkpXG4gICAgXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsSW52ZXJ0KGFuZ2xlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHogPSBzcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgIHNjID0gc2luKGMpLFxuICAgICAgICBjYyA9IGNvcyhjKTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeCAqIHNjLCB6ICogY2MpLFxuICAgICAgYXNpbih6ICYmIHkgKiBzYyAvIHopXG4gICAgXTtcbiAgfVxufVxuIiwiaW1wb3J0IHthc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxSYXcsIGF6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgdmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XG4gIHJldHVybiBzcXJ0KDIgLyAoMSArIGN4Y3kpKTtcbn0pO1xuXG5hemltdXRoYWxFcXVhbEFyZWFSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhc2luKHogLyAyKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1YWxBcmVhUmF3KVxuICAgICAgLnNjYWxlKDEyNC43NSlcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59XG4iLCJpbXBvcnQge2Fjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjKSB7XG4gIHJldHVybiAoYyA9IGFjb3MoYykpICYmIGMgLyBzaW4oYyk7XG59KTtcblxuYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIHo7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWlkaXN0YW50UmF3KVxuICAgICAgLnNjYWxlKDc5LjQxODgpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuIiwiaW1wb3J0IHthdGFuLCBleHAsIGhhbGZQaSwgbG9nLCBwaSwgdGFuLCB0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgcm90YXRpb24gZnJvbSBcIi4uL3JvdGF0aW9uXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIGxvZyh0YW4oKGhhbGZQaSArIHBoaSkgLyAyKSldO1xufVxuXG5tZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbeCwgMiAqIGF0YW4oZXhwKHkpKSAtIGhhbGZQaV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdylcbiAgICAgIC5zY2FsZSg5NjEgLyB0YXUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyY2F0b3JQcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgdmFyIG0gPSBwcm9qZWN0aW9uKHByb2plY3QpLFxuICAgICAgY2VudGVyID0gbS5jZW50ZXIsXG4gICAgICBzY2FsZSA9IG0uc2NhbGUsXG4gICAgICB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSxcbiAgICAgIGNsaXBFeHRlbnQgPSBtLmNsaXBFeHRlbnQsXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTE7IC8vIGNsaXAgZXh0ZW50XG5cbiAgbS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZShfKSwgcmVjbGlwKCkpIDogc2NhbGUoKTtcbiAgfTtcblxuICBtLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGUoXyksIHJlY2xpcCgpKSA6IHRyYW5zbGF0ZSgpO1xuICB9O1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNlbnRlcihfKSwgcmVjbGlwKCkpIDogY2VudGVyKCk7XG4gIH07XG5cbiAgbS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChfID09IG51bGwgPyB4MCA9IHkwID0geDEgPSB5MSA9IG51bGwgOiAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSkpLCByZWNsaXAoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlY2xpcCgpIHtcbiAgICB2YXIgayA9IHBpICogc2NhbGUoKSxcbiAgICAgICAgdCA9IG0ocm90YXRpb24obS5yb3RhdGUoKSkuaW52ZXJ0KFswLCAwXSkpO1xuICAgIHJldHVybiBjbGlwRXh0ZW50KHgwID09IG51bGxcbiAgICAgICAgPyBbW3RbMF0gLSBrLCB0WzFdIC0ga10sIFt0WzBdICsgaywgdFsxXSArIGtdXSA6IHByb2plY3QgPT09IG1lcmNhdG9yUmF3XG4gICAgICAgID8gW1tNYXRoLm1heCh0WzBdIC0gaywgeDApLCB5MF0sIFtNYXRoLm1pbih0WzBdICsgaywgeDEpLCB5MV1dXG4gICAgICAgIDogW1t4MCwgTWF0aC5tYXgodFsxXSAtIGssIHkwKV0sIFt4MSwgTWF0aC5taW4odFsxXSArIGssIHkxKV1dKTtcbiAgfVxuXG4gIHJldHVybiByZWNsaXAoKTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXJSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG59XG5cbmVxdWlyZWN0YW5ndWxhclJhdy5pbnZlcnQgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAuc2NhbGUoMTUyLjYzKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ25vbW9uaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MoeSksIGsgPSBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5nbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihnbm9tb25pY1JhdylcbiAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgLmNsaXBBbmdsZSg2MCk7XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXR1cmFsRWFydGgxUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogKDAuODcwNyAtIDAuMTMxOTc5ICogcGhpMiArIHBoaTQgKiAoLTAuMDEzNzkxICsgcGhpNCAqICgwLjAwMzk3MSAqIHBoaTIgLSAwLjAwMTUyOSAqIHBoaTQpKSksXG4gICAgcGhpICogKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSArIHBoaTQgKiAoLTAuMDQ0NDc1ICsgMC4wMjg4NzQgKiBwaGkyIC0gMC4wMDU5MTYgKiBwaGk0KSkpXG4gIF07XG59XG5cbm5hdHVyYWxFYXJ0aDFSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgcGhpID0geSwgaSA9IDI1LCBkZWx0YTtcbiAgZG8ge1xuICAgIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gICAgcGhpIC09IGRlbHRhID0gKHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKSAtIHkpIC9cbiAgICAgICAgKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSAqIDMgKyBwaGk0ICogKC0wLjA0NDQ3NSAqIDcgKyAwLjAyODg3NCAqIDkgKiBwaGkyIC0gMC4wMDU5MTYgKiAxMSAqIHBoaTQpKSk7XG4gIH0gd2hpbGUgKGFicyhkZWx0YSkgPiBlcHNpbG9uICYmIC0taSA+IDApO1xuICByZXR1cm4gW1xuICAgIHggLyAoMC44NzA3ICsgKHBoaTIgPSBwaGkgKiBwaGkpICogKC0wLjEzMTk3OSArIHBoaTIgKiAoLTAuMDEzNzkxICsgcGhpMiAqIHBoaTIgKiBwaGkyICogKDAuMDAzOTcxIC0gMC4wMDE1MjkgKiBwaGkyKSkpKSxcbiAgICBwaGlcbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihuYXR1cmFsRWFydGgxUmF3KVxuICAgICAgLnNjYWxlKDE3NS4yOTUpO1xufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIGVwc2lsb24sIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xuICByZXR1cm4gW2Nvcyh5KSAqIHNpbih4KSwgc2luKHkpXTtcbn1cblxub3J0aG9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhc2luKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNDkuNSlcbiAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RlcmVvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHZhciBjeSA9IGNvcyh5KSwgayA9IDEgKyBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5zdGVyZW9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXRhbih6KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNTApXG4gICAgICAuY2xpcEFuZ2xlKDE0Mik7XG59XG4iLCJpbXBvcnQge2F0YW4sIGV4cCwgaGFsZlBpLCBsb2csIHRhbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7bWVyY2F0b3JQcm9qZWN0aW9ufSBmcm9tIFwiLi9tZXJjYXRvclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbG9nKHRhbigoaGFsZlBpICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG59XG5cbnRyYW5zdmVyc2VNZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gY2VudGVyKFstX1sxXSwgX1swXV0pIDogKF8gPSBjZW50ZXIoKSwgW19bMV0sIC1fWzBdXSk7XG4gIH07XG5cbiAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgLnNjYWxlKDE1OS4xNTUpO1xufVxuIiwiZnVuY3Rpb24gY291bnQobm9kZSkge1xuICB2YXIgc3VtID0gMCxcbiAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gIGlmICghaSkgc3VtID0gMTtcbiAgZWxzZSB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgbm9kZS52YWx1ZSA9IHN1bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudFwiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmVcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXJcIjtcbmltcG9ydCBub2RlX3N1bSBmcm9tIFwiLi9zdW1cIjtcbmltcG9ydCBub2RlX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IG5vZGVfcGF0aCBmcm9tIFwiLi9wYXRoXCI7XG5pbXBvcnQgbm9kZV9hbmNlc3RvcnMgZnJvbSBcIi4vYW5jZXN0b3JzXCI7XG5pbXBvcnQgbm9kZV9kZXNjZW5kYW50cyBmcm9tIFwiLi9kZXNjZW5kYW50c1wiO1xuaW1wb3J0IG5vZGVfbGVhdmVzIGZyb20gXCIuL2xlYXZlc1wiO1xuaW1wb3J0IG5vZGVfbGlua3MgZnJvbSBcIi4vbGlua3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIHZhciByb290ID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmRlcHRoID1cbiAgdGhpcy5oZWlnaHQgPSAwO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG59XG5cbk5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE5vZGUsXG4gIGNvdW50OiBub2RlX2NvdW50LFxuICBlYWNoOiBub2RlX2VhY2gsXG4gIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG47XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgYk5vZGVzID0gYi5hbmNlc3RvcnMoKSxcbiAgICAgIGMgPSBudWxsO1xuICBhID0gYU5vZGVzLnBvcCgpO1xuICBiID0gYk5vZGVzLnBvcCgpO1xuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGMgPSBhO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gW107XG4gIHRoaXMuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGVhdmVzID0gW107XG4gIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBsZWF2ZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGVhdmVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcbiAgcm9vdC5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmtzO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcbiAgdmFyIG0gPSBhcnJheS5sZW5ndGgsXG4gICAgICB0LFxuICAgICAgaTtcblxuICB3aGlsZSAobSkge1xuICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICB0ID0gYXJyYXlbbV07XG4gICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcbiAgICBhcnJheVtpXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJpbXBvcnQge3NodWZmbGUsIHNsaWNlfSBmcm9tIFwiLi4vYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2lyY2xlcykge1xuICB2YXIgaSA9IDAsIG4gPSAoY2lyY2xlcyA9IHNodWZmbGUoc2xpY2UuY2FsbChjaXJjbGVzKSkpLmxlbmd0aCwgQiA9IFtdLCBwLCBlO1xuXG4gIHdoaWxlIChpIDwgbikge1xuICAgIHAgPSBjaXJjbGVzW2ldO1xuICAgIGlmIChlICYmIGVuY2xvc2VzV2VhayhlLCBwKSkgKytpO1xuICAgIGVsc2UgZSA9IGVuY2xvc2VCYXNpcyhCID0gZXh0ZW5kQmFzaXMoQiwgcCkpLCBpID0gMDtcbiAgfVxuXG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBleHRlbmRCYXNpcyhCLCBwKSB7XG4gIHZhciBpLCBqO1xuXG4gIGlmIChlbmNsb3Nlc1dlYWtBbGwocCwgQikpIHJldHVybiBbcF07XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudC5cbiAgZm9yIChpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoZW5jbG9zZXNOb3QocCwgQltpXSlcbiAgICAgICAgJiYgZW5jbG9zZXNXZWFrQWxsKGVuY2xvc2VCYXNpczIoQltpXSwgcCksIEIpKSB7XG4gICAgICByZXR1cm4gW0JbaV0sIHBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3QgdHdvIGVsZW1lbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGggLSAxOyArK2kpIHtcbiAgICBmb3IgKGogPSBpICsgMTsgaiA8IEIubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIEJbal0pLCBwKVxuICAgICAgICAgICYmIGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgcCksIEJbal0pXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2pdLCBwKSwgQltpXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMyhCW2ldLCBCW2pdLCBwKSwgQikpIHtcbiAgICAgICAgcmV0dXJuIFtCW2ldLCBCW2pdLCBwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIHNvbWV0aGluZyBpcyB2ZXJ5IHdyb25nLlxuICB0aHJvdyBuZXcgRXJyb3I7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzTm90KGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yIC0gYi5yLCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA8IDAgfHwgZHIgKiBkciA8IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc1dlYWsoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIgKyAxZS02LCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA+IDAgJiYgZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc1dlYWtBbGwoYSwgQikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWVuY2xvc2VzV2VhayhhLCBCW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzKEIpIHtcbiAgc3dpdGNoIChCLmxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGVuY2xvc2VCYXNpczEoQlswXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZW5jbG9zZUJhc2lzMihCWzBdLCBCWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBlbmNsb3NlQmFzaXMzKEJbMF0sIEJbMV0sIEJbMl0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczEoYSkge1xuICByZXR1cm4ge1xuICAgIHg6IGEueCxcbiAgICB5OiBhLnksXG4gICAgcjogYS5yXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczIoYSwgYikge1xuICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICB4MjEgPSB4MiAtIHgxLCB5MjEgPSB5MiAtIHkxLCByMjEgPSByMiAtIHIxLFxuICAgICAgbCA9IE1hdGguc3FydCh4MjEgKiB4MjEgKyB5MjEgKiB5MjEpO1xuICByZXR1cm4ge1xuICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxuICAgIHk6ICh5MSArIHkyICsgeTIxIC8gbCAqIHIyMSkgLyAyLFxuICAgIHI6IChsICsgcjEgKyByMikgLyAyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczMoYSwgYiwgYykge1xuICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICB4MyA9IGMueCwgeTMgPSBjLnksIHIzID0gYy5yLFxuICAgICAgYTIgPSB4MSAtIHgyLFxuICAgICAgYTMgPSB4MSAtIHgzLFxuICAgICAgYjIgPSB5MSAtIHkyLFxuICAgICAgYjMgPSB5MSAtIHkzLFxuICAgICAgYzIgPSByMiAtIHIxLFxuICAgICAgYzMgPSByMyAtIHIxLFxuICAgICAgZDEgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEsXG4gICAgICBkMiA9IGQxIC0geDIgKiB4MiAtIHkyICogeTIgKyByMiAqIHIyLFxuICAgICAgZDMgPSBkMSAtIHgzICogeDMgLSB5MyAqIHkzICsgcjMgKiByMyxcbiAgICAgIGFiID0gYTMgKiBiMiAtIGEyICogYjMsXG4gICAgICB4YSA9IChiMiAqIGQzIC0gYjMgKiBkMikgLyAoYWIgKiAyKSAtIHgxLFxuICAgICAgeGIgPSAoYjMgKiBjMiAtIGIyICogYzMpIC8gYWIsXG4gICAgICB5YSA9IChhMyAqIGQyIC0gYTIgKiBkMykgLyAoYWIgKiAyKSAtIHkxLFxuICAgICAgeWIgPSAoYTIgKiBjMyAtIGEzICogYzIpIC8gYWIsXG4gICAgICBBID0geGIgKiB4YiArIHliICogeWIgLSAxLFxuICAgICAgQiA9IDIgKiAocjEgKyB4YSAqIHhiICsgeWEgKiB5YiksXG4gICAgICBDID0geGEgKiB4YSArIHlhICogeWEgLSByMSAqIHIxLFxuICAgICAgciA9IC0oQSA/IChCICsgTWF0aC5zcXJ0KEIgKiBCIC0gNCAqIEEgKiBDKSkgLyAoMiAqIEEpIDogQyAvIEIpO1xuICByZXR1cm4ge1xuICAgIHg6IHgxICsgeGEgKyB4YiAqIHIsXG4gICAgeTogeTEgKyB5YSArIHliICogcixcbiAgICByOiByXG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIG5vZGUueDAgPSBNYXRoLnJvdW5kKG5vZGUueDApO1xuICBub2RlLnkwID0gTWF0aC5yb3VuZChub2RlLnkwKTtcbiAgbm9kZS54MSA9IE1hdGgucm91bmQobm9kZS54MSk7XG4gIG5vZGUueTEgPSBNYXRoLnJvdW5kKG5vZGUueTEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHgxIC0geDApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcbiAgICBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuIiwiaW1wb3J0IHtOb2RlfSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXhcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbi8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4vLyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3Jcbi8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbi8vIGVpdGhlciBnaXZlbiBieSB0aGUgbGVmdG1vc3QgY2hpbGQgb2YgdiBvciBieSB0aGUgdGhyZWFkIG9mIHYuIFRoZSBmdW5jdGlvblxuLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG5mdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdvcmtzIGFuYWxvZ291c2x5IHRvIG5leHRMZWZ0LlxuZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2LnQ7XG59XG5cbi8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbi8vIHByZWxpbSh3KykgYW5kIG1vZCh3KykgYnkgc2hpZnQuXG5mdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gIHdwLmMgLT0gY2hhbmdlO1xuICB3cC5zICs9IHNoaWZ0O1xuICB3bS5jICs9IGNoYW5nZTtcbiAgd3AueiArPSBzaGlmdDtcbiAgd3AubSArPSBzaGlmdDtcbn1cblxuLy8gQWxsIG90aGVyIHNoaWZ0cywgYXBwbGllZCB0byB0aGUgc21hbGxlciBzdWJ0cmVlcyBiZXR3ZWVuIHctIGFuZCB3KywgYXJlXG4vLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbmZ1bmN0aW9uIGV4ZWN1dGVTaGlmdHModikge1xuICB2YXIgc2hpZnQgPSAwLFxuICAgICAgY2hhbmdlID0gMCxcbiAgICAgIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICB3O1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgdy56ICs9IHNoaWZ0O1xuICAgIHcubSArPSBzaGlmdDtcbiAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gIH1cbn1cblxuLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4vLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuZnVuY3Rpb24gbmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcbiAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xufVxuXG5mdW5jdGlvbiBUcmVlTm9kZShub2RlLCBpKSB7XG4gIHRoaXMuXyA9IG5vZGU7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgdGhpcy56ID0gMDsgLy8gcHJlbGltXG4gIHRoaXMubSA9IDA7IC8vIG1vZFxuICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgdGhpcy5zID0gMDsgLy8gc2hpZnRcbiAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gIHRoaXMuaSA9IGk7IC8vIG51bWJlclxufVxuXG5UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZShyb290LCAwKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpLFxuICAgICAgbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4gPSBjaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbi8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICBmdW5jdGlvbiB0cmVlKHJvb3QpIHtcbiAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGF5b3V0IHVzaW5nIEJ1Y2hoZWltIGV0IGFsLuKAmXMgYWxnb3JpdGhtLlxuICAgIHQuZWFjaEFmdGVyKGZpcnN0V2FsayksIHQucGFyZW50Lm0gPSAtdC56O1xuICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgIC8vIElmIGEgZml4ZWQgbm9kZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeS5cbiAgICBpZiAobm9kZVNpemUpIHJvb3QuZWFjaEJlZm9yZShzaXplTm9kZSk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICBib3R0b20gPSByb290O1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgfSk7XG4gICAgICB2YXIgcyA9IGxlZnQgPT09IHJpZ2h0ID8gMSA6IHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcbiAgICAgICAgICBreSA9IGR5IC8gKGJvdHRvbS5kZXB0aCB8fCAxKTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhIHByZWxpbWluYXJ5IHgtY29vcmRpbmF0ZSBmb3Igdi4gQmVmb3JlIHRoYXQsIEZJUlNUIFdBTEsgaXNcbiAgLy8gYXBwbGllZCByZWN1cnNpdmVseSB0byB0aGUgY2hpbGRyZW4gb2YgdiwgYXMgd2VsbCBhcyB0aGUgZnVuY3Rpb25cbiAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gIC8vIG5vZGUgdiBpcyBwbGFjZWQgdG8gdGhlIG1pZHBvaW50IG9mIGl0cyBvdXRlcm1vc3QgY2hpbGRyZW4uXG4gIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgdyA9IHYuaSA/IHNpYmxpbmdzW3YuaSAtIDFdIDogbnVsbDtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGV4ZWN1dGVTaGlmdHModik7XG4gICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC8gMjtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICB2Lm0gPSB2LnogLSBtaWRwb2ludDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgfVxuICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhbGwgcmVhbCB4LWNvb3JkaW5hdGVzIGJ5IHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyByZWN1cnNpdmVseS5cbiAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgIHYubSArPSB2LnBhcmVudC5tO1xuICB9XG5cbiAgLy8gVGhlIGNvcmUgb2YgdGhlIGFsZ29yaXRobS4gSGVyZSwgYSBuZXcgc3VidHJlZSBpcyBjb21iaW5lZCB3aXRoIHRoZVxuICAvLyBwcmV2aW91cyBzdWJ0cmVlcy4gVGhyZWFkcyBhcmUgdXNlZCB0byB0cmF2ZXJzZSB0aGUgaW5zaWRlIGFuZCBvdXRzaWRlXG4gIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gIC8vIHZlcnRpY2VzIHVzZWQgZm9yIHRoZSB0cmF2ZXJzYWxzIGFyZSB2aSssIHZpLSwgdm8tLCBhbmQgdm8rLCB3aGVyZSB0aGVcbiAgLy8gc3VwZXJzY3JpcHQgbyBtZWFucyBvdXRzaWRlIGFuZCBpIG1lYW5zIGluc2lkZSwgdGhlIHN1YnNjcmlwdCAtIG1lYW5zIGxlZnRcbiAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAvLyBjb250b3VyLCB3ZSB1c2UgcmVzcGVjdGl2ZSB2YXJpYWJsZXMgc2krLCBzaS0sIHNvLSwgYW5kIHNvKy4gV2hlbmV2ZXIgdHdvXG4gIC8vIG5vZGVzIG9mIHRoZSBpbnNpZGUgY29udG91cnMgY29uZmxpY3QsIHdlIGNvbXB1dGUgdGhlIGxlZnQgb25lIG9mIHRoZVxuICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgLy8gU1VCVFJFRSB0byBzaGlmdCB0aGUgc3VidHJlZSBhbmQgcHJlcGFyZSB0aGUgc2hpZnRzIG9mIHNtYWxsZXIgc3VidHJlZXMuXG4gIC8vIEZpbmFsbHksIHdlIGFkZCBhIG5ldyB0aHJlYWQgKGlmIG5lY2Vzc2FyeSkuXG4gIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgIGlmICh3KSB7XG4gICAgICB2YXIgdmlwID0gdixcbiAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcbiAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICBzaW0gPSB2aW0ubSxcbiAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICBzaGlmdDtcbiAgICAgIHdoaWxlICh2aW0gPSBuZXh0UmlnaHQodmltKSwgdmlwID0gbmV4dExlZnQodmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICB2b3AgPSBuZXh0UmlnaHQodm9wKTtcbiAgICAgICAgdm9wLmEgPSB2O1xuICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICBtb3ZlU3VidHJlZShuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgc29wICs9IHNoaWZ0O1xuICAgICAgICB9XG4gICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgc2lwICs9IHZpcC5tO1xuICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgIH1cbiAgICAgIGlmICh2aW0gJiYgIW5leHRSaWdodCh2b3ApKSB7XG4gICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICB9XG4gICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgIG5vZGUueCAqPSBkeDtcbiAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gIH1cblxuICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgfTtcblxuICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICB9O1xuXG4gIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZVwiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZVwiO1xuXG5leHBvcnQgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciByb3dzID0gW10sXG4gICAgICBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIHJvdyxcbiAgICAgIG5vZGVWYWx1ZSxcbiAgICAgIGkwID0gMCxcbiAgICAgIGkxID0gMCxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBkeCwgZHksXG4gICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgIHN1bVZhbHVlLFxuICAgICAgbWluVmFsdWUsXG4gICAgICBtYXhWYWx1ZSxcbiAgICAgIG5ld1JhdGlvLFxuICAgICAgbWluUmF0aW8sXG4gICAgICBhbHBoYSxcbiAgICAgIGJldGE7XG5cbiAgd2hpbGUgKGkwIDwgbikge1xuICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuXG4gICAgLy8gRmluZCB0aGUgbmV4dCBub24tZW1wdHkgbm9kZS5cbiAgICBkbyBzdW1WYWx1ZSA9IG5vZGVzW2kxKytdLnZhbHVlOyB3aGlsZSAoIXN1bVZhbHVlICYmIGkxIDwgbik7XG4gICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlO1xuICAgIGFscGhhID0gTWF0aC5tYXgoZHkgLyBkeCwgZHggLyBkeSkgLyAodmFsdWUgKiByYXRpbyk7XG4gICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxuICAgIGZvciAoOyBpMSA8IG47ICsraTEpIHtcbiAgICAgIHN1bVZhbHVlICs9IG5vZGVWYWx1ZSA9IG5vZGVzW2kxXS52YWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgIG5ld1JhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICB9XG5cbiAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XG4gICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHZhbHVlID8geTAgKz0gZHkgKiBzdW1WYWx1ZSAvIHZhbHVlIDogeTEpO1xuICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gIH1cblxuICByZXR1cm4gcm93cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiBzcXVhcmlmeTtcbn0pKHBoaSk7XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZVwiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZVwiO1xuaW1wb3J0IHtwaGksIHNxdWFyaWZ5UmF0aW99IGZyb20gXCIuL3NxdWFyaWZ5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiByZXNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBpZiAoKHJvd3MgPSBwYXJlbnQuX3NxdWFyaWZ5KSAmJiAocm93cy5yYXRpbyA9PT0gcmF0aW8pKSB7XG4gICAgICB2YXIgcm93cyxcbiAgICAgICAgICByb3csXG4gICAgICAgICAgbm9kZXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbixcbiAgICAgICAgICBtID0gcm93cy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWU7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHJvdyA9IHJvd3Nbal0sIG5vZGVzID0gcm93LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSByb3cudmFsdWUgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSByb3cudmFsdWUgKz0gbm9kZXNbaV0udmFsdWU7XG4gICAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB5MCArPSAoeTEgLSB5MCkgKiByb3cudmFsdWUgLyB2YWx1ZSk7XG4gICAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB4MCArPSAoeDEgLSB4MCkgKiByb3cudmFsdWUgLyB2YWx1ZSwgeTEpO1xuICAgICAgICB2YWx1ZSAtPSByb3cudmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudC5fc3F1YXJpZnkgPSByb3dzID0gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgICByb3dzLnJhdGlvID0gcmF0aW87XG4gICAgfVxuICB9XG5cbiAgcmVzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gcmVzcXVhcmlmeTtcbn0pKHBoaSk7XG4iLCJpbXBvcnQgY3Jvc3MgZnJvbSBcIi4vY3Jvc3NcIjtcblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpY09yZGVyKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgdXBwZXIgY29udmV4IGh1bGwgcGVyIHRoZSBtb25vdG9uZSBjaGFpbiBhbGdvcml0aG0uXG4vLyBBc3N1bWVzIHBvaW50cy5sZW5ndGggPj0gMywgaXMgc29ydGVkIGJ5IHgsIHVuaXF1ZSBpbiB5LlxuLy8gUmV0dXJucyBhbiBhcnJheSBvZiBpbmRpY2VzIGludG8gcG9pbnRzIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG5mdW5jdGlvbiBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhwb2ludHMpIHtcbiAgdmFyIG4gPSBwb2ludHMubGVuZ3RoLFxuICAgICAgaW5kZXhlcyA9IFswLCAxXSxcbiAgICAgIHNpemUgPSAyO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgbjsgKytpKSB7XG4gICAgd2hpbGUgKHNpemUgPiAxICYmIGNyb3NzKHBvaW50c1tpbmRleGVzW3NpemUgLSAyXV0sIHBvaW50c1tpbmRleGVzW3NpemUgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1zaXplO1xuICAgIGluZGV4ZXNbc2l6ZSsrXSA9IGk7XG4gIH1cblxuICByZXR1cm4gaW5kZXhlcy5zbGljZSgwLCBzaXplKTsgLy8gcmVtb3ZlIHBvcHBlZCBwb2ludHNcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9pbnRzKSB7XG4gIGlmICgobiA9IHBvaW50cy5sZW5ndGgpIDwgMykgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGksXG4gICAgICBuLFxuICAgICAgc29ydGVkUG9pbnRzID0gbmV3IEFycmF5KG4pLFxuICAgICAgZmxpcHBlZFBvaW50cyA9IG5ldyBBcnJheShuKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzb3J0ZWRQb2ludHNbaV0gPSBbK3BvaW50c1tpXVswXSwgK3BvaW50c1tpXVsxXSwgaV07XG4gIHNvcnRlZFBvaW50cy5zb3J0KGxleGljb2dyYXBoaWNPcmRlcik7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGZsaXBwZWRQb2ludHNbaV0gPSBbc29ydGVkUG9pbnRzW2ldWzBdLCAtc29ydGVkUG9pbnRzW2ldWzFdXTtcblxuICB2YXIgdXBwZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoc29ydGVkUG9pbnRzKSxcbiAgICAgIGxvd2VySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKGZsaXBwZWRQb2ludHMpO1xuXG4gIC8vIENvbnN0cnVjdCB0aGUgaHVsbCBwb2x5Z29uLCByZW1vdmluZyBwb3NzaWJsZSBkdXBsaWNhdGUgZW5kcG9pbnRzLlxuICB2YXIgc2tpcExlZnQgPSBsb3dlckluZGV4ZXNbMF0gPT09IHVwcGVySW5kZXhlc1swXSxcbiAgICAgIHNraXBSaWdodCA9IGxvd2VySW5kZXhlc1tsb3dlckluZGV4ZXMubGVuZ3RoIC0gMV0gPT09IHVwcGVySW5kZXhlc1t1cHBlckluZGV4ZXMubGVuZ3RoIC0gMV0sXG4gICAgICBodWxsID0gW107XG5cbiAgLy8gQWRkIHVwcGVyIGh1bGwgaW4gcmlnaHQtdG8tbCBvcmRlci5cbiAgLy8gVGhlbiBhZGQgbG93ZXIgaHVsbCBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICBmb3IgKGkgPSB1cHBlckluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW3VwcGVySW5kZXhlc1tpXV1bMl1dKTtcbiAgZm9yIChpID0gK3NraXBMZWZ0OyBpIDwgbG93ZXJJbmRleGVzLmxlbmd0aCAtIHNraXBSaWdodDsgKytpKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1tsb3dlckluZGV4ZXNbaV1dWzJdXSk7XG5cbiAgcmV0dXJuIGh1bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCk7XG59XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Ob3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbU5vcm1hbChtdSwgc2lnbWEpIHtcbiAgICB2YXIgeCwgcjtcbiAgICBtdSA9IG11ID09IG51bGwgPyAwIDogK211O1xuICAgIHNpZ21hID0gc2lnbWEgPT0gbnVsbCA/IDEgOiArc2lnbWE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHk7XG5cbiAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXG4gICAgICBpZiAoeCAhPSBudWxsKSB5ID0geCwgeCA9IG51bGw7XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgYSBuZXcgeCBhbmQgeS5cbiAgICAgIGVsc2UgZG8ge1xuICAgICAgICB4ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgeSA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Ob3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Ob3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbVVuaWZvcm0oc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbVVuaWZvcm0obWluLCBtYXgpIHtcbiAgICBtaW4gPSBtaW4gPT0gbnVsbCA/IDAgOiArbWluO1xuICAgIG1heCA9IG1heCA9PSBudWxsID8gMSA6ICttYXg7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIG1heCA9IG1pbiwgbWluID0gMDtcbiAgICBlbHNlIG1heCAtPSBtaW47XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNvdXJjZSgpICogbWF4ICsgbWluO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Vbmlmb3JtLnNvdXJjZSA9IHNvdXJjZVJhbmRvbVVuaWZvcm07XG5cbiAgcmV0dXJuIHJhbmRvbVVuaWZvcm07XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUlyd2luSGFsbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tSXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgbm9ybWFsIGZyb20gXCIuL25vcm1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTG9nTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Mb2dOb3JtYWwoKSB7XG4gICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5zb3VyY2Uoc291cmNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUxvZ05vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Mb2dOb3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUxvZ05vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBpcndpbkhhbGwgZnJvbSBcIi4vaXJ3aW5IYWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcblxuZXhwb3J0IHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKHJhbmdlKSB7XG4gIHZhciBpbmRleCA9IG1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgcmFuZ2UgPSByYW5nZSA9PSBudWxsID8gW10gOiBzbGljZS5jYWxsKHJhbmdlKTtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCgpO1xuICAgIHZhciBpID0gLTEsIG4gPSBfLmxlbmd0aCwgZCwga2V5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmRpbmFsKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtyYW5nZSBhcyBzZXF1ZW5jZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgc3RlcCxcbiAgICAgIGJhbmR3aWR0aCxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBwYWRkaW5nSW5uZXIgPSAwLFxuICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgIGFsaWduID0gMC41O1xuXG4gIGRlbGV0ZSBzY2FsZS51bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgIHJldmVyc2UgPSByYW5nZVsxXSA8IHJhbmdlWzBdLFxuICAgICAgICBzdGFydCA9IHJhbmdlW3JldmVyc2UgLSAwXSxcbiAgICAgICAgc3RvcCA9IHJhbmdlWzEgLSByZXZlcnNlXTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbigpKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC5yb3VuZChyb3VuZClcbiAgICAgICAgLnBhZGRpbmdJbm5lcihwYWRkaW5nSW5uZXIpXG4gICAgICAgIC5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKVxuICAgICAgICAuYWxpZ24oYWxpZ24pO1xuICB9O1xuXG4gIHJldHVybiByZXNjYWxlKCk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQoKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge21hcCwgc2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUxpbmVhcihhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoYik7XG59XG5cbmZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIGQgPSBkZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geCA8PSBhID8gMCA6IHggPj0gYiA/IDEgOiBkKHgpOyB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiByZWludGVycG9sYXRlQ2xhbXAocmVpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciByID0gcmVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsgcmV0dXJuIHQgPD0gMCA/IGEgOiB0ID49IDEgPyBiIDogcih0KTsgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBkZWludGVycG9sYXRlKGQxLCBkMCksIHIwID0gcmVpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gZGVpbnRlcnBvbGF0ZShkMCwgZDEpLCByMCA9IHJlaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gZGVpbnRlcnBvbGF0ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSByZWludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpO1xufVxuXG4vLyBkZWludGVycG9sYXRlKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyByZWludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLCByYW5nZSwgY2xhbXAgPyBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkgOiBkZWludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkpKSgreCk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbiwgZGVpbnRlcnBvbGF0ZUxpbmVhciwgY2xhbXAgPyByZWludGVycG9sYXRlQ2xhbXAocmVpbnRlcnBvbGF0ZSkgOiByZWludGVycG9sYXRlKSkpKCt5KTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwLmNhbGwoXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgcmVzY2FsZSgpKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHJldHVybiByZXNjYWxlKCk7XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGFydCA9IGRvbWFpblswXSxcbiAgICAgIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLFxuICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIgYXMgcmVpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgY29udGludW91cywgY29weSwgZGVpbnRlcnBvbGF0ZUxpbmVhciBhcyBkZWludGVycG9sYXRlfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkb21haW4oKSwgY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25TZWNvbmQpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgbWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25NaW51dGUpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBob3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICB2YXIgb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogZHVyYXRpb25NaW51dGUgJSBkdXJhdGlvbkhvdXI7XG4gIGlmIChvZmZzZXQgPCAwKSBvZmZzZXQgKz0gZHVyYXRpb25Ib3VyO1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcigoK2RhdGUgLSBvZmZzZXQpIC8gZHVyYXRpb25Ib3VyKSAqIGR1cmF0aW9uSG91ciArIG9mZnNldCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBob3VyO1xuZXhwb3J0IHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHllYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxueWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHllYXI7XG5leHBvcnQgdmFyIHllYXJzID0geWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNZZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGNZZWFyO1xuZXhwb3J0IHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IG5ld0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICgrblswXSkgKiAxMDAwLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZXhwb3J0IHZhciBpc29TcGVjaWZpZXIgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiO1xuXG5mdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuXG52YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgIDogdXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdElzbztcbiIsImltcG9ydCB7aXNvU3BlY2lmaWVyfSBmcm9tIFwiLi9pc29Gb3JtYXRcIjtcbmltcG9ydCB7dXRjUGFyc2V9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG59XG5cbnZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgID8gcGFyc2VJc29OYXRpdmVcbiAgICA6IHV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlSXNvO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVSZ2JCYXNpc30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNjaGVtZSkge1xuICByZXR1cm4gaW50ZXJwb2xhdGVSZ2JCYXNpcyhzY2hlbWVbc2NoZW1lLmxlbmd0aCAtIDFdKTtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiN2ZjOTdmYmVhZWQ0ZmRjMDg2ZmZmZjk5Mzg2Y2IwZjAwMjdmYmY1YjE3NjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJhNmNlZTMxZjc4YjRiMmRmOGEzM2EwMmNmYjlhOTllMzFhMWNmZGJmNmZmZjdmMDBjYWIyZDY2YTNkOWFmZmZmOTliMTU5MjhcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZmJiNGFlYjNjZGUzY2NlYmM1ZGVjYmU0ZmVkOWE2ZmZmZmNjZTVkOGJkZmRkYWVjZjJmMmYyXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImIzZTJjZGZkY2RhY2NiZDVlOGY0Y2FlNGU2ZjVjOWZmZjJhZWYxZTJjY2NjY2NjY1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJlNDFhMWMzNzdlYjg0ZGFmNGE5ODRlYTNmZjdmMDBmZmZmMzNhNjU2MjhmNzgxYmY5OTk5OTlcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNjZjMmE1ZmM4ZDYyOGRhMGNiZTc4YWMzYTZkODU0ZmZkOTJmZTVjNDk0YjNiM2IzXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjhkZDNjN2ZmZmZiM2JlYmFkYWZiODA3MjgwYjFkM2ZkYjQ2MmIzZGU2OWZjY2RlNWQ5ZDlkOWJjODBiZGNjZWJjNWZmZWQ2ZlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJhZjhkYzNmN2Y3Zjc3ZmJmN2JcIixcbiAgXCI3YjMyOTRjMmE1Y2ZhNmRiYTAwMDg4MzdcIixcbiAgXCI3YjMyOTRjMmE1Y2ZmN2Y3ZjdhNmRiYTAwMDg4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThmN2Y3ZjdkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTlhM2M5ZjdmN2Y3YTFkNzZhXCIsXG4gIFwiZDAxYzhiZjFiNmRhYjhlMTg2NGRhYzI2XCIsXG4gIFwiZDAxYzhiZjFiNmRhZjdmN2Y3YjhlMTg2NGRhYzI2XCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZjdmN2Y3ZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcIjk5OGVjM2Y3ZjdmN2YxYTM0MFwiLFxuICBcIjVlM2M5OWIyYWJkMmZkYjg2M2U2NjEwMVwiLFxuICBcIjVlM2M5OWIyYWJkMmY3ZjdmN2ZkYjg2M2U2NjEwMVwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmY3ZjdmN2ZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmN2Y3Zjc2N2E5Y2ZcIixcbiAgXCJjYTAwMjBmNGE1ODI5MmM1ZGUwNTcxYjBcIixcbiAgXCJjYTAwMjBmNGE1ODJmN2Y3Zjc5MmM1ZGUwNTcxYjBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmN2Y3ZjdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZmZmZmZmOTk5OTk5XCIsXG4gIFwiY2EwMDIwZjRhNTgyYmFiYWJhNDA0MDQwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZmZmZmZmYmFiYWJhNDA0MDQwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZmZmZmZmZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxYmZkYlwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZDllOTJjN2JiNlwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZDllOTJjN2JiNlwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGZmZmZiZmUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWNmNjBcIixcbiAgXCJkNzE5MWNmZGFlNjFhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJmZmZmYmZkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGVjZjQ5ZWJjZGE4ODU2YTdcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODQxOWRcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ4MTBmN2M0ZDAwNGJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBmM2RiYThkZGI1NDNhMmNhXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0MmI4Y2JlXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg2OGFjMDg0MDgxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2UyZjBhNmJkZGIxYzkwOTlcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YwMjgxOGFcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTZjNTkwMTQ2MzZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU3ZTFlZmM5OTRjN2RkMWM3N1wiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGNlMTI1NlwiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1Njk4MDA0MzY3MDAxZlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZGUwZGRmYTlmYjVjNTFiOGFcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFhZTAxN2VcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzc0OTAwNmFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWRmOGIxN2ZjZGJiMmM3ZmI4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MjI1ZWE4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MjUzNDk0MDgxZDU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImY3ZmNiOWFkZGQ4ZTMxYTM1NFwiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTIzODQ0M1wiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNjgzNzAwNDUyOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmY3YmNmZWM0NGZkOTVmMGVcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjljYzRjMDJcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI5OTM0MDQ2NjI1MDZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZlZGEwZmViMjRjZjAzYjIwXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZTMxYTFjXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYmQwMDI2ODAwMDI2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImRlZWJmNzllY2FlMTMxODJiZFwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjIxNzFiNVwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NTE5YzA4MzA2YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1ZTBhMWQ5OWIzMWEzNTRcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYyMzhiNDVcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjBmMGYwYmRiZGJkNjM2MzYzXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NTI1MjUyXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1MDAwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlNmNlZmRhZTZiZTY1NTBkXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZDk0NzAxXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxYTYzNjAzN2YyNzA0XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbmV4cG9ydCB2YXIgY29vbCA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGMgPSBjdWJlaGVsaXgoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XG4gIGMuaCA9IDM2MCAqIHQgLSAxMDA7XG4gIGMucyA9IDEuNSAtIDEuNSAqIHRzO1xuICBjLmwgPSAwLjggLSAwLjkgKiB0cztcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiaW1wb3J0IHtyZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuXG52YXIgYyA9IHJnYigpLFxuICAgIHBpXzFfMyA9IE1hdGguUEkgLyAzLFxuICAgIHBpXzJfMyA9IE1hdGguUEkgKiAyIC8gMztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMuciA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCkpICogeDtcbiAgYy5nID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMV8zKSkgKiB4O1xuICBjLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShwKSB7XG4gIHJldHVybiBwWzFdO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IHBvaW50WCxcbiAgICAgIHgxID0gbnVsbCxcbiAgICAgIHkwID0gY29uc3RhbnQoMCksXG4gICAgICB5MSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGFyZWEpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJlYTtcbn1cbiIsImltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IHZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcblxuZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gIHRoaXMuX2N1cnZlID0gY3VydmU7XG59XG5cblJhZGlhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYVN0YXJ0KCk7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFFbmQoKTtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgIHRoaXMuX2N1cnZlLnBvaW50KHIgKiBNYXRoLnNpbihhKSwgciAqIC1NYXRoLmNvcyhhKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XG5cbiAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gIH1cblxuICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgcmV0dXJuIHJhZGlhbDtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWxcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVSYWRpYWwobCkge1xuICB2YXIgYyA9IGwuY3VydmU7XG5cbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgbC5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsaW5lUmFkaWFsKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gWyh5ID0gK3kpICogTWF0aC5jb3MoeCAtPSBNYXRoLlBJIC8gMiksIHkgKiBNYXRoLnNpbih4KV07XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gcGkpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyksXG4gICAgdGFuMzBfMiA9IHRhbjMwICogMjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICB4ID0geSAqIHRhbjMwO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGhcIjtcblxudmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMCxcbiAgICBrciA9IE1hdGguc2luKHBpIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpIC8gMTApLFxuICAgIGt4ID0gTWF0aC5zaW4odGF1IC8gMTApICoga3IsXG4gICAga3kgPSAtTWF0aC5jb3ModGF1IC8gMTApICoga3I7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgKiBrYSksXG4gICAgICAgIHggPSBreCAqIHIsXG4gICAgICAgIHkgPSBreSAqIHI7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICB2YXIgYSA9IHRhdSAqIGkgLyA1LFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICBzID0gTWF0aC5zaW4oYSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgIH1cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHcgPSBNYXRoLnNxcnQoc2l6ZSksXG4gICAgICAgIHggPSAtdyAvIDI7XG4gICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICB9XG59O1xuIiwidmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJ2YXIgYyA9IC0wLjUsXG4gICAgcyA9IE1hdGguc3FydCgzKSAvIDIsXG4gICAgayA9IDEgLyBNYXRoLnNxcnQoMTIpLFxuICAgIGEgPSAoayAvIDIgKyAxKSAqIDM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBhKSxcbiAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgeDEgPSB4MCxcbiAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgIHgyID0gLXgxLFxuICAgICAgICB5MiA9IHkxO1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjICogeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyICsgcyAqIHkyLCBjICogeTIgLSBzICogeDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXMucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9jb250ZXh0LmxpbmVUbygoNSAqIHRoaXMuX3gwICsgdGhpcy5feDEpIC8gNiwgKDUgKiB0aGlzLl95MCArIHRoaXMuX3kxKSAvIDYpOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQmFzaXNPcGVuKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHZhciB4MCA9ICh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgeTAgPSAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDY7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MCwgeTApIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeDAsIHkwKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtCYXNpc30gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgdGhpcy5fYmFzaXMgPSBuZXcgQmFzaXMoY29udGV4dCk7XG4gIHRoaXMuX2JldGEgPSBiZXRhO1xufVxuXG5CdW5kbGUucHJvdG90eXBlID0ge1xuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIGogPSB4Lmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoaiA+IDApIHtcbiAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgeTAgPSB5WzBdLFxuICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICB0O1xuXG4gICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgdCA9IGkgLyBqO1xuICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB5W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh5MCArIHQgKiBkeSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgZnVuY3Rpb24gYnVuZGxlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gIH1cblxuICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgfTtcblxuICByZXR1cm4gYnVuZGxlO1xufSkoMC44NSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7Q2FyZGluYWx9IGZyb20gXCIuL2NhcmRpbmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICB9XG5cbiAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbikge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWwoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbENsb3NlZH0gZnJvbSBcIi4vY2FyZGluYWxDbG9zZWRcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbE9wZW59IGZyb20gXCIuL2NhcmRpbmFsT3BlblwiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbVwiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5mdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZWxzZSB0aGlzLl9wb2ludCA9IDEsIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5OYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBuID0geC5sZW5ndGg7XG5cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHhbMF0sIHlbMF0pIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeFswXSwgeVswXSk7XG4gICAgICBpZiAobiA9PT0gMikge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBweCA9IGNvbnRyb2xQb2ludHMoeCksXG4gICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAxOyBpMSA8IG47ICsraTAsICsraTEpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8ocHhbMF1baTBdLCBweVswXVtpMF0sIHB4WzFdW2kwXSwgcHlbMV1baTBdLCB4W2kxXSwgeVtpMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG5mdW5jdGlvbiBjb250cm9sUG9pbnRzKHgpIHtcbiAgdmFyIGksXG4gICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgbSxcbiAgICAgIGEgPSBuZXcgQXJyYXkobiksXG4gICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgciA9IG5ldyBBcnJheShuKTtcbiAgYVswXSA9IDAsIGJbMF0gPSAyLCByWzBdID0geFswXSArIDIgKiB4WzFdO1xuICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gIGFbbiAtIDFdID0gMiwgYltuIC0gMV0gPSA3LCByW24gLSAxXSA9IDggKiB4W24gLSAxXSArIHhbbl07XG4gIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgZm9yIChpID0gbiAtIDI7IGkgPj0gMDsgLS1pKSBhW2ldID0gKHJbaV0gLSBhW2kgKyAxXSkgLyBiW2ldO1xuICBiW24gLSAxXSA9ICh4W25dICsgYVtuIC0gMV0pIC8gMjtcbiAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IE5hdHVyYWwoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBTdGVwKGNvbnRleHQsIHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX3QgPSB0O1xufVxuXG5TdGVwLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgwIDwgdGhpcy5fdCAmJiB0aGlzLl90IDwgMSAmJiB0aGlzLl9wb2ludCA9PT0gMikgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgdGhpcy5feSk7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGlmICh0aGlzLl9saW5lID49IDApIHRoaXMuX3QgPSAxIC0gdGhpcy5fdCwgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fdCA8PSAwKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgeSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHgxID0gdGhpcy5feCAqICgxIC0gdGhpcy5fdCkgKyB4ICogdGhpcy5fdDtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgdGhpcy5feSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDEsIGosIHMwLCBzMSA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XG4gICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbyA9IG5ldyBBcnJheShuKTtcbiAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgcmV0dXJuIG87XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgb2Zmc2V0Tm9uZSBmcm9tIFwiLi9vZmZzZXQvbm9uZVwiO1xuaW1wb3J0IG9yZGVyTm9uZSBmcm9tIFwiLi9vcmRlci9ub25lXCI7XG5cbmZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gIHJldHVybiBkW2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IGNvbnN0YW50KFtdKSxcbiAgICAgIG9yZGVyID0gb3JkZXJOb25lLFxuICAgICAgb2Zmc2V0ID0gb2Zmc2V0Tm9uZSxcbiAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcblxuICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgdmFyIGt6ID0ga2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBpLFxuICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIG4gPSBrei5sZW5ndGgsXG4gICAgICAgIHN6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBvejtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGtpID0ga3pbaV0sIHNpID0gc3pbaV0gPSBuZXcgQXJyYXkobSksIGogPSAwLCBzaWo7IGogPCBtOyArK2opIHtcbiAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgIHNpai5kYXRhID0gZGF0YVtqXTtcbiAgICAgIH1cbiAgICAgIHNpLmtleSA9IGtpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XG4gICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgIH1cblxuICAgIG9mZnNldChzeiwgb3opO1xuICAgIHJldHVybiBzejtcbiAgfVxuXG4gIHN0YWNrLmtleXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoc2xpY2UuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gIH07XG5cbiAgc3RhY2sudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgc3RhY2spIDogdmFsdWU7XG4gIH07XG5cbiAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBvcmRlck5vbmUgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpLCBzdGFjaykgOiBvcmRlcjtcbiAgfTtcblxuICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gb2Zmc2V0Tm9uZSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gc3RhY2s7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgc3VtcyA9IHNlcmllcy5tYXAoc3VtKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1bShzZXJpZXMpIHtcbiAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICB3aGlsZSAoKytpIDwgbikgaWYgKHYgPSArc2VyaWVzW2ldWzFdKSBzICs9IHY7XG4gIHJldHVybiBzO1xufVxuIiwiZnVuY3Rpb24gUmVkQmxhY2tUcmVlKCkge1xuICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XG4gIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gIG5vZGUuQyA9IC8vIGNvbG9yIC0gdHJ1ZSBmb3IgcmVkLCBmYWxzZSBmb3IgYmxhY2tcbiAgbm9kZS5MID0gLy8gbGVmdCBub2RlXG4gIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgbm9kZS5QID0gLy8gcHJldmlvdXMgbm9kZVxuICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcbn1cblxuUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFJlZEJsYWNrVHJlZSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG5cbiAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG4gICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICBub2RlLlAgPSBudWxsO1xuICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgYWZ0ZXIgPSBub2RlO1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgIGlmIChwYXJlbnQgPT09IGdyYW5kcGEuTCkge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICB9XG4gICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgdmFyIHBhcmVudCA9IG5vZGUuVSxcbiAgICAgICAgc2libGluZyxcbiAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgcmlnaHQgPSBub2RlLlIsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHJlZDtcblxuICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0O1xuICAgIGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7XG4gICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl8gPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICByZWQgPSBuZXh0LkM7XG4gICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgbGVmdC5VID0gbmV4dDtcbiAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgIG5leHQuVSA9IG5vZGUuVTtcbiAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICBuZXh0LlIgPSByaWdodDtcbiAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICBkbyB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5fKSBicmVhaztcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLkwgfHwgIXNpYmxpbmcuTC5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5VO1xuICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5SLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLlIgPSBxLkw7XG4gIGlmIChwLlIpIHAuUi5VID0gcDtcbiAgcS5MID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG4gIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLkwsXG4gICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICB9IGVsc2Uge1xuICAgIHRyZWUuXyA9IHE7XG4gIH1cblxuICBxLlUgPSBwYXJlbnQ7XG4gIHAuVSA9IHE7XG4gIHAuTCA9IHEuUjtcbiAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICBxLlIgPSBwO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZEJsYWNrVHJlZTtcbiIsImltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFZGdlKGxlZnQsIHJpZ2h0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICBpZiAodjEpIHNldEVkZ2VFbmQoZWRnZSwgcmlnaHQsIGxlZnQsIHYxKTtcbiAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJvcmRlckVkZ2UobGVmdCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW3YwLCB2MV07XG4gIGVkZ2UubGVmdCA9IGxlZnQ7XG4gIHJldHVybiBlZGdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdmVydGV4KSB7XG4gIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIH0gZWxzZSBpZiAoZWRnZS5sZWZ0ID09PSByaWdodCkge1xuICAgIGVkZ2VbMV0gPSB2ZXJ0ZXg7XG4gIH0gZWxzZSB7XG4gICAgZWRnZVswXSA9IHZlcnRleDtcbiAgfVxufVxuXG4vLyBMaWFuZ+KAk0JhcnNreSBsaW5lIGNsaXBwaW5nLlxuZnVuY3Rpb24gY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgYiA9IGVkZ2VbMV0sXG4gICAgICBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gIGlmICh0MCA+IDApIGVkZ2VbMF0gPSBbYXggKyB0MCAqIGR4LCBheSArIHQwICogZHldO1xuICBpZiAodDEgPCAxKSBlZGdlWzFdID0gW2F4ICsgdDEgKiBkeCwgYXkgKyB0MSAqIGR5XTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3RFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciB2MSA9IGVkZ2VbMV07XG4gIGlmICh2MSkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHYwID0gZWRnZVswXSxcbiAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICByaWdodCA9IGVkZ2UucmlnaHQsXG4gICAgICBseCA9IGxlZnRbMF0sXG4gICAgICBseSA9IGxlZnRbMV0sXG4gICAgICByeCA9IHJpZ2h0WzBdLFxuICAgICAgcnkgPSByaWdodFsxXSxcbiAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgIGZ5ID0gKGx5ICsgcnkpIC8gMixcbiAgICAgIGZtLFxuICAgICAgZmI7XG5cbiAgaWYgKHJ5ID09PSBseSkge1xuICAgIGlmIChmeCA8IHgwIHx8IGZ4ID49IHgxKSByZXR1cm47XG4gICAgaWYgKGx4ID4gcngpIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MF07XG4gICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgdjEgPSBbZngsIHkxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkxXTtcbiAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xuICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdIDwgeDApIHJldHVybjtcbiAgICAgICAgdjEgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWRnZVswXSA9IHYwO1xuICBlZGdlWzFdID0gdjE7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvblxuICAgICAgICAgICAgfHwgTWF0aC5hYnMoZWRnZVswXVsxXSAtIGVkZ2VbMV1bMV0pID4gZXBzaWxvbikpIHtcbiAgICAgIGRlbGV0ZSBlZGdlc1tpXTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Y3JlYXRlQm9yZGVyRWRnZX0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCA9PT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICBpQ2VsbCxcbiAgICAgIGNlbGwsXG4gICAgICBzaXRlLFxuICAgICAgaUhhbGZlZGdlLFxuICAgICAgaGFsZmVkZ2VzLFxuICAgICAgbkhhbGZlZGdlcyxcbiAgICAgIHN0YXJ0LFxuICAgICAgc3RhcnRYLFxuICAgICAgc3RhcnRZLFxuICAgICAgZW5kLFxuICAgICAgZW5kWCxcbiAgICAgIGVuZFksXG4gICAgICBjb3ZlciA9IHRydWU7XG5cbiAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICBoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcztcbiAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UtLSkge1xuICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICBpSGFsZmVkZ2UgPSAwLCBuSGFsZmVkZ2VzID0gaGFsZmVkZ2VzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICBzdGFydCA9IGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1srK2lIYWxmZWRnZSAlIG5IYWxmZWRnZXNdXSksIHN0YXJ0WCA9IHN0YXJ0WzBdLCBzdGFydFkgPSBzdGFydFsxXTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24gJiYgeTEgLSBlbmRZID4gZXBzaWxvbiA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uICYmIHgxIC0gZW5kWCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiAmJiBlbmRZIC0geTAgPiBlcHNpbG9uID8gW3gxLCBNYXRoLmFicyhzdGFydFggLSB4MSkgPCBlcHNpbG9uID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24gJiYgZW5kWCAtIHgwID4gZXBzaWxvbiA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtSZWRCbGFja05vZGV9IGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuaW1wb3J0IHtjaXJjbGVzLCBlcHNpbG9uMn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG5leHBvcnQgdmFyIGZpcnN0Q2lyY2xlO1xuXG5mdW5jdGlvbiBDaXJjbGUoKSB7XG4gIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgdGhpcy54ID1cbiAgdGhpcy55ID1cbiAgdGhpcy5hcmMgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmN5ID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgIHJBcmMgPSBhcmMuTjtcblxuICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBjU2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgclNpdGUgPSByQXJjLnNpdGU7XG5cbiAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gIHZhciBieCA9IGNTaXRlWzBdLFxuICAgICAgYnkgPSBjU2l0ZVsxXSxcbiAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgIGF5ID0gbFNpdGVbMV0gLSBieSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBieCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICBpZiAoZCA+PSAtZXBzaWxvbjIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gIGlmIChjaXJjbGUpIHtcbiAgICBpZiAoIWNpcmNsZS5QKSBmaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgY2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG4gICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y3JlYXRlQ2VsbH0gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHthdHRhY2hDaXJjbGUsIGRldGFjaENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NyZWF0ZUVkZ2UsIHNldEVkZ2VFbmR9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7YmVhY2hlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICB4ID0gY2lyY2xlLngsXG4gICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgcHJldmlvdXMgPSBiZWFjaC5QLFxuICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gIGRldGFjaEJlYWNoKGJlYWNoKTtcblxuICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICB3aGlsZSAobEFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvblxuICAgICAgJiYgTWF0aC5hYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24pIHtcbiAgICBuZXh0ID0gckFyYy5OO1xuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgIHJBcmMgPSBuZXh0O1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLFxuICAgICAgaUFyYztcbiAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgfVxuXG4gIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcblxuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgIGR4ciA9IHggLSByaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcbiAgICAgIGlmIChkeHIgPiBlcHNpbG9uKSB7XG4gICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbikge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVDZWxsKHNpdGUpO1xuICB2YXIgbmV3QXJjID0gY3JlYXRlQmVhY2goc2l0ZSk7XG4gIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cbiAgaWYgKGxBcmMgPT09IHJBcmMpIHtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgckFyYyA9IGNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgYmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcbiAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXJBcmMpIHsgLy8gJiYgbEFyY1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgIGF5ID0gbFNpdGVbMV0sXG4gICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgclNpdGUgPSByQXJjLnNpdGUsXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXG4gICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHZlcnRleCA9IFsoY3kgKiBoYiAtIGJ5ICogaGMpIC8gZCArIGF4LCAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XTtcblxuICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xufVxuXG5mdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgcmZvY3ggPSBzaXRlWzBdLFxuICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuXG4gIHZhciBsQXJjID0gYXJjLlA7XG4gIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICBzaXRlID0gbEFyYy5zaXRlO1xuICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MixcbiAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcbn1cblxuZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciByQXJjID0gYXJjLk47XG4gIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgcmV0dXJuIHNpdGVbMV0gPT09IGRpcmVjdHJpeCA/IHNpdGVbMF0gOiBJbmZpbml0eTtcbn1cbiIsImltcG9ydCB7YWRkQmVhY2gsIHJlbW92ZUJlYWNofSBmcm9tIFwiLi9CZWFjaFwiO1xuaW1wb3J0IHtzb3J0Q2VsbEhhbGZlZGdlcywgY2VsbEhhbGZlZGdlU3RhcnQsIGNsaXBDZWxsc30gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHtmaXJzdENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NsaXBFZGdlc30gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IFJlZEJsYWNrVHJlZSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgYmVhY2hlcztcbmV4cG9ydCB2YXIgY2VsbHM7XG5leHBvcnQgdmFyIGNpcmNsZXM7XG5leHBvcnQgdmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICByZXR1cm4gbm9kZS5fX3pvb20gfHwgaWRlbnRpdHk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==