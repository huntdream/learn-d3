(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(t,n,e){"use strict";var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){return 1===t.length&&(t=function(t){return function(n,e){return r(t(n),e)}}(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var f=r+i>>>1;t(n[f],e)<0?r=f+1:i=f}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var f=r+i>>>1;t(n[f],e)>0?i=f:r=f+1}return r}}};var f=i(r),o=f.right,a=(f.left,o);var u=function(t){return null===t?NaN:+t},c=function(t,n){var e,r,i=t.length,f=0,o=-1,a=0,c=0;if(null==n)for(;++o<i;)isNaN(e=u(t[o]))||(c+=(r=e-a)*(e-(a+=r/++f)));else for(;++o<i;)isNaN(e=u(n(t[o],o,t)))||(c+=(r=e-a)*(e-(a+=r/++f)));if(f>1)return c/(f-1)},s=function(t,n){var e=c(t,n);return e?Math.sqrt(e):e},h=function(t,n){var e,r,i,f=t.length,o=-1;if(null==n){for(;++o<f;)if(null!=(e=t[o])&&e>=e)for(r=i=e;++o<f;)null!=(e=t[o])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++o<f;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=i=e;++o<f;)null!=(e=n(t[o],o,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},l=Array.prototype,d=(l.slice,l.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),f=new Array(i);++r<i;)f[r]=t+r*e;return f}),p=Math.sqrt(50),_=Math.sqrt(10),b=Math.sqrt(2),v=function(t,n,e){var r,i,f,o,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(o=y(t,n,e))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),n=Math.floor(n/o),f=new Array(i=Math.ceil(n-t+1));++a<i;)f[a]=(t+a)*o;else for(t=Math.floor(t*o),n=Math.ceil(n*o),f=new Array(i=Math.ceil(t-n+1));++a<i;)f[a]=(t-a)/o;return r&&f.reverse(),f};function y(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),f=r/Math.pow(10,i);return i>=0?(f>=p?10:f>=_?5:f>=b?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(f>=p?10:f>=_?5:f>=b?2:1)}function g(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),f=r/i;return f>=p?i*=10:f>=_?i*=5:f>=b&&(i*=2),n<t?-i:i}var x=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},m=function(t,n,e){if(null==e&&(e=u),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,f=Math.floor(i),o=+e(t[f],f,t);return o+(+e(t[f+1],f+1,t)-o)*(i-f)}},w=function(t,n){var e,r,i=t.length,f=-1;if(null==n){for(;++f<i;)if(null!=(e=t[f])&&e>=e)for(r=e;++f<i;)null!=(e=t[f])&&e>r&&(r=e)}else for(;++f<i;)if(null!=(e=n(t[f],f,t))&&e>=e)for(r=e;++f<i;)null!=(e=n(t[f],f,t))&&e>r&&(r=e);return r},M=function(t){for(var n,e,r,i=t.length,f=-1,o=0;++f<i;)o+=t[f].length;for(e=new Array(o);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--o]=r[n];return e},T=function(t,n){var e,r,i=t.length,f=-1;if(null==n){for(;++f<i;)if(null!=(e=t[f])&&e>=e)for(r=e;++f<i;)null!=(e=t[f])&&r>e&&(r=e)}else for(;++f<i;)if(null!=(e=n(t[f],f,t))&&e>=e)for(r=e;++f<i;)null!=(e=n(t[f],f,t))&&r>e&&(r=e);return r},N=function(t){if(!(i=t.length))return[];for(var n=-1,e=T(t,A),r=new Array(e);++n<e;)for(var i,f=-1,o=r[n]=new Array(i);++f<i;)o[f]=t[f][n];return r};function A(t){return t.length}var S=Array.prototype.slice,k=function(t){return t},E=1,C=2,U=3,L=4,P=1e-6;function R(t){return"translate("+(t+.5)+",0)"}function D(t){return"translate(0,"+(t+.5)+")"}function q(){return!this.__axis}function F(t,n){var e=[],r=null,i=null,f=6,o=6,a=3,u=t===E||t===L?-1:1,c=t===L||t===C?"x":"y",s=t===E||t===U?R:D;function h(h){var l=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):k:i,p=Math.max(f,0)+a,_=n.range(),b=+_[0]+.5,v=+_[_.length-1]+.5,y=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),g=h.selection?h.selection():h,x=g.selectAll(".domain").data([null]),m=g.selectAll(".tick").data(l,n).order(),w=m.exit(),M=m.enter().append("g").attr("class","tick"),T=m.select("line"),N=m.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),m=m.merge(M),T=T.merge(M.append("line").attr("stroke","#000").attr(c+"2",u*f)),N=N.merge(M.append("text").attr("fill","#000").attr(c,u*p).attr("dy",t===E?"0em":t===U?"0.71em":"0.32em")),h!==g&&(x=x.transition(h),m=m.transition(h),T=T.transition(h),N=N.transition(h),w=w.transition(h).attr("opacity",P).attr("transform",function(t){return isFinite(t=y(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",P).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:y(t))})),w.remove(),x.attr("d",t===L||t==C?"M"+u*o+","+b+"H0.5V"+v+"H"+u*o:"M"+b+","+u*o+"V0.5H"+v+"V"+u*o),m.attr("opacity",1).attr("transform",function(t){return s(y(t))}),T.attr(c+"2",u*f),N.attr(c,u*p).text(d),g.filter(q).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===C?"start":t===L?"end":"middle"),g.each(function(){this.__axis=y})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=S.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:S.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:S.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(f=o=+t,h):f},h.tickSizeInner=function(t){return arguments.length?(f=+t,h):f},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(a=+t,h):a},h}function Y(t){return F(U,t)}function j(t){return F(L,t)}var O={value:function(){}};function z(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new I(r)}function I(t){this._=t}function H(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function $(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=O,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}I.prototype=z.prototype={constructor:I,on:function(t,n){var e,r=this._,i=function(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}(t+"",r),f=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++f<o;)if(e=(t=i[f]).type)r[e]=$(r[e],t.name,n);else if(null==n)for(e in r)r[e]=$(r[e],t.name,null);return this}for(;++f<o;)if((e=(t=i[f]).type)&&(e=H(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new I(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),f=0;f<e;++f)i[f]=arguments[f+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(f=0,e=(r=this._[t]).length;f<e;++f)r[f].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,f=r.length;i<f;++i)r[i].value.apply(n,e)}};var X=z,B="http://www.w3.org/1999/xhtml",V={svg:"http://www.w3.org/2000/svg",xhtml:B,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Z=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),V.hasOwnProperty(n)?{space:V[n],local:t}:t};var J=function(t){var n=Z(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===B&&n.documentElement.namespaceURI===B?n.createElement(t):n.createElementNS(e,t)}})(n)};function W(){}var Q=function(t){return null==t?W:function(){return this.querySelector(t)}};function G(){return[]}var K=function(t){return null==t?G:function(){return this.querySelectorAll(t)}},tt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var nt=document.documentElement;if(!nt.matches){var et=nt.webkitMatchesSelector||nt.msMatchesSelector||nt.mozMatchesSelector||nt.oMatchesSelector;tt=function(t){return function(){return et.call(this,t)}}}}var rt=tt,it=function(t){return new Array(t.length)};function ft(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}ft.prototype={constructor:ft,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var ot="$";function at(t,n,e,r,i,f){for(var o,a=0,u=n.length,c=f.length;a<c;++a)(o=n[a])?(o.__data__=f[a],r[a]=o):e[a]=new ft(t,f[a]);for(;a<u;++a)(o=n[a])&&(i[a]=o)}function ut(t,n,e,r,i,f,o){var a,u,c,s={},h=n.length,l=f.length,d=new Array(h);for(a=0;a<h;++a)(u=n[a])&&(d[a]=c=ot+o.call(u,u.__data__,a,n),c in s?i[a]=u:s[c]=u);for(a=0;a<l;++a)(u=s[c=ot+o.call(t,f[a],a,f)])?(r[a]=u,u.__data__=f[a],s[c]=null):e[a]=new ft(t,f[a]);for(a=0;a<h;++a)(u=n[a])&&s[d[a]]===u&&(i[a]=u)}function ct(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var st=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function ht(t,n){return t.style.getPropertyValue(n)||st(t).getComputedStyle(t,null).getPropertyValue(n)}function lt(t){return t.trim().split(/^|\s+/)}function dt(t){return t.classList||new pt(t)}function pt(t){this._node=t,this._names=lt(t.getAttribute("class")||"")}function _t(t,n){for(var e=dt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function bt(t,n){for(var e=dt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}pt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function vt(){this.textContent=""}function yt(){this.innerHTML=""}function gt(){this.nextSibling&&this.parentNode.appendChild(this)}function xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(){return null}function wt(){var t=this.parentNode;t&&t.removeChild(this)}function Mt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Tt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Nt={},At=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Nt={mouseenter:"mouseover",mouseleave:"mouseout"}));function St(t,n,e){return t=kt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function kt(t,n,e){return function(r){var i=At;At=r;try{t.call(this,this.__data__,n,e)}finally{At=i}}}function Et(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,f=n.length;r<f;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ct(t,n,e){var r=Nt.hasOwnProperty(t.type)?St:kt;return function(i,f,o){var a,u=this.__on,c=r(n,f,o);if(u)for(var s=0,h=u.length;s<h;++s)if((a=u[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},u?u.push(a):this.__on=[a]}}function Ut(t,n,e,r){var i=At;t.sourceEvent=At,At=t;try{return n.apply(e,r)}finally{At=i}}function Lt(t,n,e){var r=st(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Pt=[null];function Rt(t,n){this._groups=t,this._parents=n}function Dt(){return new Rt([[document.documentElement]],Pt)}Rt.prototype=Dt.prototype={constructor:Rt,select:function(t){"function"!=typeof t&&(t=Q(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var f,o,a=n[i],u=a.length,c=r[i]=new Array(u),s=0;s<u;++s)(f=a[s])&&(o=t.call(f,f.__data__,s,a))&&("__data__"in f&&(o.__data__=f.__data__),c[s]=o);return new Rt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=K(t));for(var n=this._groups,e=n.length,r=[],i=[],f=0;f<e;++f)for(var o,a=n[f],u=a.length,c=0;c<u;++c)(o=a[c])&&(r.push(t.call(o,o.__data__,c,a)),i.push(o));return new Rt(r,i)},filter:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var f,o=n[i],a=o.length,u=r[i]=[],c=0;c<a;++c)(f=o[c])&&t.call(f,f.__data__,c,o)&&u.push(f);return new Rt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e=n?ut:at,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var f=i.length,o=new Array(f),a=new Array(f),u=new Array(f),c=0;c<f;++c){var s=r[c],h=i[c],l=h.length,d=t.call(s,s&&s.__data__,c,r),p=d.length,_=a[c]=new Array(p),b=o[c]=new Array(p);e(s,h,_,b,u[c]=new Array(l),d,n);for(var v,y,g=0,x=0;g<p;++g)if(v=_[g]){for(g>=x&&(x=g+1);!(y=b[x])&&++x<p;);v._next=y||null}}return(o=new Rt(o,r))._enter=a,o._exit=u,o},enter:function(){return new Rt(this._enter||this._groups.map(it),this._parents)},exit:function(){return new Rt(this._exit||this._groups.map(it),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,f=Math.min(r,i),o=new Array(r),a=0;a<f;++a)for(var u,c=n[a],s=e[a],h=c.length,l=o[a]=new Array(h),d=0;d<h;++d)(u=c[d]||s[d])&&(l[d]=u);for(;a<r;++a)o[a]=n[a];return new Rt(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],f=i.length-1,o=i[f];--f>=0;)(r=i[f])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=ct);for(var e=this._groups,r=e.length,i=new Array(r),f=0;f<r;++f){for(var o,a=e[f],u=a.length,c=i[f]=new Array(u),s=0;s<u;++s)(o=a[s])&&(c[s]=o);c.sort(n)}return new Rt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,f=r.length;i<f;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,f=n[e],o=0,a=f.length;o<a;++o)(i=f[o])&&t.call(i,i.__data__,o,f);return this},attr:function(t,n){var e=Z(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):ht(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=lt(t+"");if(arguments.length<2){for(var r=dt(this.node()),i=-1,f=e.length;++i<f;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?_t:bt)(this,t)}}:n?function(t){return function(){_t(this,t)}}:function(t){return function(){bt(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?vt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?yt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(gt)},lower:function(){return this.each(xt)},append:function(t){var n="function"==typeof t?t:J(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:J(t),r=null==n?mt:"function"==typeof n?n:Q(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(wt)},clone:function(t){return this.select(t?Tt:Mt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,f=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),o=f.length;if(!(arguments.length<2)){for(a=n?Ct:Et,null==e&&(e=!1),r=0;r<o;++r)this.each(a(f[r],n,e));return this}var a=this.node().__on;if(a)for(var u,c=0,s=a.length;c<s;++c)for(r=0,u=a[c];r<o;++r)if((i=f[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Lt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Lt(this,t,n)}})(t,n))}};var qt=Dt,Ft=function(t){return"string"==typeof t?new Rt([[document.querySelector(t)]],[document.documentElement]):new Rt([[t]],Pt)},Yt=0;function jt(){this._="@"+(++Yt).toString(36)}jt.prototype=function(){return new jt}.prototype={constructor:jt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Ot=function(){for(var t,n=At;t=n.sourceEvent;)n=t;return n},zt=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},It=function(t){var n=Ot();return n.changedTouches&&(n=n.changedTouches[0]),zt(t,n)},Ht=function(t,n,e){arguments.length<3&&(e=n,n=Ot().changedTouches);for(var r,i=0,f=n?n.length:0;i<f;++i)if((r=n[i]).identifier===e)return zt(t,r);return null};var $t=function(){At.preventDefault(),At.stopImmediatePropagation()},Xt=function(t){var n=t.document.documentElement,e=Ft(t).on("dragstart.drag",$t,!0);"onselectstart"in n?e.on("selectstart.drag",$t,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function Bt(t,n){var e=t.document.documentElement,r=Ft(t).on("dragstart.drag",null);n&&(r.on("click.drag",$t,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Vt(t,n,e,r,i,f,o,a,u,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=f,this.y=o,this.dx=a,this.dy=u,this._=c}Vt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Zt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Jt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Wt(){}var Qt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",tn=/^#([0-9a-f]{3})$/,nn=/^#([0-9a-f]{6})$/,en=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),rn=new RegExp("^rgb\\("+[Kt,Kt,Kt]+"\\)$"),fn=new RegExp("^rgba\\("+[Qt,Qt,Qt,Gt]+"\\)$"),on=new RegExp("^rgba\\("+[Kt,Kt,Kt,Gt]+"\\)$"),an=new RegExp("^hsl\\("+[Gt,Kt,Kt]+"\\)$"),un=new RegExp("^hsla\\("+[Gt,Kt,Kt,Gt]+"\\)$"),cn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function sn(t){var n;return t=(t+"").trim().toLowerCase(),(n=tn.exec(t))?new _n((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=nn.exec(t))?hn(parseInt(n[1],16)):(n=en.exec(t))?new _n(n[1],n[2],n[3],1):(n=rn.exec(t))?new _n(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=fn.exec(t))?ln(n[1],n[2],n[3],n[4]):(n=on.exec(t))?ln(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=an.exec(t))?vn(n[1],n[2]/100,n[3]/100,1):(n=un.exec(t))?vn(n[1],n[2]/100,n[3]/100,n[4]):cn.hasOwnProperty(t)?hn(cn[t]):"transparent"===t?new _n(NaN,NaN,NaN,0):null}function hn(t){return new _n(t>>16&255,t>>8&255,255&t,1)}function ln(t,n,e,r){return r<=0&&(t=n=e=NaN),new _n(t,n,e,r)}function dn(t){return t instanceof Wt||(t=sn(t)),t?new _n((t=t.rgb()).r,t.g,t.b,t.opacity):new _n}function pn(t,n,e,r){return 1===arguments.length?dn(t):new _n(t,n,e,null==r?1:r)}function _n(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function bn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function vn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new gn(t,n,e,r)}function yn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof gn)return new gn(t.h,t.s,t.l,t.opacity);if(t instanceof Wt||(t=sn(t)),!t)return new gn;if(t instanceof gn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),f=Math.max(n,e,r),o=NaN,a=f-i,u=(f+i)/2;return a?(o=n===f?(e-r)/a+6*(e<r):e===f?(r-n)/a+2:(n-e)/a+4,a/=u<.5?f+i:2-f-i,o*=60):a=u>0&&u<1?0:o,new gn(o,a,u,t.opacity)}(t):new gn(t,n,e,null==r?1:r)}function gn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function xn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Zt(Wt,sn,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Zt(_n,pn,Jt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new _n(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new _n(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+bn(this.r)+bn(this.g)+bn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Zt(gn,yn,Jt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new gn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new gn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new _n(xn(t>=240?t-240:t+120,i,r),xn(t,i,r),xn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var mn=Math.PI/180,wn=180/Math.PI,Mn=.96422,Tn=1,Nn=.82521,An=4/29,Sn=6/29,kn=3*Sn*Sn,En=Sn*Sn*Sn;function Cn(t){if(t instanceof Ln)return new Ln(t.l,t.a,t.b,t.opacity);if(t instanceof jn){if(isNaN(t.h))return new Ln(t.l,0,0,t.opacity);var n=t.h*mn;return new Ln(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof _n||(t=dn(t));var e,r,i=qn(t.r),f=qn(t.g),o=qn(t.b),a=Pn((.2225045*i+.7168786*f+.0606169*o)/Tn);return i===f&&f===o?e=r=a:(e=Pn((.4360747*i+.3850649*f+.1430804*o)/Mn),r=Pn((.0139322*i+.0971045*f+.7141733*o)/Nn)),new Ln(116*a-16,500*(e-a),200*(a-r),t.opacity)}function Un(t,n,e,r){return 1===arguments.length?Cn(t):new Ln(t,n,e,null==r?1:r)}function Ln(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Pn(t){return t>En?Math.pow(t,1/3):t/kn+An}function Rn(t){return t>Sn?t*t*t:kn*(t-An)}function Dn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function qn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Fn(t){if(t instanceof jn)return new jn(t.h,t.c,t.l,t.opacity);if(t instanceof Ln||(t=Cn(t)),0===t.a&&0===t.b)return new jn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*wn;return new jn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Yn(t,n,e,r){return 1===arguments.length?Fn(t):new jn(t,n,e,null==r?1:r)}function jn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Zt(Ln,Un,Jt(Wt,{brighter:function(t){return new Ln(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ln(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new _n(Dn(3.1338561*(n=Mn*Rn(n))-1.6168667*(t=Tn*Rn(t))-.4906146*(e=Nn*Rn(e))),Dn(-.9787684*n+1.9161415*t+.033454*e),Dn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Zt(jn,Yn,Jt(Wt,{brighter:function(t){return new jn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new jn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Cn(this).rgb()}}));var On=-.29227,zn=-.90649,In=1.97294,Hn=In*zn,$n=1.78277*In,Xn=1.78277*On- -.14861*zn;function Bn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Vn)return new Vn(t.h,t.s,t.l,t.opacity);t instanceof _n||(t=dn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Xn*r+Hn*n-$n*e)/(Xn+Hn-$n),f=r-i,o=(In*(e-i)-On*f)/zn,a=Math.sqrt(o*o+f*f)/(In*i*(1-i)),u=a?Math.atan2(o,f)*wn-120:NaN;return new Vn(u<0?u+360:u,a,i,t.opacity)}(t):new Vn(t,n,e,null==r?1:r)}function Vn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Zn(t,n,e,r,i){var f=t*t,o=f*t;return((1-3*t+3*f-o)*n+(4-6*f+3*o)*e+(1+3*t+3*f-3*o)*r+o*i)/6}Zt(Vn,Bn,Jt(Wt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*mn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new _n(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(On*r+zn*i)),255*(n+e*(In*r)),this.opacity)}}));var Jn=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],f=t[r+1],o=r>0?t[r-1]:2*i-f,a=r<n-1?t[r+2]:2*f-i;return Zn((e-r/n)*n,o,i,f,a)}},Wn=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],f=t[r%n],o=t[(r+1)%n],a=t[(r+2)%n];return Zn((e-r/n)*n,i,f,o,a)}},Qn=function(t){return function(){return t}};function Gn(t,n){return function(e){return t+e*n}}function Kn(t,n){var e=n-t;return e?Gn(t,e>180||e<-180?e-360*Math.round(e/360):e):Qn(isNaN(t)?n:t)}function te(t){return 1==(t=+t)?ne:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Qn(isNaN(n)?e:n)}}function ne(t,n){var e=n-t;return e?Gn(t,e):Qn(isNaN(t)?n:t)}var ee=function t(n){var e=te(n);function r(t,n){var r=e((t=pn(t)).r,(n=pn(n)).r),i=e(t.g,n.g),f=e(t.b,n.b),o=ne(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=f(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function re(t){return function(n){var e,r,i=n.length,f=new Array(i),o=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=pn(n[e]),f[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return f=t(f),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=f(t),r.g=o(t),r.b=a(t),r+""}}}var ie=re(Jn),fe=(re(Wn),function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,f=new Array(i),o=new Array(r);for(e=0;e<i;++e)f[e]=be(t[e],n[e]);for(;e<r;++e)o[e]=n[e];return function(t){for(e=0;e<i;++e)o[e]=f[e](t);return o}}),oe=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},ae=function(t,n){return n-=t=+t,function(e){return t+n*e}},ue=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=be(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},ce=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,se=new RegExp(ce.source,"g");var he,le,de,pe,_e=function(t,n){var e,r,i,f=ce.lastIndex=se.lastIndex=0,o=-1,a=[],u=[];for(t+="",n+="";(e=ce.exec(t))&&(r=se.exec(n));)(i=r.index)>f&&(i=n.slice(f,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,u.push({i:o,x:ae(e,r)})),f=se.lastIndex;return f<n.length&&(i=n.slice(f),a[o]?a[o]+=i:a[++o]=i),a.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)a[(e=u[r]).i]=e.x(t);return a.join("")})},be=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Qn(n):("number"===r?ae:"string"===r?(e=sn(n))?(n=e,ee):_e:n instanceof sn?ee:n instanceof Date?oe:Array.isArray(n)?fe:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?ue:ae)(t,n)},ve=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},ye=180/Math.PI,ge={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},xe=function(t,n,e,r,i,f){var o,a,u;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,u/=a),t*r<n*e&&(t=-t,n=-n,u=-u,o=-o),{translateX:i,translateY:f,rotate:Math.atan2(n,t)*ye,skewX:Math.atan(u)*ye,scaleX:o,scaleY:a}};function me(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(f,o){var a=[],u=[];return f=t(f),o=t(o),function(t,r,i,f,o,a){if(t!==i||r!==f){var u=o.push("translate(",null,n,null,e);a.push({i:u-4,x:ae(t,i)},{i:u-2,x:ae(r,f)})}else(i||f)&&o.push("translate("+i+n+f+e)}(f.translateX,f.translateY,o.translateX,o.translateY,a,u),function(t,n,e,f){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),f.push({i:e.push(i(e)+"rotate(",null,r)-2,x:ae(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(f.rotate,o.rotate,a,u),function(t,n,e,f){t!==n?f.push({i:e.push(i(e)+"skewX(",null,r)-2,x:ae(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(f.skewX,o.skewX,a,u),function(t,n,e,r,f,o){if(t!==e||n!==r){var a=f.push(i(f)+"scale(",null,",",null,")");o.push({i:a-4,x:ae(t,e)},{i:a-2,x:ae(n,r)})}else 1===e&&1===r||f.push(i(f)+"scale("+e+","+r+")")}(f.scaleX,f.scaleY,o.scaleX,o.scaleY,a,u),f=o=null,function(t){for(var n,e=-1,r=u.length;++e<r;)a[(n=u[e]).i]=n.x(t);return a.join("")}}}var we=me(function(t){return"none"===t?ge:(he||(he=document.createElement("DIV"),le=document.documentElement,de=document.defaultView),he.style.transform=t,t=de.getComputedStyle(le.appendChild(he),null).getPropertyValue("transform"),le.removeChild(he),t=t.slice(7,-1).split(","),xe(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Me=me(function(t){return null==t?ge:(pe||(pe=document.createElementNS("http://www.w3.org/2000/svg","g")),pe.setAttribute("transform",t),(t=pe.transform.baseVal.consolidate())?(t=t.matrix,xe(t.a,t.b,t.c,t.d,t.e,t.f)):ge)},", ",")",")"),Te=Math.SQRT2;function Ne(t){return((t=Math.exp(t))+1/t)/2}var Ae=function(t,n){var e,r,i=t[0],f=t[1],o=t[2],a=n[0],u=n[1],c=n[2],s=a-i,h=u-f,l=s*s+h*h;if(l<1e-12)r=Math.log(c/o)/Te,e=function(t){return[i+t*s,f+t*h,o*Math.exp(Te*t*r)]};else{var d=Math.sqrt(l),p=(c*c-o*o+4*l)/(2*o*2*d),_=(c*c-o*o-4*l)/(2*c*2*d),b=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(_*_+1)-_);r=(v-b)/Te,e=function(t){var n=t*r,e=Ne(b),a=o/(2*d)*(e*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(Te*n+b)-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[i+a*s,f+a*h,o*e/Ne(Te*n+b)]}}return e.duration=1e3*r,e};function Se(t){return function(n,e){var r=t((n=yn(n)).h,(e=yn(e)).h),i=ne(n.s,e.s),f=ne(n.l,e.l),o=ne(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=f(t),n.opacity=o(t),n+""}}}Se(Kn),Se(ne);function ke(t){return function(n,e){var r=t((n=Yn(n)).h,(e=Yn(e)).h),i=ne(n.c,e.c),f=ne(n.l,e.l),o=ne(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=f(t),n.opacity=o(t),n+""}}}ke(Kn),ke(ne);function Ee(t){return function n(e){function r(n,r){var i=t((n=Bn(n)).h,(r=Bn(r)).h),f=ne(n.s,r.s),o=ne(n.l,r.l),a=ne(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=f(t),n.l=o(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}Ee(Kn);var Ce=Ee(ne);var Ue,Le,Pe=0,Re=0,De=0,qe=1e3,Fe=0,Ye=0,je=0,Oe="object"==typeof performance&&performance.now?performance:Date,ze="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ie(){return Ye||(ze(He),Ye=Oe.now()+je)}function He(){Ye=0}function $e(){this._call=this._time=this._next=null}function Xe(t,n,e){var r=new $e;return r.restart(t,n,e),r}function Be(){Ye=(Fe=Oe.now())+je,Pe=Re=0;try{!function(){Ie(),++Pe;for(var t,n=Ue;n;)(t=Ye-n._time)>=0&&n._call.call(null,t),n=n._next;--Pe}()}finally{Pe=0,function(){var t,n,e=Ue,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ue=n);Le=t,Ze(r)}(),Ye=0}}function Ve(){var t=Oe.now(),n=t-Fe;n>qe&&(je-=n,Fe=t)}function Ze(t){Pe||(Re&&(Re=clearTimeout(Re)),t-Ye>24?(t<1/0&&(Re=setTimeout(Be,t-Oe.now()-je)),De&&(De=clearInterval(De))):(De||(Fe=Oe.now(),De=setInterval(Ve,qe)),Pe=1,ze(Be)))}$e.prototype=Xe.prototype={constructor:$e,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ie():+e)+(null==n?0:+n),this._next||Le===this||(Le?Le._next=this:Ue=this,Le=this),this._call=t,this._time=e,Ze()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ze())}};var Je=function(t,n,e){var r=new $e;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},We=X("start","end","interrupt"),Qe=[],Ge=0,Ke=1,tr=2,nr=3,er=4,rr=5,ir=6,fr=function(t,n,e,r,i,f){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function f(u){var c,s,h,l;if(e.state!==Ke)return a();for(c in i)if((l=i[c]).name===e.name){if(l.state===nr)return Je(f);l.state===er?(l.state=ir,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[c]):+c<n&&(l.state=ir,l.timer.stop(),delete i[c])}if(Je(function(){e.state===nr&&(e.state=er,e.timer.restart(o,e.delay,e.time),o(u))}),e.state=tr,e.on.call("start",t,t.__data__,e.index,e.group),e.state===tr){for(e.state=nr,r=new Array(h=e.tween.length),c=0,s=-1;c<h;++c)(l=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=l);r.length=s+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=rr,1),f=-1,o=r.length;++f<o;)r[f].call(null,i);e.state===rr&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=ir,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Xe(function(t){e.state=Ke,e.timer.restart(f,e.delay,e.time),e.delay<=t&&f(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:We,tween:Qe,time:f.time,delay:f.delay,duration:f.duration,ease:f.ease,timer:null,state:Ge})};function or(t,n){var e=ur(t,n);if(e.state>Ge)throw new Error("too late; already scheduled");return e}function ar(t,n){var e=ur(t,n);if(e.state>tr)throw new Error("too late; already started");return e}function ur(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var cr=function(t,n){var e,r,i,f=t.__transition,o=!0;if(f){for(i in n=null==n?null:n+"",f)(e=f[i]).name===n?(r=e.state>tr&&e.state<rr,e.state=ir,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete f[i]):o=!1;o&&delete t.__transition}};function sr(t,n,e){var r=t._id;return t.each(function(){var t=ar(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ur(t,r).value[n]}}var hr=function(t,n){var e;return("number"==typeof n?ae:n instanceof sn?ee:(e=sn(n))?(n=e,ee):_e)(t,n)};var lr=qt.prototype.constructor;var dr=0;function pr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function _r(){return++dr}var br=qt.prototype;function vr(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}pr.prototype=function(t){return qt().transition(t)}.prototype={constructor:pr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Q(t));for(var r=this._groups,i=r.length,f=new Array(i),o=0;o<i;++o)for(var a,u,c=r[o],s=c.length,h=f[o]=new Array(s),l=0;l<s;++l)(a=c[l])&&(u=t.call(a,a.__data__,l,c))&&("__data__"in a&&(u.__data__=a.__data__),h[l]=u,fr(h[l],n,e,l,h,ur(a,e)));return new pr(f,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=K(t));for(var r=this._groups,i=r.length,f=[],o=[],a=0;a<i;++a)for(var u,c=r[a],s=c.length,h=0;h<s;++h)if(u=c[h]){for(var l,d=t.call(u,u.__data__,h,c),p=ur(u,e),_=0,b=d.length;_<b;++_)(l=d[_])&&fr(l,n,e,_,d,p);f.push(d),o.push(u)}return new pr(f,o,n,e)},filter:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var f,o=n[i],a=o.length,u=r[i]=[],c=0;c<a;++c)(f=o[c])&&t.call(f,f.__data__,c,o)&&u.push(f);return new pr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,f=Math.min(r,i),o=new Array(r),a=0;a<f;++a)for(var u,c=n[a],s=e[a],h=c.length,l=o[a]=new Array(h),d=0;d<h;++d)(u=c[d]||s[d])&&(l[d]=u);for(;a<r;++a)o[a]=n[a];return new pr(o,this._parents,this._name,this._id)},selection:function(){return new lr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=_r(),r=this._groups,i=r.length,f=0;f<i;++f)for(var o,a=r[f],u=a.length,c=0;c<u;++c)if(o=a[c]){var s=ur(o,n);fr(o,t,e,c,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new pr(r,this._parents,t,e)},call:br.call,nodes:br.nodes,node:br.node,size:br.size,empty:br.empty,each:br.each,on:function(t,n){var e=this._id;return arguments.length<2?ur(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,f=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?or:ar;return function(){var o=f(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(n,e),o.on=i}}(e,t,n))},attr:function(t,n){var e=Z(t),r="transform"===e?Me:hr;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,f;return function(){var o,a=e(this);if(null!=a)return(o=this.getAttributeNS(t.space,t.local))===a?null:o===r&&a===i?f:f=n(r=o,i=a);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,f;return function(){var o,a=e(this);if(null!=a)return(o=this.getAttribute(t))===a?null:o===r&&a===i?f:f=n(r=o,i=a);this.removeAttribute(t)}})(e,r,sr(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var f=this.getAttributeNS(t.space,t.local);return f===e?null:f===r?i:i=n(r=f,e)}}:function(t,n,e){var r,i;return function(){var f=this.getAttribute(t);return f===e?null:f===r?i:i=n(r=f,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Z(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?we:hr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var f=ht(this,t),o=(this.style.removeProperty(t),ht(this,t));return f===o?null:f===e&&o===r?i:i=n(e=f,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,f;return function(){var o=ht(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=ht(this,t)),o===a?null:o===r&&a===i?f:f=n(r=o,i=a)}}(t,r,sr(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var f=ht(this,t);return f===e?null:f===r?i:i=n(r=f,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(sr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ur(this.node(),e).tween,f=0,o=i.length;f<o;++f)if((r=i[f]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=ar(this,t),f=i.tween;if(f!==e)for(var o=0,a=(r=e=f).length;o<a;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var f=ar(this,t),o=f.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},u=0,c=i.length;u<c;++u)if(i[u].name===n){i[u]=a;break}u===c&&i.push(a)}f.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){or(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){or(this,t).delay=n}})(n,t)):ur(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ar(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ar(this,t).duration=n}})(n,t)):ur(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){ar(this,t).ease=n}}(n,t)):ur(this.node(),n).ease}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var yr=2*Math.PI,gr=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=yr);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*yr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=yr);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*yr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=yr);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*yr)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:vr});function xr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return gr.time=Ie(),gr;return e}qt.prototype.interrupt=function(t){return this.each(function(){cr(this,t)})},qt.prototype.transition=function(t){var n,e;t instanceof pr?(n=t._id,t=t._name):(n=_r(),(e=gr).time=Ie(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,f=0;f<i;++f)for(var o,a=r[f],u=a.length,c=0;c<u;++c)(o=a[c])&&fr(o,t,n,c,a,e||xr(o,n));return new pr(r,this._parents,t,n)};["e","w"].map(mr),["n","s"].map(mr),["n","e","s","w","nw","ne","se","sw"].map(mr);function mr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var wr=Math.PI,Mr=2*wr,Tr=Mr-1e-6;function Nr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ar(){return new Nr}Nr.prototype=Ar.prototype={constructor:Nr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,f){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+f)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var f=this._x1,o=this._y1,a=e-t,u=r-n,c=f-t,s=o-n,h=c*c+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(s*a-u*c)>1e-6&&i){var l=e-f,d=r-o,p=a*a+u*u,_=l*l+d*d,b=Math.sqrt(p),v=Math.sqrt(h),y=i*Math.tan((wr-Math.acos((p+h-_)/(2*b*v)))/2),g=y/v,x=y/b;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*c)+","+(n+g*s)),this._+="A"+i+","+i+",0,0,"+ +(s*l>c*d)+","+(this._x1=t+x*a)+","+(this._y1=n+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,f){t=+t,n=+n;var o=(e=+e)*Math.cos(r),a=e*Math.sin(r),u=t+o,c=n+a,s=1^f,h=f?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+c:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+u+","+c),e&&(h<0&&(h=h%Mr+Mr),h>Tr?this._+="A"+e+","+e+",0,1,"+s+","+(t-o)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=u)+","+(this._y1=c):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=wr)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Sr=Ar;function kr(){}function Er(t,n){var e=new kr;if(t instanceof kr)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,f=t.length;if(null==n)for(;++i<f;)e.set(i,t[i]);else for(;++i<f;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}kr.prototype=Er.prototype={constructor:kr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Cr=Er,Ur=function(){var t,n,e,r=[],i=[];function f(e,i,o,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,c,s,h=-1,l=e.length,d=r[i++],p=Cr(),_=o();++h<l;)(s=p.get(u=d(c=e[h])+""))?s.push(c):p.set(u,[c]);return p.each(function(t,n){a(_,n,f(t,i,o,a))}),_}return e={object:function(t){return f(t,0,Lr,Pr)},map:function(t){return f(t,0,Rr,Dr)},entries:function(t){return function t(e,f){if(++f>r.length)return e;var o,a=i[f-1];return null!=n&&f>=r.length?o=e.entries():(o=[],e.each(function(n,e){o.push({key:e,values:t(n,f)})})),null!=a?o.sort(function(t,n){return a(t.key,n.key)}):o}(f(t,0,Rr,Dr),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function Lr(){return{}}function Pr(t,n,e){t[n]=e}function Rr(){return Cr()}function Dr(t,n,e){t.set(n,e)}function qr(){}var Fr=Cr.prototype;function Yr(t,n){var e=new qr;if(t instanceof qr)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}qr.prototype=Yr.prototype={constructor:qr,has:Fr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Fr.remove,clear:Fr.clear,values:Fr.keys,size:Fr.size,empty:Fr.empty,each:Fr.each};var jr=Array.prototype.slice,Or=function(t,n){return t-n},zr=function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r},Ir=function(t){return function(){return t}},Hr=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=$r(t,n[r]))return e;return 0};function $r(t,n){for(var e=n[0],r=n[1],i=-1,f=0,o=t.length,a=o-1;f<o;a=f++){var u=t[f],c=u[0],s=u[1],h=t[a],l=h[0],d=h[1];if(Xr(u,h,n))return 0;s>r!=d>r&&e<(l-c)*(r-s)/(d-s)+c&&(i=-i)}return i}function Xr(t,n,e){var r;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&function(t,n,e){return t<=n&&n<=e||e<=n&&n<=t}(t[r=+(t[0]===n[0])],e[r],n[r])}var Br=function(){},Vr=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],Zr=function(){var t=1,n=1,e=x,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Or);else{var r=h(t),i=r[0],o=r[1];n=g(i,o,n),n=d(Math.floor(i/n)*n,Math.floor(o/n)*n,n)}return n.map(function(n){return f(t,n)})}function f(e,i){var f=[],a=[];return function(e,r,i){var f,a,u,c,s,h,l=new Array,d=new Array;f=a=-1,c=e[0]>=r,Vr[c<<1].forEach(p);for(;++f<t-1;)u=c,c=e[f+1]>=r,Vr[u|c<<1].forEach(p);Vr[c<<0].forEach(p);for(;++a<n-1;){for(f=-1,c=e[a*t+t]>=r,s=e[a*t]>=r,Vr[c<<1|s<<2].forEach(p);++f<t-1;)u=c,c=e[a*t+t+f+1]>=r,h=s,s=e[a*t+f+1]>=r,Vr[u|c<<1|s<<2|h<<3].forEach(p);Vr[c|s<<3].forEach(p)}f=-1,s=e[a*t]>=r,Vr[s<<2].forEach(p);for(;++f<t-1;)h=s,s=e[a*t+f+1]>=r,Vr[s<<2|h<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+f,t[0][1]+a],u=[t[1][0]+f,t[1][1]+a],c=o(r),s=o(u);(n=d[c])?(e=l[s])?(delete d[n.end],delete l[e.start],n===e?(n.ring.push(u),i(n.ring)):l[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(u),d[n.end=s]=n):(n=l[s])?(e=d[c])?(delete l[n.start],delete d[e.end],n===e?(n.ring.push(u),i(n.ring)):l[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete l[n.start],n.ring.unshift(r),l[n.start=c]=n):l[c]=d[s]={start:c,end:s,ring:[r,u]}}Vr[s<<3].forEach(p)}(e,i,function(t){r(t,e,i),zr(t)>0?f.push([t]):a.push(t)}),a.forEach(function(t){for(var n,e=0,r=f.length;e<r;++e)if(-1!==Hr((n=f[e])[0],t))return void n.push(t)}),{type:"MultiPolygon",value:i,coordinates:f}}function o(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach(function(e){var f,o=e[0],a=e[1],u=0|o,c=0|a,s=r[c*t+u];o>0&&o<t&&u===o&&(f=r[c*t+u-1],e[0]=o+(i-f)/(s-f)-.5),a>0&&a<n&&c===a&&(f=r[(c-1)*t+u],e[1]=a+(i-f)/(s-f)-.5)})}return i.contour=f,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),f=Math.ceil(e[1]);if(!(r>0&&f>0))throw new Error("invalid size");return t=r,n=f,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?Ir(jr.call(t)):Ir(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:Br,i):r===a},i};var Jr={},Wr={},Qr=34,Gr=10,Kr=13;function ti(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var ni=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],f=t.length,o=0,a=0,u=f<=0,c=!1;function s(){if(u)return Wr;if(c)return c=!1,Jr;var n,r,i=o;if(t.charCodeAt(i)===Qr){for(;o++<f&&t.charCodeAt(o)!==Qr||t.charCodeAt(++o)===Qr;);return(n=o)>=f?u=!0:(r=t.charCodeAt(o++))===Gr?c=!0:r===Kr&&(c=!0,t.charCodeAt(o)===Gr&&++o),t.slice(i+1,n-1).replace(/""/g,'"')}for(;o<f;){if((r=t.charCodeAt(n=o++))===Gr)c=!0;else if(r===Kr)c=!0,t.charCodeAt(o)===Gr&&++o;else if(r!==e)continue;return t.slice(i,n)}return u=!0,t.slice(i,f)}for(t.charCodeAt(f-1)===Gr&&--f,t.charCodeAt(f-1)===Kr&&--f;(r=s())!==Wr;){for(var h=[];r!==Jr&&r!==Wr;)h.push(r),r=s();n&&null==(h=n(h,a++))||i.push(h)}return i}function i(n){return n.map(f).join(t)}function f(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,f=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=ti(t);return function(r,i){return n(e(r),i,t)}}(t,n):ti(t)});return f.columns=i||[],f},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(f).join(t)].concat(n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},ei=ni(","),ri=ei.parse,ii=(ei.parseRows,ei.format,ei.formatRows,ni("\t")),fi=ii.parse;ii.parseRows,ii.format,ii.formatRows;function oi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var ai=function(t,n){return fetch(t,n).then(oi)};function ui(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ai(n,e).then(function(n){return t(n,r)})}}var ci=ui(ri);ui(fi);function si(t){return function(n,e){return ai(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}si("application/xml"),si("text/html"),si("image/svg+xml");function hi(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,f,o,a,u,c,s,h,l,d=t._root,p={data:r},_=t._x0,b=t._y0,v=t._x1,y=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=n>=(f=(_+v)/2))?_=f:v=f,(s=e>=(o=(b+y)/2))?b=o:y=o,i=d,!(d=d[h=s<<1|c]))return i[h]=p,t;if(a=+t._x.call(null,d.data),u=+t._y.call(null,d.data),n===a&&e===u)return p.next=d,i?i[h]=p:t._root=p,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(c=n>=(f=(_+v)/2))?_=f:v=f,(s=e>=(o=(b+y)/2))?b=o:y=o}while((h=s<<1|c)==(l=(u>=o)<<1|a>=f));return i[l]=d,i[h]=p,t}var li=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function di(t){return t[0]}function pi(t){return t[1]}function _i(t,n,e){var r=new bi(null==n?di:n,null==e?pi:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function bi(t,n,e,r,i,f){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=f,this._root=void 0}function vi(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var yi=_i.prototype=bi.prototype;yi.copy=function(){var t,n,e=new bi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=vi(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=vi(n));return e},yi.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return hi(this.cover(n,e),n,e,t)},yi.addAll=function(t){var n,e,r,i,f=t.length,o=new Array(f),a=new Array(f),u=1/0,c=1/0,s=-1/0,h=-1/0;for(e=0;e<f;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,a[e]=i,r<u&&(u=r),r>s&&(s=r),i<c&&(c=i),i>h&&(h=i));for(s<u&&(u=this._x0,s=this._x1),h<c&&(c=this._y0,h=this._y1),this.cover(u,c).cover(s,h),e=0;e<f;++e)hi(this,o[e],a[e],t[e]);return this},yi.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,f=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,f=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>f))return this;var o,a,u=i-e,c=this._root;switch(a=(n<(r+f)/2)<<1|t<(e+i)/2){case 0:do{(o=new Array(4))[a]=c,c=o}while(f=r+(u*=2),t>(i=e+u)||n>f);break;case 1:do{(o=new Array(4))[a]=c,c=o}while(f=r+(u*=2),(e=i-u)>t||n>f);break;case 2:do{(o=new Array(4))[a]=c,c=o}while(r=f-(u*=2),t>(i=e+u)||r>n);break;case 3:do{(o=new Array(4))[a]=c,c=o}while(r=f-(u*=2),(e=i-u)>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=f,this},yi.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},yi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},yi.find=function(t,n,e){var r,i,f,o,a,u,c,s=this._x0,h=this._y0,l=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new li(_,s,h,l,d)),null==e?e=1/0:(s=t-e,h=n-e,l=t+e,d=n+e,e*=e);u=p.pop();)if(!(!(_=u.node)||(i=u.x0)>l||(f=u.y0)>d||(o=u.x1)<s||(a=u.y1)<h))if(_.length){var b=(i+o)/2,v=(f+a)/2;p.push(new li(_[3],b,v,o,a),new li(_[2],i,v,b,a),new li(_[1],b,f,o,v),new li(_[0],i,f,b,v)),(c=(n>=v)<<1|t>=b)&&(u=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=u)}else{var y=t-+this._x.call(null,_.data),g=n-+this._y.call(null,_.data),x=y*y+g*g;if(x<e){var m=Math.sqrt(e=x);s=t-m,h=n-m,l=t+m,d=n+m,r=_.data}}return r},yi.remove=function(t){if(isNaN(f=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,f,o,a,u,c,s,h,l,d=this._root,p=this._x0,_=this._y0,b=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((c=f>=(a=(p+b)/2))?p=a:b=a,(s=o>=(u=(_+v)/2))?_=u:v=u,n=d,!(d=d[h=s<<1|c]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=i,this)},yi.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},yi.root=function(){return this._root},yi.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},yi.visit=function(t){var n,e,r,i,f,o,a=[],u=this._root;for(u&&a.push(new li(u,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(u=n.node,r=n.x0,i=n.y0,f=n.x1,o=n.y1)&&u.length){var c=(r+f)/2,s=(i+o)/2;(e=u[3])&&a.push(new li(e,c,s,f,o)),(e=u[2])&&a.push(new li(e,r,s,c,o)),(e=u[1])&&a.push(new li(e,c,i,f,s)),(e=u[0])&&a.push(new li(e,r,i,c,s))}return this},yi.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new li(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var f,o=n.x0,a=n.y0,u=n.x1,c=n.y1,s=(o+u)/2,h=(a+c)/2;(f=i[0])&&e.push(new li(f,o,a,s,h)),(f=i[1])&&e.push(new li(f,s,a,u,h)),(f=i[2])&&e.push(new li(f,o,h,s,c)),(f=i[3])&&e.push(new li(f,s,h,u,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},yi.x=function(t){return arguments.length?(this._x=t,this):this._x},yi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var gi=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},xi=function(t){return(t=gi(Math.abs(t)))?t[1]:NaN},mi=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function wi(t){return new Mi(t)}function Mi(t){if(!(n=mi.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}wi.prototype=Mi.prototype,Mi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ti,Ni,Ai,Si,ki=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Ei=function(t,n){var e=gi(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Ci={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ei(100*t,n)},r:Ei,s:function(t,n){var e=gi(t,n);if(!e)return t+"";var r=e[0],i=e[1],f=i-(Ti=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return f===o?r:f>o?r+new Array(f-o+1).join("0"):f>0?r.slice(0,f)+"."+r.slice(f):"0."+new Array(1-f).join("0")+gi(t,Math.max(0,n+f-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ui=function(t){return t},Li=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Pi=function(t){var n=t.grouping&&t.thousands?function(t,n){return function(e,r){for(var i=e.length,f=[],o=0,a=t[0],u=0;i>0&&a>0&&(u+a+1>r&&(a=Math.max(1,r-u)),f.push(e.substring(i-=a,i+a)),!((u+=a+1)>r));)a=t[o=(o+1)%t.length];return f.reverse().join(n)}}(t.grouping,t.thousands):Ui,e=t.currency,r=t.decimal,i=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Ui,f=t.percent||"%";function o(t){var o=(t=wi(t)).fill,a=t.align,u=t.sign,c=t.symbol,s=t.zero,h=t.width,l=t.comma,d=t.precision,p=t.trim,_=t.type;"n"===_?(l=!0,_="g"):Ci[_]||(null==d&&(d=12),p=!0,_="g"),(s||"0"===o&&"="===a)&&(s=!0,o="0",a="=");var b="$"===c?e[0]:"#"===c&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",v="$"===c?e[1]:/[%p]/.test(_)?f:"",y=Ci[_],g=/[defgprs%]/.test(_);function x(t){var e,f,c,x=b,m=v;if("c"===_)m=y(t)+m,t="";else{var w=(t=+t)<0;if(t=y(Math.abs(t),d),p&&(t=ki(t)),w&&0==+t&&(w=!1),x=(w?"("===u?u:"-":"-"===u||"("===u?"":u)+x,m=("s"===_?Li[8+Ti/3]:"")+m+(w&&"("===u?")":""),g)for(e=-1,f=t.length;++e<f;)if(48>(c=t.charCodeAt(e))||c>57){m=(46===c?r+t.slice(e+1):t.slice(e))+m,t=t.slice(0,e);break}}l&&!s&&(t=n(t,1/0));var M=x.length+t.length+m.length,T=M<h?new Array(h-M+1).join(o):"";switch(l&&s&&(t=n(T+t,T.length?h-m.length:1/0),T=""),a){case"<":t=x+t+m+T;break;case"=":t=x+T+t+m;break;case"^":t=T.slice(0,M=T.length>>1)+x+t+m+T.slice(M);break;default:t=T+x+t+m}return i(t)}return d=null==d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:o,formatPrefix:function(t,n){var e=o(((t=wi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(xi(n)/3))),i=Math.pow(10,-r),f=Li[8+r/3];return function(t){return e(i*t)+f}}}};!function(t){Ni=Pi(t),Ai=Ni.format,Si=Ni.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Ri=function(t){return Math.max(0,-xi(Math.abs(t)))},Di=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(xi(n)/3)))-xi(Math.abs(t)))},qi=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,xi(n)-xi(t))+1},Fi=function(){return new Yi};function Yi(){this.reset()}Yi.prototype={constructor:Yi,reset:function(){this.s=this.t=0},add:function(t){Oi(ji,t,this.t),Oi(this,ji.s,this.s),this.s?this.t+=ji.t:this.s=ji.t},valueOf:function(){return this.s}};var ji=new Yi;function Oi(t,n,e){var r=t.s=n+e,i=r-n,f=r-i;t.t=n-f+(e-i)}var zi=1e-6,Ii=Math.PI,Hi=Ii/2,$i=Ii/4,Xi=2*Ii,Bi=180/Ii,Vi=Ii/180,Zi=Math.abs,Ji=Math.atan,Wi=Math.atan2,Qi=Math.cos,Gi=(Math.ceil,Math.exp),Ki=(Math.floor,Math.log),tf=(Math.pow,Math.sin),nf=Math.sign||function(t){return t>0?1:t<0?-1:0},ef=Math.sqrt,rf=Math.tan;function ff(t){return t>1?0:t<-1?Ii:Math.acos(t)}function of(t){return t>1?Hi:t<-1?-Hi:Math.asin(t)}function af(){}function uf(t,n){t&&sf.hasOwnProperty(t.type)&&sf[t.type](t,n)}var cf={Feature:function(t,n){uf(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)uf(e[r].geometry,n)}},sf={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){hf(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)hf(e[r],n,0)},Polygon:function(t,n){lf(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)lf(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)uf(e[r],n)}};function hf(t,n,e){var r,i=-1,f=t.length-e;for(n.lineStart();++i<f;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function lf(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)hf(t[e],n,1);n.polygonEnd()}var df=function(t,n){t&&cf.hasOwnProperty(t.type)?cf[t.type](t,n):uf(t,n)};Fi(),Fi();function pf(t){return[Wi(t[1],t[0]),of(t[2])]}function _f(t){var n=t[0],e=t[1],r=Qi(e);return[r*Qi(n),r*tf(n),tf(e)]}function bf(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function vf(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function yf(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function gf(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function xf(t){var n=ef(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Fi();var mf=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function wf(t,n){return[t>Ii?t-Xi:t<-Ii?t+Xi:t,n]}function Mf(t,n,e){return(t%=Xi)?n||e?mf(Nf(t),Af(n,e)):Nf(t):n||e?Af(n,e):wf}function Tf(t){return function(n,e){return[(n+=t)>Ii?n-Xi:n<-Ii?n+Xi:n,e]}}function Nf(t){var n=Tf(t);return n.invert=Tf(-t),n}function Af(t,n){var e=Qi(t),r=tf(t),i=Qi(n),f=tf(n);function o(t,n){var o=Qi(n),a=Qi(t)*o,u=tf(t)*o,c=tf(n),s=c*e+a*r;return[Wi(u*i-s*f,a*e-c*r),of(s*i+u*f)]}return o.invert=function(t,n){var o=Qi(n),a=Qi(t)*o,u=tf(t)*o,c=tf(n),s=c*i-u*f;return[Wi(u*i+c*f,a*e+s*r),of(s*e-a*r)]},o}wf.invert=wf;var Sf=function(t){function n(n){return(n=t(n[0]*Vi,n[1]*Vi))[0]*=Bi,n[1]*=Bi,n}return t=Mf(t[0]*Vi,t[1]*Vi,t.length>2?t[2]*Vi:0),n.invert=function(n){return(n=t.invert(n[0]*Vi,n[1]*Vi))[0]*=Bi,n[1]*=Bi,n},n};function kf(t,n,e,r,i,f){if(e){var o=Qi(n),a=tf(n),u=r*e;null==i?(i=n+r*Xi,f=n-u/2):(i=Ef(o,i),f=Ef(o,f),(r>0?i<f:i>f)&&(i+=r*Xi));for(var c,s=i;r>0?s>f:s<f;s-=u)c=pf([o,-a*Qi(s),-a*tf(s)]),t.point(c[0],c[1])}}function Ef(t,n){(n=_f(n))[0]-=t,xf(n);var e=ff(-n[1]);return((-n[2]<0?-e:e)+Xi-zi)%Xi}var Cf=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:af,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Uf=function(t,n){return Zi(t[0]-n[0])<zi&&Zi(t[1]-n[1])<zi};function Lf(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Pf=function(t,n,e,r,i){var f,o,a=[],u=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],o=t[n];if(Uf(r,o)){for(i.lineStart(),f=0;f<n;++f)i.point((r=t[f])[0],r[1]);i.lineEnd()}else a.push(e=new Lf(r,t,null,!0)),u.push(e.o=new Lf(r,null,e,!1)),a.push(e=new Lf(o,t,null,!1)),u.push(e.o=new Lf(o,null,e,!0))}}),a.length){for(u.sort(n),Rf(a),Rf(u),f=0,o=u.length;f<o;++f)u[f].e=e=!e;for(var c,s,h=a[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;c=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(f=0,o=c.length;f<o;++f)i.point((s=c[f])[0],s[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(d)for(c=l.p.z,f=c.length-1;f>=0;--f)i.point((s=c[f])[0],s[1]);else r(l.x,l.p.x,-1,i);l=l.p}c=(l=l.o).z,d=!d}while(!l.v);i.lineEnd()}}};function Rf(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var Df=Fi(),qf=function(t,n){var e=n[0],r=n[1],i=tf(r),f=[tf(e),-Qi(e),0],o=0,a=0;Df.reset(),1===i?r=Hi+zi:-1===i&&(r=-Hi-zi);for(var u=0,c=t.length;u<c;++u)if(h=(s=t[u]).length)for(var s,h,l=s[h-1],d=l[0],p=l[1]/2+$i,_=tf(p),b=Qi(p),v=0;v<h;++v,d=g,_=m,b=w,l=y){var y=s[v],g=y[0],x=y[1]/2+$i,m=tf(x),w=Qi(x),M=g-d,T=M>=0?1:-1,N=T*M,A=N>Ii,S=_*m;if(Df.add(Wi(S*T*tf(N),b*w+S*Qi(N))),o+=A?M+T*Xi:M,A^d>=e^g>=e){var k=vf(_f(l),_f(y));xf(k);var E=vf(f,k);xf(E);var C=(A^M>=0?-1:1)*of(E[2]);(r>C||r===C&&(k[0]||k[1]))&&(a+=A^M>=0?1:-1)}}return(o<-zi||o<zi&&Df<-zi)^1&a},Ff=function(t,n,e,r){return function(i){var f,o,a,u=n(i),c=Cf(),s=n(c),h=!1,l={point:d,lineStart:_,lineEnd:b,polygonStart:function(){l.point=v,l.lineStart=y,l.lineEnd=g,o=[],f=[]},polygonEnd:function(){l.point=d,l.lineStart=_,l.lineEnd=b,o=M(o);var t=qf(f,r);o.length?(h||(i.polygonStart(),h=!0),Pf(o,jf,t,e,i)):t&&(h||(i.polygonStart(),h=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),o=f=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){u.point(t,n)}function _(){l.point=p,u.lineStart()}function b(){l.point=d,u.lineEnd()}function v(t,n){a.push([t,n]),s.point(t,n)}function y(){s.lineStart(),a=[]}function g(){v(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,u=s.clean(),l=c.result(),d=l.length;if(a.pop(),f.push(a),a=null,d)if(1&u){if((n=(e=l[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&u&&l.push(l.pop().concat(l.shift())),o.push(l.filter(Yf))}return l}};function Yf(t){return t.length>1}function jf(t,n){return((t=t.x)[0]<0?t[1]-Hi-zi:Hi-t[1])-((n=n.x)[0]<0?n[1]-Hi-zi:Hi-n[1])}var Of=Ff(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(f,o){var a=f>0?Ii:-Ii,u=Zi(f-e);Zi(u-Ii)<zi?(t.point(e,r=(r+o)/2>0?Hi:-Hi),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(f,r),n=0):i!==a&&u>=Ii&&(Zi(e-i)<zi&&(e-=i*zi),Zi(f-a)<zi&&(f-=a*zi),r=function(t,n,e,r){var i,f,o=tf(t-e);return Zi(o)>zi?Ji((tf(n)*(f=Qi(r))*tf(e)-tf(r)*(i=Qi(n))*tf(t))/(i*f*o)):(n+r)/2}(e,r,f,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=f,r=o),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*Hi,r.point(-Ii,i),r.point(0,i),r.point(Ii,i),r.point(Ii,0),r.point(Ii,-i),r.point(0,-i),r.point(-Ii,-i),r.point(-Ii,0),r.point(-Ii,i);else if(Zi(t[0]-n[0])>zi){var f=t[0]<n[0]?Ii:-Ii;i=e*f/2,r.point(-f,i),r.point(0,i),r.point(f,i)}else r.point(n[0],n[1])},[-Ii,-Hi]);var zf=function(t){var n=Qi(t),e=6*Vi,r=n>0,i=Zi(n)>zi;function f(t,e){return Qi(t)*Qi(e)>n}function o(t,e,r){var i=[1,0,0],f=vf(_f(t),_f(e)),o=bf(f,f),a=f[0],u=o-a*a;if(!u)return!r&&t;var c=n*o/u,s=-n*a/u,h=vf(i,f),l=gf(i,c);yf(l,gf(f,s));var d=h,p=bf(l,d),_=bf(d,d),b=p*p-_*(bf(l,l)-1);if(!(b<0)){var v=ef(b),y=gf(d,(-p-v)/_);if(yf(y,l),y=pf(y),!r)return y;var g,x=t[0],m=e[0],w=t[1],M=e[1];m<x&&(g=x,x=m,m=g);var T=m-x,N=Zi(T-Ii)<zi;if(!N&&M<w&&(g=w,w=M,M=g),N||T<zi?N?w+M>0^y[1]<(Zi(y[0]-x)<zi?w:M):w<=y[1]&&y[1]<=M:T>Ii^(x<=y[0]&&y[0]<=m)){var A=gf(d,(-p+v)/_);return yf(A,l),[y,pf(A)]}}}function a(n,e){var i=r?t:Ii-t,f=0;return n<-i?f|=1:n>i&&(f|=2),e<-i?f|=4:e>i&&(f|=8),f}return Ff(f,function(t){var n,e,u,c,s;return{lineStart:function(){c=u=!1,s=1},point:function(h,l){var d,p=[h,l],_=f(h,l),b=r?_?0:a(h,l):_?a(h+(h<0?Ii:-Ii),l):0;if(!n&&(c=u=_)&&t.lineStart(),_!==u&&(!(d=o(n,p))||Uf(n,d)||Uf(p,d))&&(p[0]+=zi,p[1]+=zi,_=f(p[0],p[1])),_!==u)s=0,_?(t.lineStart(),d=o(p,n),t.point(d[0],d[1])):(d=o(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^_){var v;b&e||!(v=o(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!_||n&&Uf(n,p)||t.point(p[0],p[1]),n=p,u=_,e=b},lineEnd:function(){u&&t.lineEnd(),n=null},clean:function(){return s|(c&&u)<<1}}},function(n,r,i,f){kf(f,t,e,i,n,r)},r?[0,-t]:[-Ii,t-Ii])},If=function(t,n,e,r,i,f){var o,a=t[0],u=t[1],c=0,s=1,h=n[0]-a,l=n[1]-u;if(o=e-a,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<s&&(s=o)}else if(h>0){if(o>s)return;o>c&&(c=o)}if(o=i-a,h||!(o<0)){if(o/=h,h<0){if(o>s)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<s&&(s=o)}if(o=r-u,l||!(o>0)){if(o/=l,l<0){if(o<c)return;o<s&&(s=o)}else if(l>0){if(o>s)return;o>c&&(c=o)}if(o=f-u,l||!(o<0)){if(o/=l,l<0){if(o>s)return;o>c&&(c=o)}else if(l>0){if(o<c)return;o<s&&(s=o)}return c>0&&(t[0]=a+c*h,t[1]=u+c*l),s<1&&(n[0]=a+s*h,n[1]=u+s*l),!0}}}}},Hf=1e9,$f=-Hf;function Xf(t,n,e,r){function i(i,f){return t<=i&&i<=e&&n<=f&&f<=r}function f(i,f,a,c){var s=0,h=0;if(null==i||(s=o(i,a))!==(h=o(f,a))||u(i,f)<0^a>0)do{c.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==h);else c.point(f[0],f[1])}function o(r,i){return Zi(r[0]-t)<zi?i>0?0:3:Zi(r[0]-e)<zi?i>0?2:1:Zi(r[1]-n)<zi?i>0?1:0:i>0?3:2}function a(t,n){return u(t.x,n.x)}function u(t,n){var e=o(t,1),r=o(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(o){var u,c,s,h,l,d,p,_,b,v,y,g=o,x=Cf(),m={point:w,lineStart:function(){m.point=T,c&&c.push(s=[]);v=!0,b=!1,p=_=NaN},lineEnd:function(){u&&(T(h,l),d&&b&&x.rejoin(),u.push(x.result()));m.point=w,b&&g.lineEnd()},polygonStart:function(){g=x,u=[],c=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=c.length;e<i;++e)for(var f,o,a=c[e],u=1,s=a.length,h=a[0],l=h[0],d=h[1];u<s;++u)f=l,o=d,h=a[u],l=h[0],d=h[1],o<=r?d>r&&(l-f)*(r-o)>(d-o)*(t-f)&&++n:d<=r&&(l-f)*(r-o)<(d-o)*(t-f)&&--n;return n}(),e=y&&n,i=(u=M(u)).length;(e||i)&&(o.polygonStart(),e&&(o.lineStart(),f(null,null,1,o),o.lineEnd()),i&&Pf(u,a,n,f,o),o.polygonEnd());g=o,u=c=s=null}};function w(t,n){i(t,n)&&g.point(t,n)}function T(f,o){var a=i(f,o);if(c&&s.push([f,o]),v)h=f,l=o,d=a,v=!1,a&&(g.lineStart(),g.point(f,o));else if(a&&b)g.point(f,o);else{var u=[p=Math.max($f,Math.min(Hf,p)),_=Math.max($f,Math.min(Hf,_))],x=[f=Math.max($f,Math.min(Hf,f)),o=Math.max($f,Math.min(Hf,o))];If(u,x,t,n,e,r)?(b||(g.lineStart(),g.point(u[0],u[1])),g.point(x[0],x[1]),a||g.lineEnd(),y=!1):a&&(g.lineStart(),g.point(f,o),y=!1)}p=f,_=o,b=a}return m}}var Bf,Vf,Zf,Jf=Fi(),Wf={sphere:af,point:af,lineStart:function(){Wf.point=Gf,Wf.lineEnd=Qf},lineEnd:af,polygonStart:af,polygonEnd:af};function Qf(){Wf.point=Wf.lineEnd=af}function Gf(t,n){Bf=t*=Vi,Vf=tf(n*=Vi),Zf=Qi(n),Wf.point=Kf}function Kf(t,n){t*=Vi;var e=tf(n*=Vi),r=Qi(n),i=Zi(t-Bf),f=Qi(i),o=r*tf(i),a=Zf*e-Vf*r*f,u=Vf*e+Zf*r*f;Jf.add(Wi(ef(o*o+a*a),u)),Bf=t,Vf=e,Zf=r}var to=function(t){return Jf.reset(),df(t,Wf),+Jf},no=[null,null],eo={type:"LineString",coordinates:no},ro=function(t,n){return no[0]=t,no[1]=n,to(eo)};var io=function(t){return t};Fi(),Fi();var fo=1/0,oo=fo,ao=-fo,uo=ao;var co={point:function(t,n){t<fo&&(fo=t);t>ao&&(ao=t);n<oo&&(oo=n);n>uo&&(uo=n)},lineStart:af,lineEnd:af,polygonStart:af,polygonEnd:af,result:function(){var t=[[fo,oo],[ao,uo]];return ao=uo=-(oo=fo=1/0),t}};function so(t){this._context=t}so.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Xi)}},result:af};Fi();function ho(){this._string=[]}function lo(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}ho.prototype={_radius:4.5,_circle:lo(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=lo(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function po(t){return function(n){var e=new _o;for(var r in t)e[r]=t[r];return e.stream=n,e}}function _o(){}function bo(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),df(e,t.stream(co)),n(co.result()),null!=r&&t.clipExtent(r),t}function vo(t,n,e){return bo(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],f=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),o=+n[0][0]+(r-f*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-f*(e[1][1]+e[0][1]))/2;t.scale(150*f).translate([o,a])},e)}function yo(t,n,e){return vo(t,[[0,0],n],e)}function go(t,n,e){return bo(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),f=(r-i*(e[1][0]+e[0][0]))/2,o=-i*e[0][1];t.scale(150*i).translate([f,o])},e)}function xo(t,n,e){return bo(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),f=-i*e[0][0],o=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([f,o])},e)}_o.prototype={constructor:_o,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var mo=16,wo=Qi(30*Vi),Mo=function(t,n){return+n?function(t,n){function e(r,i,f,o,a,u,c,s,h,l,d,p,_,b){var v=c-r,y=s-i,g=v*v+y*y;if(g>4*n&&_--){var x=o+l,m=a+d,w=u+p,M=ef(x*x+m*m+w*w),T=of(w/=M),N=Zi(Zi(w)-1)<zi||Zi(f-h)<zi?(f+h)/2:Wi(m,x),A=t(N,T),S=A[0],k=A[1],E=S-r,C=k-i,U=y*E-v*C;(U*U/g>n||Zi((v*E+y*C)/g-.5)>.3||o*l+a*d+u*p<wo)&&(e(r,i,f,o,a,u,S,k,N,x/=M,m/=M,w,_,b),b.point(S,k),e(S,k,N,x,m,w,c,s,h,l,d,p,_,b))}}return function(n){var r,i,f,o,a,u,c,s,h,l,d,p,_={point:b,lineStart:v,lineEnd:g,polygonStart:function(){n.polygonStart(),_.lineStart=x},polygonEnd:function(){n.polygonEnd(),_.lineStart=v}};function b(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,_.point=y,n.lineStart()}function y(r,i){var f=_f([r,i]),o=t(r,i);e(s,h,c,l,d,p,s=o[0],h=o[1],c=r,l=f[0],d=f[1],p=f[2],mo,n),n.point(s,h)}function g(){_.point=b,n.lineEnd()}function x(){v(),_.point=m,_.lineEnd=w}function m(t,n){y(r=t,n),i=s,f=h,o=l,a=d,u=p,_.point=y}function w(){e(s,h,c,l,d,p,i,f,r,o,a,u,mo,n),_.lineEnd=g,g()}return _}}(t,n):function(t){return po({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var To=po({point:function(t,n){this.stream.point(t*Vi,n*Vi)}});function No(t,n,e,r){var i=Qi(r),f=tf(r),o=i*t,a=f*t,u=i/t,c=f/t,s=(f*e-i*n)/t,h=(f*n+i*e)/t;function l(t,r){return[o*t-a*r+n,e-a*t-o*r]}return l.invert=function(t,n){return[u*t-c*n+s,h-c*t-u*n]},l}function Ao(t){return So(function(){return t})()}function So(t){var n,e,r,i,f,o,a,u,c,s,h=150,l=480,d=250,p=0,_=0,b=0,v=0,y=0,g=0,x=null,m=Of,w=null,M=io,T=.5;function N(t){return u(t[0]*Vi,t[1]*Vi)}function A(t){return(t=u.invert(t[0],t[1]))&&[t[0]*Bi,t[1]*Bi]}function S(){var t=No(h,0,0,g).apply(null,n(p,_)),r=(g?No:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(h,l-t[0],d-t[1],g);return e=Mf(b,v,y),a=mf(n,r),u=mf(e,a),o=Mo(a,T),k()}function k(){return c=s=null,N}return N.stream=function(t){return c&&s===t?c:c=To(function(t){return po({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(m(o(M(s=t)))))},N.preclip=function(t){return arguments.length?(m=t,x=void 0,k()):m},N.postclip=function(t){return arguments.length?(M=t,w=r=i=f=null,k()):M},N.clipAngle=function(t){return arguments.length?(m=+t?zf(x=t*Vi):(x=null,Of),k()):x*Bi},N.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=f=null,io):Xf(w=+t[0][0],r=+t[0][1],i=+t[1][0],f=+t[1][1]),k()):null==w?null:[[w,r],[i,f]]},N.scale=function(t){return arguments.length?(h=+t,S()):h},N.translate=function(t){return arguments.length?(l=+t[0],d=+t[1],S()):[l,d]},N.center=function(t){return arguments.length?(p=t[0]%360*Vi,_=t[1]%360*Vi,S()):[p*Bi,_*Bi]},N.rotate=function(t){return arguments.length?(b=t[0]%360*Vi,v=t[1]%360*Vi,y=t.length>2?t[2]%360*Vi:0,S()):[b*Bi,v*Bi,y*Bi]},N.angle=function(t){return arguments.length?(g=t%360*Vi,S()):g*Bi},N.precision=function(t){return arguments.length?(o=Mo(a,T=t*t),k()):ef(T)},N.fitExtent=function(t,n){return vo(N,t,n)},N.fitSize=function(t,n){return yo(N,t,n)},N.fitWidth=function(t,n){return go(N,t,n)},N.fitHeight=function(t,n){return xo(N,t,n)},function(){return n=t.apply(this,arguments),N.invert=n.invert&&A,S()}}function ko(t){var n=0,e=Ii/3,r=So(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Vi,e=t[1]*Vi):[n*Bi,e*Bi]},i}function Eo(t,n){var e=tf(t),r=(e+tf(n))/2;if(Zi(r)<zi)return function(t){var n=Qi(t);function e(t,e){return[t*n,tf(e)/n]}return e.invert=function(t,e){return[t/n,of(e*n)]},e}(t);var i=1+e*(2*r-e),f=ef(i)/r;function o(t,n){var e=ef(i-2*r*tf(n))/r;return[e*tf(t*=r),f-e*Qi(t)]}return o.invert=function(t,n){var e=f-n;return[Wi(t,Zi(e))/r*nf(e),of((i-(t*t+e*e)*r*r)/(2*r))]},o}var Co=function(){return ko(Eo).scale(155.424).center([0,33.6442])},Uo=function(){return Co().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};function Lo(t){return function(n,e){var r=Qi(n),i=Qi(e),f=t(r*i);return[f*i*tf(n),f*tf(e)]}}function Po(t){return function(n,e){var r=ef(n*n+e*e),i=t(r),f=tf(i),o=Qi(i);return[Wi(n*f,r*o),of(r&&e*f/r)]}}var Ro=Lo(function(t){return ef(2/(1+t))});Ro.invert=Po(function(t){return 2*of(t/2)});var Do=Lo(function(t){return(t=ff(t))&&t/tf(t)});Do.invert=Po(function(t){return t});function qo(t,n){return[t,Ki(rf((Hi+n)/2))]}qo.invert=function(t,n){return[t,2*Ji(Gi(n))-Hi]};function Fo(t,n){return[t,n]}Fo.invert=Fo;function Yo(t,n){var e=Qi(n),r=Qi(t)*e;return[e*tf(t)/r,tf(n)/r]}Yo.invert=Po(Ji);function jo(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}jo.invert=function(t,n){var e,r=n,i=25;do{var f=r*r,o=f*f;r-=e=(r*(1.007226+f*(.015085+o*(.028874*f-.044475-.005916*o)))-n)/(1.007226+f*(.045255+o*(.259866*f-.311325-.005916*11*o)))}while(Zi(e)>zi&&--i>0);return[t/(.8707+(f=r*r)*(f*(f*f*f*(.003971-.001529*f)-.013791)-.131979)),r]};function Oo(t,n){return[Qi(n)*tf(t),tf(n)]}Oo.invert=Po(of);function zo(t,n){var e=Qi(n),r=1+Qi(t)*e;return[e*tf(t)/r,tf(n)/r]}zo.invert=Po(function(t){return 2*Ji(t)});function Io(t,n){return[Ki(rf((Hi+n)/2)),-t]}Io.invert=function(t,n){return[-n,2*Ji(Gi(t))-Hi]};function Ho(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function $o(t,n){var e,r,i,f,o,a=new Zo(t),u=+t.value&&(a.value=t.value),c=[a];for(null==n&&(n=Xo);e=c.pop();)if(u&&(e.value=+e.data.value),(i=n(e.data))&&(o=i.length))for(e.children=new Array(o),f=o-1;f>=0;--f)c.push(r=e.children[f]=new Zo(i[f])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Vo)}function Xo(t){return t.children}function Bo(t){t.data=t.data.data}function Vo(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Zo(t){this.data=t,this.depth=this.height=0,this.parent=null}Zo.prototype=$o.prototype={constructor:Zo,count:function(){return this.eachAfter(Ho)},each:function(t){var n,e,r,i,f=this,o=[f];do{for(n=o.reverse(),o=[];f=n.pop();)if(t(f),e=f.children)for(r=0,i=e.length;r<i;++r)o.push(e[r])}while(o.length);return this},eachAfter:function(t){for(var n,e,r,i=this,f=[i],o=[];i=f.pop();)if(o.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)f.push(n[e]);for(;i=o.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return $o(this).eachBefore(Bo)}};var Jo=Array.prototype.slice;var Wo=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Jo.call(t))).length,f=[];r<i;)n=t[r],e&&Ko(e,n)?++r:(e=na(f=Qo(f,n)),r=0);return e};function Qo(t,n){var e,r;if(ta(n,t))return[n];for(e=0;e<t.length;++e)if(Go(n,t[e])&&ta(ea(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Go(ea(t[e],t[r]),n)&&Go(ea(t[e],n),t[r])&&Go(ea(t[r],n),t[e])&&ta(ra(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Go(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Ko(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function ta(t,n){for(var e=0;e<n.length;++e)if(!Ko(t,n[e]))return!1;return!0}function na(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return ea(t[0],t[1]);case 3:return ra(t[0],t[1],t[2])}}function ea(t,n){var e=t.x,r=t.y,i=t.r,f=n.x,o=n.y,a=n.r,u=f-e,c=o-r,s=a-i,h=Math.sqrt(u*u+c*c);return{x:(e+f+u/h*s)/2,y:(r+o+c/h*s)/2,r:(h+i+a)/2}}function ra(t,n,e){var r=t.x,i=t.y,f=t.r,o=n.x,a=n.y,u=n.r,c=e.x,s=e.y,h=e.r,l=r-o,d=r-c,p=i-a,_=i-s,b=u-f,v=h-f,y=r*r+i*i-f*f,g=y-o*o-a*a+u*u,x=y-c*c-s*s+h*h,m=d*p-l*_,w=(p*x-_*g)/(2*m)-r,M=(_*b-p*v)/m,T=(d*g-l*x)/(2*m)-i,N=(l*v-d*b)/m,A=M*M+N*N-1,S=2*(f+w*M+T*N),k=w*w+T*T-f*f,E=-(A?(S+Math.sqrt(S*S-4*A*k))/(2*A):k/S);return{x:r+w+M*E,y:i+T+N*E,r:E}}var ia=function(t,n,e,r,i){for(var f,o=t.children,a=-1,u=o.length,c=t.value&&(r-n)/t.value;++a<u;)(f=o[a]).y0=e,f.y1=i,f.x0=n,f.x1=n+=f.value*c};function fa(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}fa.prototype=Object.create(Zo.prototype);var oa=function(t,n,e,r,i){for(var f,o=t.children,a=-1,u=o.length,c=t.value&&(i-e)/t.value;++a<u;)(f=o[a]).x0=n,f.x1=r,f.y0=e,f.y1=e+=f.value*c},aa=(1+Math.sqrt(5))/2;function ua(t,n,e,r,i,f){for(var o,a,u,c,s,h,l,d,p,_,b,v=[],y=n.children,g=0,x=0,m=y.length,w=n.value;g<m;){u=i-e,c=f-r;do{s=y[x++].value}while(!s&&x<m);for(h=l=s,b=s*s*(_=Math.max(c/u,u/c)/(w*t)),p=Math.max(l/b,b/h);x<m;++x){if(s+=a=y[x].value,a<h&&(h=a),a>l&&(l=a),b=s*s*_,(d=Math.max(l/b,b/h))>p){s-=a;break}p=d}v.push(o={value:s,dice:u<c,children:y.slice(g,x)}),o.dice?ia(o,e,r,i,w?r+=c*s/w:f):oa(o,e,r,w?e+=u*s/w:i,f),w-=s,g=x}return v}var ca=function t(n){function e(t,e,r,i,f){ua(n,t,e,r,i,f)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(aa);(function t(n){function e(t,e,r,i,f){if((o=t._squarify)&&o.ratio===n)for(var o,a,u,c,s,h=-1,l=o.length,d=t.value;++h<l;){for(u=(a=o[h]).children,c=a.value=0,s=u.length;c<s;++c)a.value+=u[c].value;a.dice?ia(a,e,r,i,r+=(f-r)*a.value/d):oa(a,e,r,e+=(i-e)*a.value/d,f),d-=a.value}else t._squarify=o=ua(n,t,e,r,i,f),o.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(aa);var sa=function(){return Math.random()},ha=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(sa),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var f;if(null!=r)f=r,r=null;else do{r=2*n()-1,f=2*n()-1,i=r*r+f*f}while(!i||i>1);return t+e*f*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(sa)),la=(function t(n){function e(){var t=ha.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(sa),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(sa)),da=(function t(n){function e(t){var e=la.source(n)(t);return function(){return e()/t}}return e.source=t,e}(sa),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(sa),Array.prototype),pa=da.map,_a=da.slice,ba={name:"implicit"};function va(t){var n=Cr(),e=[],r=ba;function i(i){var f=i+"",o=n.get(f);if(!o){if(r!==ba)return r;n.set(f,o=e.push(i))}return t[(o-1)%t.length]}return t=null==t?[]:_a.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Cr();for(var r,f,o=-1,a=t.length;++o<a;)n.has(f=(r=t[o])+"")||n.set(f,e.push(r));return i},i.range=function(n){return arguments.length?(t=_a.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return va().domain(e).range(t).unknown(r)},i}function ya(){var t,n,e=va().unknown(void 0),r=e.domain,i=e.range,f=[0,1],o=!1,a=0,u=0,c=.5;function s(){var e=r().length,s=f[1]<f[0],h=f[s-0],l=f[1-s];t=(l-h)/Math.max(1,e-a+2*u),o&&(t=Math.floor(t)),h+=(l-h-t*(e-a))*c,n=t*(1-a),o&&(h=Math.round(h),n=Math.round(n));var p=d(e).map(function(n){return h+t*n});return i(s?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(f=[+t[0],+t[1]],s()):f.slice()},e.rangeRound=function(t){return f=[+t[0],+t[1]],o=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(o=!!t,s()):o},e.padding=function(t){return arguments.length?(a=u=Math.max(0,Math.min(1,t)),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),s()):a},e.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),s()):u},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),s()):c},e.copy=function(){return ya().domain(r()).range(f).round(o).paddingInner(a).paddingOuter(u).align(c)},s()}var ga=function(t){return function(){return t}},xa=function(t){return+t},ma=[0,1];function wa(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:ga(n)}function Ma(t,n,e,r){var i=t[0],f=t[1],o=n[0],a=n[1];return f<i?(i=e(f,i),o=r(a,o)):(i=e(i,f),o=r(o,a)),function(t){return o(i(t))}}function Ta(t,n,e,r){var i=Math.min(t.length,n.length)-1,f=new Array(i),o=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)f[u]=e(t[u],t[u+1]),o[u]=r(n[u],n[u+1]);return function(n){var e=a(t,n,1,i)-1;return o[e](f[e](n))}}function Na(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Aa(t,n){var e,r,i,f=ma,o=ma,a=be,u=!1;function c(){return e=Math.min(f.length,o.length)>2?Ta:Ma,r=i=null,s}function s(n){return(r||(r=e(f,o,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return s.invert=function(t){return(i||(i=e(o,f,wa,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},s.domain=function(t){return arguments.length?(f=pa.call(t,xa),c()):f.slice()},s.range=function(t){return arguments.length?(o=_a.call(t),c()):o.slice()},s.rangeRound=function(t){return o=_a.call(t),a=ve,c()},s.clamp=function(t){return arguments.length?(u=!!t,c()):u},s.interpolate=function(t){return arguments.length?(a=t,c()):a},c()}var Sa=function(t,n,e){var r,i=t[0],f=t[t.length-1],o=g(i,f,null==n?10:n);switch((e=wi(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(f));return null!=e.precision||isNaN(r=Di(o,a))||(e.precision=r),Si(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=qi(o,Math.max(Math.abs(i),Math.abs(f))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Ri(o))||(e.precision=r-2*("%"===e.type))}return Ai(e)};function ka(t){var n=t.domain;return t.ticks=function(t){var e=n();return v(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Sa(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),f=0,o=i.length-1,a=i[f],u=i[o];return u<a&&(r=a,a=u,u=r,r=f,f=o,o=r),(r=y(a,u,e))>0?r=y(a=Math.floor(a/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=y(a=Math.ceil(a*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[f]=Math.floor(a/r)*r,i[o]=Math.ceil(u/r)*r,n(i)):r<0&&(i[f]=Math.ceil(a*r)/r,i[o]=Math.floor(u*r)/r,n(i)),t},t}function Ea(){var t=Aa(wa,ae);return t.copy=function(){return Na(t,Ea())},ka(t)}var Ca=new Date,Ua=new Date;function La(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,f){var o,a=[];if(e=i.ceil(e),f=null==f?1:Math.floor(f),!(e<r&&f>0))return a;do{a.push(o=new Date(+e)),n(e,f),t(e)}while(o<e&&e<r);return a},i.filter=function(e){return La(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Ca.setTime(+n),Ua.setTime(+r),t(Ca),t(Ua),Math.floor(e(Ca,Ua))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Pa=La(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Pa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?La(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Pa:null};var Ra=Pa,Da=(Pa.range,6e4),qa=6048e5,Fa=La(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Ya=Fa,ja=(Fa.range,La(function(t){t.setTime(Math.floor(t/Da)*Da)},function(t,n){t.setTime(+t+n*Da)},function(t,n){return(n-t)/Da},function(t){return t.getMinutes()})),Oa=ja,za=(ja.range,La(function(t){var n=t.getTimezoneOffset()*Da%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Ia=za,Ha=(za.range,La(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Da)/864e5},function(t){return t.getDate()-1})),$a=Ha;Ha.range;function Xa(t){return La(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Da)/qa})}var Ba=Xa(0),Va=Xa(1),Za=Xa(2),Ja=Xa(3),Wa=Xa(4),Qa=Xa(5),Ga=Xa(6),Ka=(Ba.range,Va.range,Za.range,Ja.range,Wa.range,Qa.range,Ga.range,La(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),tu=Ka,nu=(Ka.range,La(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));nu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?La(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var eu=nu,ru=(nu.range,La(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Da)},function(t,n){return(n-t)/Da},function(t){return t.getUTCMinutes()})),iu=ru,fu=(ru.range,La(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),ou=fu,au=(fu.range,La(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),uu=au;au.range;function cu(t){return La(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/qa})}var su=cu(0),hu=cu(1),lu=cu(2),du=cu(3),pu=cu(4),_u=cu(5),bu=cu(6),vu=(su.range,hu.range,lu.range,du.range,pu.range,_u.range,bu.range,La(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),yu=vu,gu=(vu.range,La(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));gu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?La(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var xu=gu;gu.range;function mu(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function wu(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Mu(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Tu(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,f=t.days,o=t.shortDays,a=t.months,u=t.shortMonths,c=Du(i),s=qu(i),h=Du(f),l=qu(f),d=Du(o),p=qu(o),_=Du(a),b=qu(a),v=Du(u),y=qu(u),g={a:function(t){return o[t.getDay()]},A:function(t){return f[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:ec,e:ec,f:ac,H:rc,I:ic,j:fc,L:oc,m:uc,M:cc,p:function(t){return i[+(t.getHours()>=12)]},Q:Fc,s:Yc,S:sc,u:hc,U:lc,V:dc,w:pc,W:_c,x:null,X:null,y:bc,Y:vc,Z:yc,"%":qc},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return f[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:gc,e:gc,f:Tc,H:xc,I:mc,j:wc,L:Mc,m:Nc,M:Ac,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Fc,s:Yc,S:Sc,u:kc,U:Ec,V:Cc,w:Uc,W:Lc,x:null,X:null,y:Pc,Y:Rc,Z:Dc,"%":qc},m={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=l[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=b[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:Bu,e:Bu,f:Gu,H:Zu,I:Zu,j:Vu,L:Qu,m:Xu,M:Ju,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:tc,s:nc,S:Wu,u:Yu,U:ju,V:Ou,w:Fu,W:zu,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:Hu,Y:Iu,Z:$u,"%":Ku};function w(t,n){return function(e){var r,i,f,o=[],a=-1,u=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(o.push(t.slice(u,a)),null!=(i=Eu[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(f=n[r])&&(r=f(e,i)),o.push(r),u=a+1);return o.push(t.slice(u,a)),o.join("")}}function M(t,n){return function(e){var r,i,f=Mu(1900);if(T(f,t,e+="",0)!=e.length)return null;if("Q"in f)return new Date(f.Q);if("p"in f&&(f.H=f.H%12+12*f.p),"V"in f){if(f.V<1||f.V>53)return null;"w"in f||(f.w=1),"Z"in f?(r=(i=(r=wu(Mu(f.y))).getUTCDay())>4||0===i?hu.ceil(r):hu(r),r=uu.offset(r,7*(f.V-1)),f.y=r.getUTCFullYear(),f.m=r.getUTCMonth(),f.d=r.getUTCDate()+(f.w+6)%7):(r=(i=(r=n(Mu(f.y))).getDay())>4||0===i?Va.ceil(r):Va(r),r=$a.offset(r,7*(f.V-1)),f.y=r.getFullYear(),f.m=r.getMonth(),f.d=r.getDate()+(f.w+6)%7)}else("W"in f||"U"in f)&&("w"in f||(f.w="u"in f?f.u%7:"W"in f?1:0),i="Z"in f?wu(Mu(f.y)).getUTCDay():n(Mu(f.y)).getDay(),f.m=0,f.d="W"in f?(f.w+6)%7+7*f.W-(i+5)%7:f.w+7*f.U-(i+6)%7);return"Z"in f?(f.H+=f.Z/100|0,f.M+=f.Z%100,wu(f)):n(f)}}function T(t,n,e,r){for(var i,f,o=0,a=n.length,u=e.length;o<a;){if(r>=u)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(f=m[i in Eu?n.charAt(o++):i])||(r=f(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return g.x=w(e,g),g.X=w(r,g),g.c=w(n,g),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",g);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",mu);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,wu);return n.toString=function(){return t},n}}}var Nu,Au,Su,ku,Eu={"-":"",_:" ",0:"0"},Cu=/^\s*\d+/,Uu=/^%/,Lu=/[\\^$*+?|[\]().{}]/g;function Pu(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",f=i.length;return r+(f<e?new Array(e-f+1).join(n)+i:i)}function Ru(t){return t.replace(Lu,"\\$&")}function Du(t){return new RegExp("^(?:"+t.map(Ru).join("|")+")","i")}function qu(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Fu(t,n,e){var r=Cu.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Yu(t,n,e){var r=Cu.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ju(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Ou(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function zu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Iu(t,n,e){var r=Cu.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Hu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function $u(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Xu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Bu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Vu(t,n,e){var r=Cu.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Zu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ju(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Wu(t,n,e){var r=Cu.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Qu(t,n,e){var r=Cu.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Gu(t,n,e){var r=Cu.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Ku(t,n,e){var r=Uu.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function tc(t,n,e){var r=Cu.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function nc(t,n,e){var r=Cu.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function ec(t,n){return Pu(t.getDate(),n,2)}function rc(t,n){return Pu(t.getHours(),n,2)}function ic(t,n){return Pu(t.getHours()%12||12,n,2)}function fc(t,n){return Pu(1+$a.count(eu(t),t),n,3)}function oc(t,n){return Pu(t.getMilliseconds(),n,3)}function ac(t,n){return oc(t,n)+"000"}function uc(t,n){return Pu(t.getMonth()+1,n,2)}function cc(t,n){return Pu(t.getMinutes(),n,2)}function sc(t,n){return Pu(t.getSeconds(),n,2)}function hc(t){var n=t.getDay();return 0===n?7:n}function lc(t,n){return Pu(Ba.count(eu(t),t),n,2)}function dc(t,n){var e=t.getDay();return t=e>=4||0===e?Wa(t):Wa.ceil(t),Pu(Wa.count(eu(t),t)+(4===eu(t).getDay()),n,2)}function pc(t){return t.getDay()}function _c(t,n){return Pu(Va.count(eu(t),t),n,2)}function bc(t,n){return Pu(t.getFullYear()%100,n,2)}function vc(t,n){return Pu(t.getFullYear()%1e4,n,4)}function yc(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Pu(n/60|0,"0",2)+Pu(n%60,"0",2)}function gc(t,n){return Pu(t.getUTCDate(),n,2)}function xc(t,n){return Pu(t.getUTCHours(),n,2)}function mc(t,n){return Pu(t.getUTCHours()%12||12,n,2)}function wc(t,n){return Pu(1+uu.count(xu(t),t),n,3)}function Mc(t,n){return Pu(t.getUTCMilliseconds(),n,3)}function Tc(t,n){return Mc(t,n)+"000"}function Nc(t,n){return Pu(t.getUTCMonth()+1,n,2)}function Ac(t,n){return Pu(t.getUTCMinutes(),n,2)}function Sc(t,n){return Pu(t.getUTCSeconds(),n,2)}function kc(t){var n=t.getUTCDay();return 0===n?7:n}function Ec(t,n){return Pu(su.count(xu(t),t),n,2)}function Cc(t,n){var e=t.getUTCDay();return t=e>=4||0===e?pu(t):pu.ceil(t),Pu(pu.count(xu(t),t)+(4===xu(t).getUTCDay()),n,2)}function Uc(t){return t.getUTCDay()}function Lc(t,n){return Pu(hu.count(xu(t),t),n,2)}function Pc(t,n){return Pu(t.getUTCFullYear()%100,n,2)}function Rc(t,n){return Pu(t.getUTCFullYear()%1e4,n,4)}function Dc(){return"+0000"}function qc(){return"%"}function Fc(t){return+t}function Yc(t){return Math.floor(+t/1e3)}!function(t){Nu=Tu(t),Au=Nu.format,Nu.parse,Su=Nu.utcFormat,ku=Nu.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Su("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ku("%Y-%m-%dT%H:%M:%S.%LZ");var jc=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Oc=(jc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),jc("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),jc("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jc("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),jc("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),jc("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),jc("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),jc("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),jc("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return ie(t[t.length-1])});Oc(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(jc)),Oc(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(jc)),Oc(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(jc)),Oc(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(jc)),Oc(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(jc)),Oc(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(jc)),Oc(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(jc)),Oc(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(jc)),Oc(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(jc)),Oc(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(jc)),Oc(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(jc)),Oc(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(jc)),Oc(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(jc)),Oc(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(jc)),Oc(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(jc)),Oc(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(jc)),Oc(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(jc)),Oc(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(jc)),Oc(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(jc)),Oc(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(jc)),Oc(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(jc)),Oc(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(jc)),Oc(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(jc)),Oc(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(jc)),Oc(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(jc)),Oc(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(jc)),Oc(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(jc)),Ce(Bn(300,.5,0),Bn(-240,.5,1)),Ce(Bn(-100,.75,.35),Bn(80,1.5,.8)),Ce(Bn(260,.75,.35),Bn(80,1.5,.8)),Bn(),pn(),Math.PI,Math.PI;function zc(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}zc(jc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),zc(jc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),zc(jc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),zc(jc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Ic=function(t){return function(){return t}},Hc=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,1e-12),$c=Math.PI,Xc=2*$c;function Bc(t){this._context=t}Bc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Vc=function(t){return new Bc(t)};function Zc(t){return t[0]}function Jc(t){return t[1]}var Wc=function(){var t=Zc,n=Jc,e=Ic(!0),r=null,i=Vc,f=null;function o(o){var a,u,c,s=o.length,h=!1;for(null==r&&(f=i(c=Sr())),a=0;a<=s;++a)!(a<s&&e(u=o[a],a,o))===h&&((h=!h)?f.lineStart():f.lineEnd()),h&&f.point(+t(u,a,o),+n(u,a,o));if(c)return f=null,c+""||null}return o.x=function(n){return arguments.length?(t="function"==typeof n?n:Ic(+n),o):t},o.y=function(t){return arguments.length?(n="function"==typeof t?t:Ic(+t),o):n},o.defined=function(t){return arguments.length?(e="function"==typeof t?t:Ic(!!t),o):e},o.curve=function(t){return arguments.length?(i=t,null!=r&&(f=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=f=null:f=i(r=t),o):r},o},Qc=function(){var t=Zc,n=null,e=Ic(0),r=Jc,i=Ic(!0),f=null,o=Vc,a=null;function u(u){var c,s,h,l,d,p=u.length,_=!1,b=new Array(p),v=new Array(p);for(null==f&&(a=o(d=Sr())),c=0;c<=p;++c){if(!(c<p&&i(l=u[c],c,u))===_)if(_=!_)s=c,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),h=c-1;h>=s;--h)a.point(b[h],v[h]);a.lineEnd(),a.areaEnd()}_&&(b[c]=+t(l,c,u),v[c]=+e(l,c,u),a.point(n?+n(l,c,u):b[c],r?+r(l,c,u):v[c]))}if(d)return a=null,d+""||null}function c(){return Wc().defined(i).curve(o).context(f)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:Ic(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:Ic(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Ic(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:Ic(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:Ic(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Ic(+t),u):r},u.lineX0=u.lineY0=function(){return c().x(t).y(e)},u.lineY1=function(){return c().x(t).y(r)},u.lineX1=function(){return c().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:Ic(!!t),u):i},u.curve=function(t){return arguments.length?(o=t,null!=f&&(a=o(f)),u):o},u.context=function(t){return arguments.length?(null==t?f=a=null:a=o(f=t),u):f},u};Kc(Vc);function Gc(t){this._curve=t}function Kc(t){function n(n){return new Gc(t(n))}return n._curve=t,n}Gc.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var ts=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]};Array.prototype.slice;var ns={draw:function(t,n){var e=Math.sqrt(n/$c);t.moveTo(e,0),t.arc(0,0,e,0,Xc)}},es={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},rs=Math.sqrt(1/3),is=2*rs,fs={draw:function(t,n){var e=Math.sqrt(n/is),r=e*rs;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},os=Math.sin($c/10)/Math.sin(7*$c/10),as=Math.sin(Xc/10)*os,us=-Math.cos(Xc/10)*os,cs={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=as*e,i=us*e;t.moveTo(0,-e),t.lineTo(r,i);for(var f=1;f<5;++f){var o=Xc*f/5,a=Math.cos(o),u=Math.sin(o);t.lineTo(u*e,-a*e),t.lineTo(a*r-u*i,u*r+a*i)}t.closePath()}},ss={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},hs=Math.sqrt(3),ls={draw:function(t,n){var e=-Math.sqrt(n/(3*hs));t.moveTo(0,2*e),t.lineTo(-hs*e,-e),t.lineTo(hs*e,-e),t.closePath()}},ds=Math.sqrt(3)/2,ps=1/Math.sqrt(12),_s=3*(ps/2+1),bs={draw:function(t,n){var e=Math.sqrt(n/_s),r=e/2,i=e*ps,f=r,o=e*ps+e,a=-f,u=o;t.moveTo(r,i),t.lineTo(f,o),t.lineTo(a,u),t.lineTo(-.5*r-ds*i,ds*r+-.5*i),t.lineTo(-.5*f-ds*o,ds*f+-.5*o),t.lineTo(-.5*a-ds*u,ds*a+-.5*u),t.lineTo(-.5*r+ds*i,-.5*i-ds*r),t.lineTo(-.5*f+ds*o,-.5*o-ds*f),t.lineTo(-.5*a+ds*u,-.5*u-ds*a),t.closePath()}},vs=function(){};function ys(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function gs(t){this._context=t}gs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ys(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ys(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function xs(t){this._context=t}xs.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:ys(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function ms(t){this._context=t}ms.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:ys(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function ws(t,n){this._basis=new gs(t),this._beta=n}ws.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],f=n[0],o=t[e]-i,a=n[e]-f,u=-1;++u<=e;)r=u/e,this._basis.point(this._beta*t[u]+(1-this._beta)*(i+r*o),this._beta*n[u]+(1-this._beta)*(f+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new gs(t):new ws(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function Ms(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Ts(t,n){this._context=t,this._k=(1-n)/6}Ts.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ms(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ms(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ts(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ns(t,n){this._context=t,this._k=(1-n)/6}Ns.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ms(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ns(t,n)}return e.tension=function(n){return t(+n)},e})(0);function As(t,n){this._context=t,this._k=(1-n)/6}As.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ms(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new As(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Ss(t,n,e){var r=t._x1,i=t._y1,f=t._x2,o=t._y2;if(t._l01_a>Hc){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Hc){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);f=(f*c+t._x1*t._l23_2a-n*t._l12_2a)/s,o=(o*c+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,f,o,t._x2,t._y2)}function ks(t,n){this._context=t,this._alpha=n}ks.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ss(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new ks(t,n):new Ts(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Es(t,n){this._context=t,this._alpha=n}Es.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ss(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Es(t,n):new Ns(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Cs(t,n){this._context=t,this._alpha=n}Cs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ss(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Cs(t,n):new As(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Us(t){this._context=t}Us.prototype={areaStart:vs,areaEnd:vs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Ls(t){return t<0?-1:1}function Ps(t,n,e){var r=t._x1-t._x0,i=n-t._x1,f=(t._y1-t._y0)/(r||i<0&&-0),o=(e-t._y1)/(i||r<0&&-0),a=(f*i+o*r)/(r+i);return(Ls(f)+Ls(o))*Math.min(Math.abs(f),Math.abs(o),.5*Math.abs(a))||0}function Rs(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ds(t,n,e){var r=t._x0,i=t._y0,f=t._x1,o=t._y1,a=(f-r)/3;t._context.bezierCurveTo(r+a,i+a*n,f-a,o-a*e,f,o)}function qs(t){this._context=t}function Fs(t){this._context=new Ys(t)}function Ys(t){this._context=t}function js(t){this._context=t}function Os(t){var n,e,r=t.length-1,i=new Array(r),f=new Array(r),o=new Array(r);for(i[0]=0,f[0]=2,o[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,f[n]=4,o[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,f[r-1]=7,o[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/f[n-1],f[n]-=e,o[n]-=e*o[n-1];for(i[r-1]=o[r-1]/f[r-1],n=r-2;n>=0;--n)i[n]=(o[n]-i[n+1])/f[n];for(f[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)f[n]=2*t[n+1]-i[n+1];return[i,f]}qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ds(this,this._t0,Rs(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ds(this,Rs(this,e=Ps(this,t,n)),e);break;default:Ds(this,this._t0,e=Ps(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Fs.prototype=Object.create(qs.prototype)).point=function(t,n){qs.prototype.point.call(this,n,t)},Ys.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,f){this._context.bezierCurveTo(n,t,r,e,f,i)}},js.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Os(t),i=Os(n),f=0,o=1;o<e;++f,++o)this._context.bezierCurveTo(r[0][f],i[0][f],r[1][f],i[1][f],t[o],n[o]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function zs(t,n){this._context=t,this._t=n}zs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Is=function(t,n){if((i=t.length)>1)for(var e,r,i,f=1,o=t[n[0]],a=o.length;f<i;++f)for(r=o,o=t[n[f]],e=0;e<a;++e)o[e][1]+=o[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Hs=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};var $s=function(t){var n=t.map(Xs);return Hs(t).sort(function(t,e){return n[t]-n[e]})};function Xs(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Bs(){this._=null}function Vs(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Zs(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Js(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Ws(t){for(;t.L;)t=t.L;return t}Bs.prototype={constructor:Bs,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Ws(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Zs(this,e),e=(t=e).U),e.C=!1,r.C=!0,Js(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Js(this,e),e=(t=e).U),e.C=!1,r.C=!0,Zs(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,f=t.L,o=t.R;if(e=f?o?Ws(o):f:o,i?i.L===t?i.L=e:i.R=e:this._=e,f&&o?(r=e.C,e.C=t.C,e.L=f,f.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Zs(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Js(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Zs(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Js(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Zs(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Js(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Qs=Bs;function Gs(t,n,e,r){var i=[null,null],f=xh.push(i)-1;return i.left=t,i.right=n,e&&th(i,t,n,e),r&&th(i,n,t,r),yh[t.index].halfedges.push(f),yh[n.index].halfedges.push(f),i}function Ks(t,n,e){var r=[n,e];return r.left=t,r}function th(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function nh(t,n,e,r,i){var f,o=t[0],a=t[1],u=o[0],c=o[1],s=0,h=1,l=a[0]-u,d=a[1]-c;if(f=n-u,l||!(f>0)){if(f/=l,l<0){if(f<s)return;f<h&&(h=f)}else if(l>0){if(f>h)return;f>s&&(s=f)}if(f=r-u,l||!(f<0)){if(f/=l,l<0){if(f>h)return;f>s&&(s=f)}else if(l>0){if(f<s)return;f<h&&(h=f)}if(f=e-c,d||!(f>0)){if(f/=d,d<0){if(f<s)return;f<h&&(h=f)}else if(d>0){if(f>h)return;f>s&&(s=f)}if(f=i-c,d||!(f<0)){if(f/=d,d<0){if(f>h)return;f>s&&(s=f)}else if(d>0){if(f<s)return;f<h&&(h=f)}return!(s>0||h<1)||(s>0&&(t[0]=[u+s*l,c+s*d]),h<1&&(t[1]=[u+h*l,c+h*d]),!0)}}}}}function eh(t,n,e,r,i){var f=t[1];if(f)return!0;var o,a,u=t[0],c=t.left,s=t.right,h=c[0],l=c[1],d=s[0],p=s[1],_=(h+d)/2,b=(l+p)/2;if(p===l){if(_<n||_>=r)return;if(h>d){if(u){if(u[1]>=i)return}else u=[_,e];f=[_,i]}else{if(u){if(u[1]<e)return}else u=[_,i];f=[_,e]}}else if(a=b-(o=(h-d)/(p-l))*_,o<-1||o>1)if(h>d){if(u){if(u[1]>=i)return}else u=[(e-a)/o,e];f=[(i-a)/o,i]}else{if(u){if(u[1]<e)return}else u=[(i-a)/o,i];f=[(e-a)/o,e]}else if(l<p){if(u){if(u[0]>=r)return}else u=[n,o*n+a];f=[r,o*r+a]}else{if(u){if(u[0]<n)return}else u=[r,o*r+a];f=[n,o*n+a]}return t[0]=u,t[1]=f,!0}function rh(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function ih(t,n){return n[+(n.left!==t.site)]}function fh(t,n){return n[+(n.left===t.site)]}var oh,ah=[];function uh(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,f=e.site;if(r!==f){var o=i[0],a=i[1],u=r[0]-o,c=r[1]-a,s=f[0]-o,h=f[1]-a,l=2*(u*h-c*s);if(!(l>=-wh)){var d=u*u+c*c,p=s*s+h*h,_=(h*d-c*p)/l,b=(u*p-s*d)/l,v=ah.pop()||new function(){Vs(this),this.x=this.y=this.arc=this.site=this.cy=null};v.arc=t,v.site=i,v.x=_+o,v.y=(v.cy=b+a)+Math.sqrt(_*_+b*b),t.circle=v;for(var y=null,g=gh._;g;)if(v.y<g.y||v.y===g.y&&v.x<=g.x){if(!g.L){y=g.P;break}g=g.L}else{if(!g.R){y=g;break}g=g.R}gh.insert(y,v),y||(oh=v)}}}}function ch(t){var n=t.circle;n&&(n.P||(oh=n.N),gh.remove(n),ah.push(n),Vs(n),t.circle=null)}var sh=[];function hh(t){var n=sh.pop()||new function(){Vs(this),this.edge=this.site=this.circle=null};return n.site=t,n}function lh(t){ch(t),vh.remove(t),sh.push(t),Vs(t)}function dh(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],f=t.P,o=t.N,a=[t];lh(t);for(var u=f;u.circle&&Math.abs(e-u.circle.x)<mh&&Math.abs(r-u.circle.cy)<mh;)f=u.P,a.unshift(u),lh(u),u=f;a.unshift(u),ch(u);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<mh&&Math.abs(r-c.circle.cy)<mh;)o=c.N,a.push(c),lh(c),c=o;a.push(c),ch(c);var s,h=a.length;for(s=1;s<h;++s)c=a[s],u=a[s-1],th(c.edge,u.site,c.site,i);u=a[0],(c=a[h-1]).edge=Gs(u.site,c.site,null,i),uh(u),uh(c)}function ph(t){for(var n,e,r,i,f=t[0],o=t[1],a=vh._;a;)if((r=_h(a,o)-f)>mh)a=a.L;else{if(!((i=f-bh(a,o))>mh)){r>-mh?(n=a.P,e=a):i>-mh?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){yh[t.index]={site:t,halfedges:[]}}(t);var u=hh(t);if(vh.insert(n,u),n||e){if(n===e)return ch(n),e=hh(n.site),vh.insert(u,e),u.edge=e.edge=Gs(n.site,u.site),uh(n),void uh(e);if(e){ch(n),ch(e);var c=n.site,s=c[0],h=c[1],l=t[0]-s,d=t[1]-h,p=e.site,_=p[0]-s,b=p[1]-h,v=2*(l*b-d*_),y=l*l+d*d,g=_*_+b*b,x=[(b*y-d*g)/v+s,(l*g-_*y)/v+h];th(e.edge,c,p,x),u.edge=Gs(c,t,null,x),e.edge=Gs(t,p,null,x),uh(n),uh(e)}else u.edge=Gs(n.site,u.site)}}function _h(t,n){var e=t.site,r=e[0],i=e[1],f=i-n;if(!f)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],u=e[1],c=u-n;if(!c)return a;var s=a-r,h=1/f-1/c,l=s/c;return h?(-l+Math.sqrt(l*l-2*h*(s*s/(-2*c)-u+c/2+i-f/2)))/h+r:(r+a)/2}function bh(t,n){var e=t.N;if(e)return _h(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var vh,yh,gh,xh,mh=1e-6,wh=1e-12;function Mh(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Th(t,n){return n[1]-t[1]||n[0]-t[0]}function Nh(t,n){var e,r,i,f=t.sort(Th).pop();for(xh=[],yh=new Array(t.length),vh=new Qs,gh=new Qs;;)if(i=oh,f&&(!i||f[1]<i.y||f[1]===i.y&&f[0]<i.x))f[0]===e&&f[1]===r||(ph(f),e=f[0],r=f[1]),f=t.pop();else{if(!i)break;dh(i.arc)}if(function(){for(var t,n,e,r,i=0,f=yh.length;i<f;++i)if((t=yh[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=rh(t,xh[n[e]]);for(o.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],u=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,f=xh.length;f--;)eh(i=xh[f],t,n,e,r)&&nh(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>mh||Math.abs(i[0][1]-i[1][1])>mh)||delete xh[f]}(o,a,u,c),function(t,n,e,r){var i,f,o,a,u,c,s,h,l,d,p,_,b=yh.length,v=!0;for(i=0;i<b;++i)if(f=yh[i]){for(o=f.site,a=(u=f.halfedges).length;a--;)xh[u[a]]||u.splice(a,1);for(a=0,c=u.length;a<c;)p=(d=fh(f,xh[u[a]]))[0],_=d[1],h=(s=ih(f,xh[u[++a%c]]))[0],l=s[1],(Math.abs(p-h)>mh||Math.abs(_-l)>mh)&&(u.splice(a,0,xh.push(Ks(o,d,Math.abs(p-t)<mh&&r-_>mh?[t,Math.abs(h-t)<mh?l:r]:Math.abs(_-r)<mh&&e-p>mh?[Math.abs(l-r)<mh?h:e,r]:Math.abs(p-e)<mh&&_-n>mh?[e,Math.abs(h-e)<mh?l:n]:Math.abs(_-n)<mh&&p-t>mh?[Math.abs(l-n)<mh?h:t,n]:null))-1),++c);c&&(v=!1)}if(v){var y,g,x,m=1/0;for(i=0,v=null;i<b;++i)(f=yh[i])&&(x=(y=(o=f.site)[0]-t)*y+(g=o[1]-n)*g)<m&&(m=x,v=f);if(v){var w=[t,n],M=[t,r],T=[e,r],N=[e,n];v.halfedges.push(xh.push(Ks(o=v.site,w,M))-1,xh.push(Ks(o,M,T))-1,xh.push(Ks(o,T,N))-1,xh.push(Ks(o,N,w))-1)}}for(i=0;i<b;++i)(f=yh[i])&&(f.halfedges.length||delete yh[i])}(o,a,u,c)}this.edges=xh,this.cells=yh,vh=gh=xh=yh=null}Nh.prototype={constructor:Nh,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return ih(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(f=(i=e.halfedges).length)for(var i,f,o,a=e.site,u=-1,c=n[i[f-1]],s=c.left===a?c.right:c.left;++u<f;)o=s,s=(c=n[i[u]]).left===a?c.right:c.left,o&&s&&r<o.index&&r<s.index&&Mh(a,o,s)<0&&t.push([a.data,o.data,s.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,f=this,o=f._found||0,a=f.cells.length;!(i=f.cells[o]);)if(++o>=a)return null;var u=t-i.site[0],c=n-i.site[1],s=u*u+c*c;do{i=f.cells[r=o],o=null,i.halfedges.forEach(function(e){var r=f.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var u=t-a[0],c=n-a[1],h=u*u+c*c;h<s&&(s=h,o=a.index)}})}while(null!==o);return f._found=r,null==e||s<=e*e?i.site:null}};function Ah(t,n,e){this.k=t,this.x=n,this.y=e}Ah.prototype={constructor:Ah,scale:function(t){return 1===t?this:new Ah(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Ah(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Sh=new Ah(1,0,0);Ah.prototype;e.d(n,!1,function(){}),e.d(n,!1,function(){return a}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"a",function(){return r}),e.d(n,!1,function(){return i}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return s}),e.d(n,!1,function(){return h}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return x}),e.d(n,"e",function(){return w}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return M}),e.d(n,!1,function(){return T}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return m}),e.d(n,!1,function(){return d}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return v}),e.d(n,!1,function(){return y}),e.d(n,!1,function(){return g}),e.d(n,!1,function(){return N}),e.d(n,!1,function(){return c}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"b",function(){return Y}),e.d(n,"c",function(){return j}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"f",function(){return Ur}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Cr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return sn}),e.d(n,!1,function(){return pn}),e.d(n,!1,function(){return yn}),e.d(n,!1,function(){return Un}),e.d(n,!1,function(){return Yn}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Bn}),e.d(n,!1,function(){return Zr}),e.d(n,!1,function(){}),e.d(n,!1,function(){return X}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Xt}),e.d(n,!1,function(){return Bt}),e.d(n,!1,function(){return ni}),e.d(n,!1,function(){return ri}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return fi}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return vr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return vr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"d",function(){return ci}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ai}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ai}),e.d(n,!1,function(){return Si}),e.d(n,!1,function(){return Pi}),e.d(n,!1,function(){return wi}),e.d(n,!1,function(){return Ri}),e.d(n,!1,function(){return Di}),e.d(n,!1,function(){return qi}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Of}),e.d(n,!1,function(){return zf}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Xf}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ro}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return to}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Uo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Co}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Fo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ao}),e.d(n,!1,function(){return So}),e.d(n,!1,function(){}),e.d(n,!1,function(){return qo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Sf}),e.d(n,!1,function(){return df}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Wo}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ia}),e.d(n,!1,function(){return oa}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ca}),e.d(n,!1,function(){}),e.d(n,!1,function(){return be}),e.d(n,!1,function(){return fe}),e.d(n,!1,function(){return Jn}),e.d(n,!1,function(){return Wn}),e.d(n,!1,function(){return oe}),e.d(n,!1,function(){return ae}),e.d(n,!1,function(){return ue}),e.d(n,!1,function(){return ve}),e.d(n,!1,function(){return _e}),e.d(n,!1,function(){return we}),e.d(n,!1,function(){return Me}),e.d(n,!1,function(){return Ae}),e.d(n,!1,function(){return ee}),e.d(n,!1,function(){return ie}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ce}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Sr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return _i}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ha}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return la}),e.d(n,!1,function(){}),e.d(n,"g",function(){return ya}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,"h",function(){return Ea}),e.d(n,!1,function(){}),e.d(n,!1,function(){return va}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return J}),e.d(n,!1,function(){}),e.d(n,!1,function(){return rt}),e.d(n,!1,function(){return It}),e.d(n,!1,function(){return Z}),e.d(n,!1,function(){return V}),e.d(n,!1,function(){return zt}),e.d(n,"i",function(){return Ft}),e.d(n,!1,function(){}),e.d(n,!1,function(){return qt}),e.d(n,!1,function(){return Q}),e.d(n,!1,function(){return K}),e.d(n,!1,function(){return ht}),e.d(n,!1,function(){return Ht}),e.d(n,!1,function(){}),e.d(n,!1,function(){return st}),e.d(n,!1,function(){return At}),e.d(n,!1,function(){return Ut}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Qc}),e.d(n,!1,function(){return Wc}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ts}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ns}),e.d(n,!1,function(){return es}),e.d(n,!1,function(){return fs}),e.d(n,!1,function(){return ss}),e.d(n,!1,function(){return cs}),e.d(n,!1,function(){return ls}),e.d(n,!1,function(){return bs}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Vc}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Is}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return $s}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Hs}),e.d(n,!1,function(){}),e.d(n,!1,function(){return La}),e.d(n,!1,function(){return Ra}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ra}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ya}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ya}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Oa}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ia}),e.d(n,!1,function(){}),e.d(n,!1,function(){return $a}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ba}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ba}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Va}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Wa}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return tu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return eu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return iu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return ou}),e.d(n,!1,function(){}),e.d(n,!1,function(){return uu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return su}),e.d(n,!1,function(){}),e.d(n,!1,function(){return su}),e.d(n,!1,function(){}),e.d(n,!1,function(){return hu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return pu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return yu}),e.d(n,!1,function(){}),e.d(n,!1,function(){return xu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Au}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Su}),e.d(n,!1,function(){return ku}),e.d(n,!1,function(){return Tu}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Ie}),e.d(n,!1,function(){return Xe}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Je}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return cr}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){}),e.d(n,!1,function(){return Sh})},,,,,function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),f=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(f).concat([i]).join("\n")}return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var f=this[i][0];"number"==typeof f&&(r[f]=!0)}for(i=0;i<t.length;i++){var o=t[i];"number"==typeof o[0]&&r[o[0]]||(e&&!o[2]?o[2]=e:e&&(o[2]="("+o[2]+") and ("+e+")"),n.push(o))}},n}},function(t,n,e){var r={},i=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),f=function(t){var n={};return function(t){if("function"==typeof t)return t();if(void 0===n[t]){var e=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}}(),o=null,a=0,u=[],c=e(7);function s(t,n){for(var e=0;e<t.length;e++){var i=t[e],f=r[i.id];if(f){f.refs++;for(var o=0;o<f.parts.length;o++)f.parts[o](i.parts[o]);for(;o<i.parts.length;o++)f.parts.push(b(i.parts[o],n))}else{var a=[];for(o=0;o<i.parts.length;o++)a.push(b(i.parts[o],n));r[i.id]={id:i.id,refs:1,parts:a}}}}function h(t,n){for(var e=[],r={},i=0;i<t.length;i++){var f=t[i],o=n.base?f[0]+n.base:f[0],a={css:f[1],media:f[2],sourceMap:f[3]};r[o]?r[o].parts.push(a):e.push(r[o]={id:o,parts:[a]})}return e}function l(t,n){var e=f(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),u.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=f(t.insertInto+" "+t.insertAt.before);e.insertBefore(n,i)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=u.indexOf(t);n>=0&&u.splice(n,1)}function p(t){var n=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),_(n,t.attrs),l(t,n),n}function _(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function b(t,n){var e,r,i,f;if(n.transform&&t.css){if(!(f=n.transform(t.css)))return function(){};t.css=f}if(n.singleton){var u=a++;e=o||(o=p(n)),r=y.bind(null,e,u,!1),i=y.bind(null,e,u,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",_(n,t.attrs),l(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,f=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||f)&&(r=c(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,e,n),i=function(){d(e),e.href&&URL.revokeObjectURL(e.href)}):(e=p(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){d(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=i()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=h(t,n);return s(e,n),function(t){for(var i=[],f=0;f<e.length;f++){var o=e[f];(a=r[o.id]).refs--,i.push(a)}t&&s(h(t,n),n);for(f=0;f<i.length;f++){var a;if(0===(a=i[f]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete r[a.id]}}}};var v=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}();function y(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=v(n,i);else{var f=document.createTextNode(i),o=t.childNodes;o[n]&&t.removeChild(o[n]),o.length?t.insertBefore(f,o[n]):t.appendChild(f)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,f=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(f)?t:(i=0===f.indexOf("//")?f:0===f.indexOf("/")?e+f:r+f.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,