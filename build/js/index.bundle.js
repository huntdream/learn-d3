!function(t){function e(e){for(var n,i,l=e[0],c=e[1],s=e[2],u=0,d=[];u<l.length;u++)i=l[u],a[i]&&d.push(a[i][0]),a[i]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(t[n]=c[n]);for(p&&p(e);d.length;)d.shift()();return o.push.apply(o,s||[]),r()}function r(){for(var t,e=0;e<o.length;e++){for(var r=o[e],n=!0,l=1;l<r.length;l++){var c=r[l];0!==a[c]&&(n=!1)}n&&(o.splice(e--,1),t=i(i.s=r[0]))}return t}var n={},a={0:0},o=[];function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=n,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="";var l=window.webpackJsonp=window.webpackJsonp||[],c=l.push.bind(l);l.push=e,l=l.slice();for(var s=0;s<l.length;s++)e(l[s]);var p=c;o.push([2,1]),r()}([,function(t,e,r){t.exports=r.p+"./assets/data.csv"},function(t,e,r){"use strict";r.r(e);var n=r(0),a=(r(3),r(1)),o=r.n(a);const i={top:40,right:20,bottom:30,left:100},l=500-i.top-i.bottom,c=1e3-i.left-i.right;let s=[],p=[];n.d(o.a,function(t){if(t.Year)return{year:t.Year,attendence:t.Attendance}}).then(function(t){(s=n.f().key(function(t){return t.year}).sortKeys(n.a).entries(t)).map(t=>{p.push({key:t.key,value:t.values.filter(t=>t.attendence).reduce((t,e)=>t+parseInt(e.attendence,10)||0,0)})}),function(){const t=[];s.map(e=>t.push(e.values.filter(t=>t.attendence).reduce((t,e)=>t+parseInt(e.attendence,10)||0,0)));const e=n.g().domain(s.map(t=>t.key)).range([i.left,c+i.left]).padding(.2),r=n.h().domain([0,n.e(t)]).range([i.top+l,i.top]);u.append("g").attr("transform",`translate(0,${i.top+l})`).call(n.b(e)),u.append("g").attr("class","grid").attr("transform",`translate(${i.left},0)`).call(n.c(r).scale(r).tickSize(-c,0,0)),u.append("text").attr("x",-l/2-i.top).attr("y",40).attr("transform","rotate(-90)").attr("text-anchor","middle").text("Amount of audience"),u.append("text").attr("x",c/2+i.left).attr("y",20).attr("text-anchor","middle").text("FIFA audience of years"),u.append("text").attr("x",c/2+i.left).attr("y",l+i.top+i.bottom).attr("text-anchor","middle").text("Year"),u.selectAll("rect").data(p).enter().append("rect").attr("fill","steelblue").attr("x",t=>e(t.key)).attr("y",t=>r(t.value)).attr("width",e.bandwidth()).attr("height",t=>l-r(t.value)+i.top),u.selectAll("rect").on("mouseenter",function(t,a){n.i(this).transition().attr("opacity",.6).attr("x",t=>e(t.key)-2).attr("width",e.bandwidth()+4);const o=r(t.value);u.append("line").attr("id","limit").attr("x1",i.left).attr("y1",o).attr("x2",e(t.key)+e.bandwidth()).attr("y2",o).attr("stroke","green")}).on("mouseleave",function(){n.i(this).transition().attr("opacity",1).attr("x",t=>e(t.key)).attr("width",e.bandwidth()),n.i("#limit").remove()})}()});const u=n.i("#chart").append("svg").attr("width",1e3).attr("height",500)},function(t,e,r){var n=r(4);"string"==typeof n&&(n=[[t.i,n,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};r(6)(n,a);n.locals&&(t.exports=n.locals)},function(t,e,r){(t.exports=r(5)(!1)).push([t.i,".grid path{stroke-width:0}.grid line{stroke:#9faaae;stroke-opacity:.6}",""])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,